/*****************************************/
/*  Program to generate wrapper scripts  */
/*****************************************/
$quiet on
//
// $0 = operation: "scripts", "properties", or "remove"
// $1 = output directory
// $2 = token/replacement
// $3 = platform (optional)
//
$assert $# >= 3, "Three arguments required: operation, output directory, and token/replacement value, optional platform."

$assert defined(fixpath), 'The standard "library.calc" is required; do not use the "-nolib" option!'

const operation = lower($0)
const outdir = fixpath($1)
const tokenreplacement = $2
const platform = $3 ?: info.os.id
const onwindows = platform === "windows"

const data = {
/* Windows .bat file template */
bat: [
    "@echo off",
    "setlocal",
    "set CLASS_NAME=${class}",
    "set CMD_ARGS=${args}",
    "set JVM_ARGS=${jvm}",
    "call %~dp0_find_and_run_class${find} %*",
    "endlocal",
    "exit /b %errorlevel%"
],

/* Non-Windows script file template */
bash: [
    "#!/bin/bash",
    "CLASS_NAME=${class}",
    "CMD_ARGS=${args}",
    "JVM_ARGS=${jvm}",
    "source _find_and_run_class${find}"
],

settings: [
    { name: '`',        class: '$calc.Calc', args: '-nolibraries'                    },
    { name: '``',       class: '$calc.Calc', args: '"-g -nolibraries"', find: '_gui' },
    { name: 'amort',    class: '$calc.Calc', args: '"${outdir}amort.calc --"'        },
    { name: 'b64',      class: '$tools.B64'                                          },
    { name: 'c',        class: '$calc.Calc'                                          },
    { name: 'calc',     class: '$calc.Calc'                                          },
    { name: 'calen',    class: '$calc.Calc', args: '"${outdir}calendar.calc --"'     },
    { name: 'canread',  class: '$util.FileUtilities'                                 },
    { name: 'cat',      class: '$cat.Cat'                                            },
    { name: 'cg',       class: '$calc.Calc',           args: '-g',    find: '_gui'   },
    { name: 'cmp',      class: '$compare.CompareFiles'                               },
    { name: 'cn',       class: '$calc.Calc', args: '-nolibraries'                    },
    { name: 'crl',      class: '$curl.CURL',                          find: '_gui'   },
    { name: 'csv',      class: '$test.CSVTest'                                       },
    { name: 'd',        class: '$directory.Dir'                                      },
    { name: 'decode',   class: 'net.iharder.b64.Base64', args: '-d'                  },
    { name: 'encode',   class: 'net.iharder.b64.Base64', args: '-e'                  },
    { name: 'environ',  class: '$util.Environment'                                   },
    { name: 'gmt',      class: '$tools.Gmt'                                          },
    { name: 'gunz',     class: '$tools.GUnzip'                                       },
    { name: 'gz',       class: '$tools.GZip'                                         },
    { name: 'hd',       class: '$tools.Head'                                         },
    { name: 'hexd',     class: '$tools.HexDump'                                      },
    { name: 'hsh',      class: '$tools.Hash'                                         },
    { name: 'isdir',    class: '$tools.IsDir'                                        },
    { name: 'lists',    class: '$util.Lists'                                         },
    { name: 'manifest', class: '$tools.DumpManifest'                                 },
    { name: 'matches',  class: '$matches.Matches'                                    },
    { name: 'md5',      class: '$tools.Hash',          args: '--algorithm=MD5'       },
    { name: 'os',       class: '$tools.OS'                                           },
    { name: 'prep',     class: '$preproc.PreProc'                                    },
    { name: 'preproc',  class: '$preproc.PreProc'                                    },
    { name: 'sha1',     class: '$tools.Hash',          args: '--algorithm=SHA-1'     },
    { name: 'sha256',   class: '$tools.Hash'                                         },
    { name: 'sha512',   class: '$tools.Hash',          args: '--algorithm=SHA-512'   },
    { name: 'sleep',    class: '$util.Sleep'                                         },
    { name: 'tester',   class: '$tester.Tester',       jvm: '@@@JVM17+@@@'           },
    { name: 'timethis', class: '$util.TimeThis'                                      },
    { name: 'tre',      class: '$tree.Tree'                                          },
    { name: 'unq',      class: '$tools.Uniq'                                         },
    { name: 'uuid',     class: '$tools.Uuid'                                         },
    { name: 'uversion'                                                               },
    { name: 'wc',       class: '$tools.WordCount'                                    },
    { name: 'wf',       class: '$wordfind.WordFind'                                  },
    { name: 'wfg',      class: '$wordfind.WordFind',   args: '-gui',  find: '_gui'   },
    { name: 'which',    class: '$util.Which'                                         }
]
} // end of "data"

var splits = split(tokenreplacement, '/')
var token = splits[0]
var replacement = splits[1] ?: ""


/*
 * Main function to generate the "calcscripts.properties" file to include within the .jar file.
 */
define properties() = {
    var file = []
    const outputFile = outdir + 'calcscripts.properties'
    display `Generating "$outputFile" ...`
    loop set in data.settings {
        var name = set.name
        rpad(name, 12)
        const class = set.class ?! replace(set.class, '$', 'info.rlwhitcomb.')
        const jvm   = set.jvm   ?! replace(set.jvm, token, replacement)

        file += `$name= $class,${set.args},$jvm`
    }
    write(file, outputFile)
}

/*
 * Main function to generate the various wrapper scripts for all our tools.
 */
define scripts() = {
    loop set in data.settings {
        var file = []
        var outputFile
        var template
        const class = set.class ?! replace(set.class, '$', 'info.rlwhitcomb.')
        const jvm   = set.jvm   ?! replace(set.jvm, token, replacement)
        const find  = set.find  ?: ''
        const args  = set.args  ?! replace(set.args, '${outdir}', outdir)

        if onwindows {
            outputFile = set.name + ".bat"
            template = data.bat
        }
        else {
            outputFile = set.name
            template = data.bash
        }
        outputFile = outdir + outputFile

        display `Generating "$outputFile" ...`
        loop line over template {
            case line in {
                matches s'.+\$\{class\}'  : if class { file += replace(line, '${class}',  class) },
                matches s'.+\$\{args\}'   : if args  { file += replace(line, '${args}',   args)  },
                matches s'.+\$\{jvm\}'    : if jvm   { file += replace(line, '${jvm}',    jvm)   },
                matches s'.+\$\{find\}.*' :            file += replace(line, '${find}',   find),
                default: file += line
            }
        }
        write(file, outputFile)
        if !onwindows {
            exec('chmod', '+x', outputFile)
        }
    }
}

/*
 * Main function to remove the generated wrapper scripts (during "clean").
 */
define remove() = {
    loop set in data.settings {
        outputFile = onwindows ? set.name + ".bat" : set.name
        outputFile = outdir + outputFile
        display `Removing "$outputFile" ...`
        delete outputFile
    }
}

case operation of {
       "scripts",
    "properties",
        "remove" : eval(`$operation()`),
    default      : $assert false, `Undefined operation "$operation"!`
}

