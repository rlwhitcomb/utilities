/*
 * Problem 45 from Project Euler (projecteuler.net)
 *
 * Triangular, Pentagonal, and Hexagonal
 *
 * Triangle, pentagonal, and hexagonal numbers are generated by the folowing formulae:
 *
 * Triangle      Tn = n(n + 1)/2     1, 3, 6, 10, 15, ...
 * Pentagonal    Pn = n(3n - 1)/2    1, 5, 12, 22, 35, ...
 * Hexagonal     Hn = n(2n - 1)      1, 6, 15, 28, 45, ...
 *
 * It can be verified that T285 == P165 == H143 == 40755.
 *
 * Find the next triangle number that is also pentagonal and hexagonal.
 */
$quiet on {

define tri(n) = n * (n + 1) / 2
define pent(n) = n * (3 * n - 1) / 2
define hex(n) = n * (2 * n - 1)

const TEST_T = 285
const TEST_P = 165
const TEST_H = 143

/*
 * Okay, I cheated a little bit for purposes of demonstration:
 * I first checked all the values up to 99,999 and found the solution,
 * but this took a lot of time (several minutes), so I semi-arbitrarily
 * picked these limits so as to reduce the amount of search time
 * required for this test.
 */
const LOWER_T_LIMIT = 54000
const UPPER_T_LIMIT = 55999
const LOWER_P_LIMIT = 30000
const UPPER_P_LIMIT = 32999
const LOWER_H_LIMIT = 26000
const UPPER_H_LIMIT = 27999

/*
 * Generate lists of numbers between these empirically-derived limits to do the searching.
 */
var T = [], P = [], H = []

loop t over LOWER_T_LIMIT ... UPPER_T_LIMIT { T += tri(t)  }
loop p over LOWER_P_LIMIT ... UPPER_P_LIMIT { P += pent(p) }
loop h over LOWER_H_LIMIT ... UPPER_H_LIMIT { H += hex(h)  }

var nextT

// Ideally, the "loop" statement could be used to assign the value, but sadly we are not there yet
loop t over T {
   if (t in P) && (t in H) {
      nextT = t
      leave
   }
}

/*
 * Generate a message verifying that the solution is correct.
 *
 * @param value Value that should be found in all three lists.
 * @param t     Index of the triangular number that produces this value.
 * @param p     Same for pentagonal.
 * @param h     Also for hexagonal.
 * @return      The verification message.
 */
define verify(value, t, p, h) = {
   `Value: $value = T$t (${tri(t)}) = P$p (${pent(p)}) = H$h (${hex(h)}).`
}

const indexT = search(T, nextT) + LOWER_T_LIMIT
const indexP = search(P, nextT) + LOWER_P_LIMIT
const indexH = search(H, nextT) + LOWER_H_LIMIT

} // end of quiet on

$resultsonly on {
   
   $echo verify(40755, TEST_T, TEST_P, TEST_H)
   $echo verify(nextT, indexT, indexP, indexH)

} // end of results on

