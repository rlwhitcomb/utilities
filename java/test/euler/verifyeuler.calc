$quiet on
// We can't have separators in our number strings
$separators off
// We rely on the standard library here
$assert defined(capitalize), '"library.calc" is required; please rerun without "-nolib" option.'

$echo '**********************************'
$echo ' R E M E M B E R'
$echo '  These solutions are meant to be'
$echo '  kept private to Project Euler.'
$echo ' D O   N O T   C O M M I T'
$echo '**********************************'

const DIR      = 'test/euler/'
const PATTERN  = 'p*'
const CALC     = '.calc'
const CANON    = '.canon'
const TESTFILE = 'eulertest'
const VALUES   = 'test_values.txt'

var numberOfTests = 0

// The real (secret) solution values are in a separate file, which must be present for
// this to complete correctly.
$assert exists(DIR + VALUES, 'fr'), `$VALUES file must exist in the $DIR directory!`
eval(read(DIR + VALUES))

// This is the "tester" script that actually runs the calculations against the canon files
// to make sure we have test coverage of each completed problem.
const TEST_LINES = split(read(DIR + TESTFILE), LINESEP)

/*
 * Verify that every file in the first list is present in the second list.
 *
 * @param list1  First list of file names (with extensions).
 * @param list2  Second list of file names.
 * @param ext1   Extension of the first list.
 * @param ext2   Extensions found in the second list.
 */
define verify_files(list1, list2, ext1, ext2) = {
   $echo `Verifying "$ext2" files exist for each "$ext1" file ...`
   loop f over list1 {
      const g = replace(f, ext1, '')
      const h = join(g, g, ': ')
      $assert (g + ext2 in list2), `"$f" exists but the "${g + ext2}" file was not found!`
      $assert (g in TEST_VALUES), `"$g" is not in our test list!`
      $assert (h in TEST_LINES), `"$g" is not in the "eulertest" script!`
   }
}

/*
 * Read the canon file given the "name" and
 * verify that the given value is contained
 * in the canon.
 * Only continue if the expected value is found,
 * otherwise quit with an "$assert" failure.
 *
 * @param name Name of the problem (as in 'p10').
 * @param val  Expected value (from the Project Euler archives).
 */
define verify(name, val) = {
   $echo `Verifying "$name" ...`
   var f = read(DIR + name + CANON)
   $assert notnull(index(f, @@val)), `"${name + CANON} does not contain correct value of $val!`
   numberOfTests++
}

const calc_files  = sort(findfiles(DIR, PATTERN + CALC))
const canon_files = sort(findfiles(DIR, PATTERN + CANON))

verify_files(calc_files, canon_files, CALC, CANON)
verify_files(canon_files, calc_files, CANON, CALC)

loop test over TEST_VALUES {
   verify(test, TEST_VALUES[test])
}

const res = `${numberOfTests@w}`
$echo `${capitalize(res, FIRSTCAP)} canon files verified.`
