/*
 * Problem 24 from Project Euler (projecteuler.net)
 *
 * Lexicographic Permutations
 *
 * A permutation is an ordered arrangement of objects. For example, 3124 is one possible
 * permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically
 * or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:
 *
 *           012   021   102   120   201   210
 *
 * What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?
 */
$quiet on {

const FINISH = 1000000
var current = [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' ]
var number = 1
const LEN = length(current)

#
# Implementation modelled after https://rosettacode.org/wiki/Permutations#C
#

define permute() = {
   /* 1. Find the largest index i such that a[i] < a[i + 1]. If no such
	      index exists, the permutation is the last permutation. */
   var i = LEN - 1
   while i > 0 && current[i - 1] >= current[i] i--
   if i <= 0 leave permute: null

   /* 2. Find the largest index j such that a[i] < a[j]. Since i + 1 is
	   such an index, j is well defined */
   var j = LEN
   while current[j-1] <= current[i-1] j--

$assert j >= i
   current[j-1], current[i-1] = current[i-1], current[j-1]

   i++
   j = LEN
   while i < j {
      current[i-1], current[j-1] = current[j-1], current[i-1]
      i++
      j--
   }
   leave permute: current
}

while number++ < FINISH {
   permute
}

}

$resultsonly on {

`The ${FINISH}th lexicographic permutation is ${join(current, "")}.`

}
