>verbose -> true
>All variables cleared.
>Variables
>---------
>$# -> 6
>$* -> [ "abc", "def", 1, 2, 3, "text" ]
>$0 -> "abc"
>$1 -> "def"
>$2 -> 1
>$3 -> 2
>$4 -> 3
>$5 -> "text"
>=========
>Defining function “oddness” = {
> Case value % 2 Of
> 0: 'even',
> 1: 'odd',
> Default: 'NOT POSSIBLE!'
>}
>value = 27 -> 27
>oddness -> "odd"
>value = 30 -> 30
>oddness -> "even"
>value = -1 -> -1
>oddness -> "NOT POSSIBLE!"
>Defining function “oddness_if” = {
> IF Abs (value % 2) == 0
> 'even'
> ELSE
> 'odd'
>}
>value = 23 -> 23
>oddness_if -> "odd"
>value = 14 -> 14
>oddness_if -> "even"
>value = pi -> 3.141592653589793238462643383279503
>oddness_if -> "odd"
>Defining function “multiples” = 
> {
> case value of
> Default: { 'some other value' },
> 7, 14, 21: { 'multiple of 7' },
> 6, 12, 18: { 'multiple of 6' }
>}
>value = 14 -> 14
>multiples -> "multiple of 7"
>value = 12 -> 12
>multiples -> "multiple of 6"
>value = 3 -> 3
>multiples -> "some other value"
>Defining function “match_arrays” = {
> case value of {
> []: {
> 'empty array'
>},
> [1, 2]: {
> "one and two"
>},
> default: {
> 'some other array'
>}
>}
>}
>value = [] -> [ ]
>match_arrays -> "empty array"
>value = [1, 2] -> [ 1, 2 ]
>match_arrays -> "one and two"
>value = [3, 4, 5] -> [ 3, 4, 5 ]
>match_arrays -> "some other array"
>Defining function “strings” = {
> case upper (value) of
> "ONE": 1,
> "TWO": 2,
> "THREE": 3.14,
> default: "many"
>}
>value = 'one' -> "one"
>strings -> 1
>value = 'Two' -> "Two"
>strings -> 2
>value = 'THREE' -> "THREE"
>strings -> 3.14
>value = "zero" -> "zero"
>strings -> "many"
>Defining function “fieldType(typeid)” = {
> case typeid of {
> 4: ' TEXT',
> 7: 'LABEL',
> 19,
> default,
> 23: `$typeid`
>}
>}
>fieldType(4) -> " TEXT"
>fieldType(7) -> "LABEL"
>fieldType(23) -> "23"
>fieldType(19) -> "19"
>fieldType(99) -> "99"
>'type: ' + fieldType(4) -> "type:  TEXT"
>Defining function “srt(a1,a2,f)” = { f(a1, a2) > 0 ? a1 : a2 }
>Defining function “precision_to_directive” = {
> case settings.precision of {
> 0: ':unlimited',
> 1, 2, 3, 4, 5, 6,
> 8 ... 15, 1,
> 17 .. 33: `:dec ${settings.precision}`,
> 7: ':float',
> 16: ':double',
> 34: ':default',
> default: `:decimal(${settings.precision})`
>}
>}
>old_precision = settings.precision -> 34
>Precision is now “UNLIMITED”.
>precision_to_directive -> ":unlimited"
>Precision is now “one” digit.
>precision_to_directive -> ":dec 1"
>Precision is now “2” digits.
>precision_to_directive -> ":dec 2"
>Precision is now “3” digits.
>precision_to_directive -> ":dec 3"
>Precision is now “4” digits.
>precision_to_directive -> ":dec 4"
>Precision is now “5” digits.
>precision_to_directive -> ":dec 5"
>Precision is now “6” digits.
>precision_to_directive -> ":dec 6"
>Precision is now “7” digits.
>precision_to_directive -> ":float"
>Precision is now “8” digits.
>precision_to_directive -> ":dec 8"
>Precision is now “9” digits.
>precision_to_directive -> ":dec 9"
>Precision is now “10” digits.
>precision_to_directive -> ":dec 10"
>Precision is now “11” digits.
>precision_to_directive -> ":dec 11"
>Precision is now “12” digits.
>precision_to_directive -> ":dec 12"
>Precision is now “13” digits.
>precision_to_directive -> ":dec 13"
>Precision is now “14” digits.
>precision_to_directive -> ":dec 14"
>Precision is now “15” digits.
>precision_to_directive -> ":dec 15"
>Precision is now “16” digits.
>precision_to_directive -> ":double"
>Precision is now “17” digits.
>precision_to_directive -> ":dec 17"
>Precision is now “18” digits.
>precision_to_directive -> ":dec 18"
>Precision is now “19” digits.
>precision_to_directive -> ":dec 19"
>Precision is now “20” digits.
>precision_to_directive -> ":dec 20"
>Precision is now “21” digits.
>precision_to_directive -> ":dec 21"
>Precision is now “22” digits.
>precision_to_directive -> ":dec 22"
>Precision is now “23” digits.
>precision_to_directive -> ":dec 23"
>Precision is now “24” digits.
>precision_to_directive -> ":dec 24"
>Precision is now “25” digits.
>precision_to_directive -> ":dec 25"
>Precision is now “26” digits.
>precision_to_directive -> ":dec 26"
>Precision is now “27” digits.
>precision_to_directive -> ":dec 27"
>Precision is now “28” digits.
>precision_to_directive -> ":dec 28"
>Precision is now “29” digits.
>precision_to_directive -> ":dec 29"
>Precision is now “30” digits.
>precision_to_directive -> ":dec 30"
>Precision is now “31” digits.
>precision_to_directive -> ":dec 31"
>Precision is now “32” digits.
>precision_to_directive -> ":dec 32"
>Precision is now “33” digits.
>precision_to_directive -> ":dec 33"
>Precision is now “34” digits.
>precision_to_directive -> ":default"
>Precision is now “35” digits.
>precision_to_directive -> ":decimal(35)"
>Precision is now “36” digits.
>precision_to_directive -> ":decimal(36)"
>Precision is now “37” digits.
>precision_to_directive -> ":decimal(37)"
>Precision is now “38” digits.
>precision_to_directive -> ":decimal(38)"
>Precision is now “39” digits.
>precision_to_directive -> ":decimal(39)"
>Precision is now “40” digits.
>precision_to_directive -> ":decimal(40)"
>Precision is now “34” digits.
>settings.precision = old_precision -> 34
>precision_to_directive -> ":default"
>test_string = 'abababc' -> "abababc"
>case test_string of {
> matches '(ab){3}.': 'match',
> default: 'not a match'
>} -> "match"
>Defining function “test(a)” = {
> case a of {
> 0: 'zero',
> 1: 'one',
> 3: 'three',
> default: next,
> 4: 'even'
>}
>}
>test(v) -> "zero"
>test(v) -> "one"
>test(v) -> "even"
>test(v) -> "three"
>test(v) -> "even"
>Defining function “power(n)” = {
> var result = 1 ;
> case n of {
> 20: { result *= n ; next },
> 19: { result *= n ; next },
> 18: { result *= n ; next },
> 17: { result *= n ; next },
> 16: { result *= n ; next },
> 15: { result *= n ; next },
> 14: { result *= n ; next },
> 13: { result *= n ; next },
> 12: { result *= n ; next },
> 11: { result *= n ; next },
> 10: { result *= n ; next },
> 9: { result *= n ; next },
> 8: { result *= n ; next },
> 7: { result *= n ; next },
> 6: { result *= n ; next },
> 5: { result *= n ; next },
> 4: { result *= n ; next },
> 3: { result *= n ; next },
> 2: { result *= n ; next },
> 1: { result *= n ; next }
>}
> result
>}
>power(f) -> 1
>power(f) -> 4
>power(f) -> 27
>power(f) -> 256
>power(f) -> 3125
>power(f) -> 46656
>power(f) -> 823543
>power(f) -> 16777216
>power(f) -> 387420489
>power(f) -> 10000000000
>power(f) -> 285311670611
>power(f) -> 8916100448256
>power(f) -> 302875106592253
>power(f) -> 11112006825558016
>power(f) -> 437893890380859375
>power(f) -> 18446744073709551616
>power(f) -> 827240261886336764177
>power(f) -> 39346408075296537575424
>power(f) -> 1978419655660313589123979
>power(f) -> 104857600000000000000000000
>Defining function “sign(value)” = {
> case value of {
> < 0: -1,
> == 0: 0,
> > 0: + 1
>}
>}
>sign(-23) -> -1
>signum (-23) -> -1
>sign(0.0) -> 0
>signum (0.0) -> 0
>sign(0.01) -> 1
>signum (0.01) -> 1
>Defining function “m(v)” = {
> case v of {
> matches "abc", 1: 'this is abc',
> matches "def", 1: 'and def',
> default: 'something else!'
>}
>}
>m("ABC") -> "this is abc"
>m("abc") -> "this is abc"
>m("Def") -> "and def"
>m("def") -> "and def"
>m("junk") -> "something else!"
>w = {universal: true} -> { universal: true }
>Defining function “u” = { "universal" }
>Defining function “v” = { w }
>v().`$u` -> true
>v().`$u` = 127 -> 127
>v() -> { universal: 127 }
>$# -> 6
>$* -> [ "abc", "def", 1, 2, 3, "text" ]
>$0 -> "abc"
>$4 -> 3
>$*[2] -> 1
>$5 -> "text"
>Defining function “sum_of_cubes(x,y,z,sum)” = { x ** 3 + y ** 3 + z ** 3 == sum }
>Precision is now “400” digits.
>sum_of_cubes(1214928, 3480205, -3528875, 2) -> true
>sum_of_cubes(37404275617, -25282289375, -33071554596, 2) -> true
>sum_of_cubes(3737830626090, 1490220318001, -3815176160999, 2) -> true
>sum_of_cubes(1, 1, 1, 3) -> true
>sum_of_cubes(4, 4, -5, 3) -> true
>sum_of_cubes(569936821221962380720, -569936821113563493509, -472715493453327032, 3) -> true
>sum_of_cubes(4207039164926, 3980702370479, -5161892429569, 6) -> true
>sum_of_cubes(8866128975287528, -8778405442862239, -2736111468807040, 33) -> true
>sum_of_cubes(-80538738812075974, 80435758145817515, 12602123297335631, 42) -> true
>sum_of_cubes(-284650292555885, 66229832190556, 283450105697727, 74) -> true
>sum_of_cubes(-14219049725358227, 14197965759741571, 2337348783323923, 795) -> true
>sum_of_cubes(8832050461219, -4404654595589, -8450650557413, 993) -> true
>Precision is now “34” digits.
