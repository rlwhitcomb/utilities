>verbose -> true
>All variables cleared.
>Variables
>---------
>$# -> 6
>$* -> [ "abc", "def", 1, 2, 3, "text" ]
>$0 -> "abc"
>$1 -> "def"
>$2 -> 1
>$3 -> 2
>$4 -> 3
>$5 -> "text"
>=========
>Defining function “oddness” = {
> Case value % 2 Of
> 0: 'even',
> 1: 'odd',
> Default: 'NOT POSSIBLE!'
>}
>value = 27 -> 27
>oddness -> "odd"
>value = 30 -> 30
>oddness -> "even"
>value = -1 -> -1
>oddness -> "NOT POSSIBLE!"
>Defining function “oddness_if” = {
> IF Abs (value % 2) == 0
> 'even'
> ELSE
> 'odd'
>}
>value = 23 -> 23
>oddness_if -> "odd"
>value = 14 -> 14
>oddness_if -> "even"
>value = pi -> 3.141592653589793238462643383279503
>oddness_if -> "odd"
>Defining function “multiples” = 
> {
> case value of
> Default: { 'some other value' },
> 7, 14, 21: { 'multiple of 7' },
> 6, 12, 18: { 'multiple of 6' }
>}
>value = 14 -> 14
>multiples -> "multiple of 7"
>value = 12 -> 12
>multiples -> "multiple of 6"
>value = 3 -> 3
>multiples -> "some other value"
>Defining function “match_arrays” = {
> case value of {
> []: {
> 'empty array'
>},
> [1, 2]: {
> "one and two"
>},
> default: {
> 'some other array'
>}
>}
>}
>value = [] -> [ ]
>match_arrays -> "empty array"
>value = [1, 2] -> [ 1, 2 ]
>match_arrays -> "one and two"
>value = [3, 4, 5] -> [ 3, 4, 5 ]
>match_arrays -> "some other array"
>Defining function “strings” = {
> case upper (value) of
> "ONE": 1,
> "TWO": 2,
> "THREE": 3.14,
> default: "many"
>}
>value = 'one' -> "one"
>strings -> 1
>value = 'Two' -> "Two"
>strings -> 2
>value = 'THREE' -> "THREE"
>strings -> 3.14
>value = "zero" -> "zero"
>strings -> "many"
>Defining function “fieldType(typeid)” = {
> case typeid of {
> 4: ' TEXT',
> 7: 'LABEL',
> 19,
> default,
> 23: `$typeid`
>}
>}
>fieldType(4) -> " TEXT"
>fieldType(7) -> "LABEL"
>fieldType(23) -> "23"
>fieldType(19) -> "19"
>fieldType(99) -> "99"
>'type: ' + fieldType(4) -> "type:  TEXT"
>Defining function “srt(a1,a2,f)” = { f(a1, a2) > 0 ? a1 : a2 }
>Defining function “precision_to_directive” = {
> case settings.precision of {
> 0: ':unlimited',
> 1, 2, 3, 4, 5, 6,
> 8 ... 15, 1,
> 17 .. 33: `:dec ${settings.precision}`,
> 7: ':float',
> 16: ':double',
> 34: ':default',
> default: `:decimal(${settings.precision})`
>}
>}
>old_precision = settings.precision -> 34
>Precision is now “UNLIMITED”.
>precision_to_directive -> ":unlimited"
>Precision is now “one” digit.
>precision_to_directive -> ":dec 1"
>Precision is now “2” digits.
>precision_to_directive -> ":dec 2"
>Precision is now “3” digits.
>precision_to_directive -> ":dec 3"
>Precision is now “4” digits.
>precision_to_directive -> ":dec 4"
>Precision is now “5” digits.
>precision_to_directive -> ":dec 5"
>Precision is now “6” digits.
>precision_to_directive -> ":dec 6"
>Precision is now “7” digits.
>precision_to_directive -> ":float"
>Precision is now “8” digits.
>precision_to_directive -> ":dec 8"
>Precision is now “9” digits.
>precision_to_directive -> ":dec 9"
>Precision is now “10” digits.
>precision_to_directive -> ":dec 10"
>Precision is now “11” digits.
>precision_to_directive -> ":dec 11"
>Precision is now “12” digits.
>precision_to_directive -> ":dec 12"
>Precision is now “13” digits.
>precision_to_directive -> ":dec 13"
>Precision is now “14” digits.
>precision_to_directive -> ":dec 14"
>Precision is now “15” digits.
>precision_to_directive -> ":dec 15"
>Precision is now “16” digits.
>precision_to_directive -> ":double"
>Precision is now “17” digits.
>precision_to_directive -> ":dec 17"
>Precision is now “18” digits.
>precision_to_directive -> ":dec 18"
>Precision is now “19” digits.
>precision_to_directive -> ":dec 19"
>Precision is now “20” digits.
>precision_to_directive -> ":dec 20"
>Precision is now “21” digits.
>precision_to_directive -> ":dec 21"
>Precision is now “22” digits.
>precision_to_directive -> ":dec 22"
>Precision is now “23” digits.
>precision_to_directive -> ":dec 23"
>Precision is now “24” digits.
>precision_to_directive -> ":dec 24"
>Precision is now “25” digits.
>precision_to_directive -> ":dec 25"
>Precision is now “26” digits.
>precision_to_directive -> ":dec 26"
>Precision is now “27” digits.
>precision_to_directive -> ":dec 27"
>Precision is now “28” digits.
>precision_to_directive -> ":dec 28"
>Precision is now “29” digits.
>precision_to_directive -> ":dec 29"
>Precision is now “30” digits.
>precision_to_directive -> ":dec 30"
>Precision is now “31” digits.
>precision_to_directive -> ":dec 31"
>Precision is now “32” digits.
>precision_to_directive -> ":dec 32"
>Precision is now “33” digits.
>precision_to_directive -> ":dec 33"
>Precision is now “34” digits.
>precision_to_directive -> ":default"
>Precision is now “35” digits.
>precision_to_directive -> ":decimal(35)"
>Precision is now “36” digits.
>precision_to_directive -> ":decimal(36)"
>Precision is now “37” digits.
>precision_to_directive -> ":decimal(37)"
>Precision is now “38” digits.
>precision_to_directive -> ":decimal(38)"
>Precision is now “39” digits.
>precision_to_directive -> ":decimal(39)"
>Precision is now “40” digits.
>precision_to_directive -> ":decimal(40)"
>Precision is now “34” digits.
>settings.precision = old_precision -> 34
>precision_to_directive -> ":default"
>test_string = 'abababc' -> "abababc"
>case test_string of {
> matches '(ab){3}.': 'match',
> default: 'not a match'
>} -> "match"
>Defining function “test(a)” = {
> case a of {
> 0: 'zero',
> 1: 'one',
> 3: 'three',
> default: next,
> 4: 'even'
>}
>}
>test(v) -> "zero"
>test(v) -> "one"
>test(v) -> "even"
>test(v) -> "three"
>test(v) -> "even"
>Defining function “power(n)” = {
> var result = 1 ;
> case n of {
> 20: { result *= n ; next },
> 19: { result *= n ; next },
> 18: { result *= n ; next },
> 17: { result *= n ; next },
> 16: { result *= n ; next },
> 15: { result *= n ; next },
> 14: { result *= n ; next },
> 13: { result *= n ; next },
> 12: { result *= n ; next },
> 11: { result *= n ; next },
> 10: { result *= n ; next },
> 9: { result *= n ; next },
> 8: { result *= n ; next },
> 7: { result *= n ; next },
> 6: { result *= n ; next },
> 5: { result *= n ; next },
> 4: { result *= n ; next },
> 3: { result *= n ; next },
> 2: { result *= n ; next },
> 1: { result *= n ; next }
>}
> result
>}
>power(f) -> 1
>power(f) -> 4
>power(f) -> 27
>power(f) -> 256
>power(f) -> 3125
>power(f) -> 46656
>power(f) -> 823543
>power(f) -> 16777216
>power(f) -> 387420489
>power(f) -> 10000000000
>power(f) -> 285311670611
>power(f) -> 8916100448256
>power(f) -> 302875106592253
>power(f) -> 11112006825558016
>power(f) -> 437893890380859375
>power(f) -> 18446744073709551616
>power(f) -> 827240261886336764177
>power(f) -> 39346408075296537575424
>power(f) -> 1978419655660313589123979
>power(f) -> 104857600000000000000000000
>Defining function “sign(value)” = {
> case value of {
> < 0: -1,
> == 0: 0,
> > 0: + 1
>}
>}
>sign(-23) -> -1
>signum (-23) -> -1
>sign(0.0) -> 0
>signum (0.0) -> 0
>sign(0.01) -> 1
>signum (0.01) -> 1
>Defining function “m(v)” = {
> case v of {
> matches "abc", 1: 'this is abc',
> matches "def", 1: 'and def',
> default: 'something else!'
>}
>}
>m("ABC") -> "this is abc"
>m("abc") -> "this is abc"
>m("Def") -> "and def"
>m("def") -> "and def"
>m("junk") -> "something else!"
>Defining function “range(value)” = {
> case value of {
> >= 0.0 && < 1.0: 1,
> >= 1.0 && < 2.0: 2,
> >= 2.0 && < 3.0: 3,
> >= 3.0 && < 4.0: 4,
> default: 0
>}
>}
>range(1.5) -> 2
>range(3.7) -> 4
>range(0) -> 1
>range(0.9) -> 1
>range(1) -> 2
>w = {universal: true} -> { universal: true }
>Defining function “u” = { "universal" }
>Defining function “v” = { w }
>v().`$u` -> true
>v().`$u` = 127 -> 127
>v() -> { universal: 127 }
>$# -> 6
>$* -> [ "abc", "def", 1, 2, 3, "text" ]
>$0 -> "abc"
>$4 -> 3
>$*[2] -> 1
>$5 -> "text"
>Defining function “sum_of_cubes(sum,x,y,z)” = { x ** 3 + y ** 3 + z ** 3 == sum }
>Precision is now “400” digits.
>sum_of_cubes(1, 9, 10, − 12) -> true
>sum_of_cubes(2, 1214928, 3480205, -3528875) -> true
>sum_of_cubes(2, 37404275617, -25282289375, -33071554596) -> true
>sum_of_cubes(2, 3737830626090, 1490220318001, -3815176160999) -> true
>sum_of_cubes(3, 1, 1, 1) -> true
>sum_of_cubes(3, 4, 4, -5) -> true
>sum_of_cubes(3, 569936821221962380720, -569936821113563493509, -472715493453327032) -> true
>sum_of_cubes(6, − 1, − 1, 2) -> true
>sum_of_cubes(6, 4207039164926, 3980702370479, -5161892429569) -> true
>sum_of_cubes(7, 0, − 1, 2) -> true
>sum_of_cubes(8, 9, 15, − 16) -> true
>sum_of_cubes(9, 0, 1, 2) -> true
>sum_of_cubes(10, 1, 1, 2) -> true
>sum_of_cubes(11, − 2, − 2, 3) -> true
>sum_of_cubes(12, 7, 10, − 11) -> true
>sum_of_cubes(15, − 1, 2, 2) -> true
>sum_of_cubes(16, − 511, − 1609, 1626) -> true
>sum_of_cubes(17, 1, 2, 2) -> true
>sum_of_cubes(18, − 1, − 2, 3) -> true
>sum_of_cubes(19, 0, − 2, 3) -> true
>sum_of_cubes(20, 1, − 2, 3) -> true
>sum_of_cubes(21, − 11, − 14, 16) -> true
>sum_of_cubes(24, − 2901096694, − 15550555555, 15584139827) -> true
>sum_of_cubes(25, − 1, − 1, 3) -> true
>sum_of_cubes(26, 0, − 1, 3) -> true
>sum_of_cubes(27, − 4, − 5, 6) -> true
>sum_of_cubes(28, 0, 1, 3) -> true
>sum_of_cubes(29, 1, 1, 3) -> true
>sum_of_cubes(30, − 283059965, − 2218888517, 2220422932) -> true
>sum_of_cubes(33, 8866128975287528, -8778405442862239, -2736111468807040) -> true
>sum_of_cubes(34, − 1, 2, 3) -> true
>sum_of_cubes(35, 0, 2, 3) -> true
>sum_of_cubes(36, 1, 2, 3) -> true
>sum_of_cubes(37, 0, − 3, 4) -> true
>sum_of_cubes(38, 1, − 3, 4) -> true
>sum_of_cubes(39, 117367, 134476, − 159380) -> true
>sum_of_cubes(42, -80538738812075974, 80435758145817515, 12602123297335631) -> true
>sum_of_cubes(43, 2, 2, 3) -> true
>sum_of_cubes(44, − 5, − 7, 8) -> true
>sum_of_cubes(45, 2, − 3, 4) -> true
>sum_of_cubes(46, − 2, 3, 3) -> true
>sum_of_cubes(47, 6, 7, − 8) -> true
>sum_of_cubes(48, − 23, − 26, 31) -> true
>sum_of_cubes(51, 602, 659, − 796) -> true
>sum_of_cubes(52, 23961292454, 60702901317, − 61922712865) -> true
>sum_of_cubes(53, − 1, 3, 3) -> true
>sum_of_cubes(54, − 7, − 11, 12) -> true
>sum_of_cubes(55, 1, 3, 3) -> true
>sum_of_cubes(56, − 11, − 21, 22) -> true
>sum_of_cubes(57, 1, − 2, 4) -> true
>sum_of_cubes(60, − 1, − 4, 5) -> true
>sum_of_cubes(61, 0, − 4, 5) -> true
>sum_of_cubes(62, 2, 3, 3) -> true
>sum_of_cubes(63, 0, − 1, 4) -> true
>sum_of_cubes(64, − 3, − 5, 6) -> true
>sum_of_cubes(65, 0, 1, 4) -> true
>sum_of_cubes(66, 1, 1, 4) -> true
>sum_of_cubes(69, 2, − 4, 5) -> true
>sum_of_cubes(70, 11, 20, − 21) -> true
>sum_of_cubes(71, − 1, 2, 4) -> true
>sum_of_cubes(72, 7, 9, − 10) -> true
>sum_of_cubes(73, 1, 2, 4) -> true
>sum_of_cubes(74, 66229832190556, 283450105697727, − 284650292555885) -> true
>sum_of_cubes(75, 4381159, 435203083, − 435203231) -> true
>sum_of_cubes(78, 26, 53, − 55) -> true
>sum_of_cubes(795, -14219049725358227, 14197965759741571, 2337348783323923) -> true
>sum_of_cubes(906, -74924259395610397, 72054089679353378, 35961979615356503) -> true
>sum_of_cubes(993, 8832050461219, -4404654595589, -8450650557413) -> true
>Precision is now “34” digits.
>Defining function “collatz(n)” = {
> var steps = 0
> var v = n
> while v <> 1 {
> case v % 2 of {
> 0: v \= 2,
> 1: v = v * 3 + 1
>}
> ++ steps
>}
> steps
>}
>collatz(1) -> 0
>collatz(2) -> 1
>collatz(3) -> 7
>collatz(4) -> 2
>collatz(5) -> 5
>collatz(6) -> 8
>collatz(7) -> 16
>collatz(8) -> 3
>collatz(9) -> 19
>collatz(10) -> 6
>collatz(11) -> 14
>collatz(12) -> 9
>collatz(13) -> 9
>collatz(14) -> 17
>collatz(15) -> 17
>collatz(16) -> 4
>collatz(17) -> 12
>collatz(18) -> 20
>collatz(19) -> 20
>collatz(20) -> 7
>collatz(21) -> 7
>collatz(22) -> 15
>collatz(23) -> 15
>collatz(24) -> 10
>collatz(25) -> 23
>collatz(26) -> 10
>collatz(27) -> 111
>collatz(28) -> 18
>collatz(29) -> 18
>collatz(30) -> 18
>collatz(31) -> 106
>collatz(32) -> 5
>collatz(33) -> 26
>collatz(34) -> 13
>collatz(35) -> 13
>collatz(36) -> 21
>collatz(37) -> 21
>collatz(38) -> 21
>collatz(39) -> 34
>collatz(40) -> 8
>collatz(41) -> 109
>collatz(42) -> 8
>collatz(43) -> 29
>collatz(44) -> 16
>collatz(45) -> 16
>collatz(46) -> 16
>collatz(47) -> 104
>collatz(48) -> 11
>collatz(49) -> 24
>collatz(50) -> 24
>collatz(51) -> 24
>collatz(52) -> 11
>collatz(53) -> 11
>collatz(54) -> 112
>collatz(55) -> 112
>collatz(56) -> 19
>collatz(57) -> 32
>collatz(58) -> 19
>collatz(59) -> 32
>collatz(60) -> 19
>collatz(61) -> 19
>collatz(62) -> 107
>collatz(63) -> 107
>collatz(64) -> 6
>collatz(65) -> 27
>collatz(66) -> 27
>collatz(67) -> 27
>collatz(68) -> 14
>collatz(69) -> 14
>collatz(70) -> 14
>collatz(71) -> 102
>collatz(72) -> 22
>collatz(73) -> 115
>collatz(74) -> 22
>collatz(75) -> 14
>collatz(76) -> 22
>collatz(77) -> 22
>collatz(78) -> 35
>collatz(79) -> 35
>collatz(80) -> 9
>collatz(81) -> 22
>collatz(82) -> 110
>collatz(83) -> 110
>collatz(84) -> 9
>collatz(85) -> 9
>collatz(86) -> 30
>collatz(87) -> 30
>collatz(88) -> 17
>collatz(89) -> 30
>collatz(90) -> 17
>collatz(91) -> 92
>collatz(92) -> 17
>collatz(93) -> 17
>collatz(94) -> 105
>collatz(95) -> 105
>collatz(96) -> 12
>collatz(97) -> 118
>collatz(98) -> 25
>collatz(99) -> 25
>collatz(100) -> 25
>collatz(101) -> 25
>collatz(102) -> 25
>collatz(103) -> 87
>collatz(104) -> 12
>collatz(105) -> 38
>collatz(106) -> 12
>collatz(107) -> 100
>collatz(108) -> 113
>collatz(109) -> 113
>collatz(110) -> 113
>collatz(111) -> 69
>collatz(112) -> 20
>collatz(113) -> 12
>collatz(114) -> 33
>collatz(115) -> 33
>collatz(116) -> 20
>collatz(117) -> 20
>collatz(118) -> 33
>collatz(119) -> 33
>collatz(120) -> 20
>collatz(121) -> 95
>collatz(122) -> 20
>collatz(123) -> 46
>collatz(124) -> 108
>collatz(125) -> 108
>collatz(126) -> 108
>collatz(127) -> 46
>collatz(128) -> 7
>collatz(129) -> 121
>collatz(130) -> 28
>collatz(131) -> 28
>collatz(132) -> 28
>collatz(133) -> 28
>collatz(134) -> 28
>collatz(135) -> 41
>collatz(136) -> 15
>collatz(137) -> 90
>collatz(138) -> 15
>collatz(139) -> 41
>collatz(140) -> 15
>collatz(141) -> 15
>collatz(142) -> 103
>collatz(143) -> 103
>collatz(144) -> 23
>collatz(145) -> 116
>collatz(146) -> 116
>collatz(147) -> 116
>collatz(148) -> 23
>collatz(149) -> 23
>collatz(150) -> 15
>collatz(151) -> 15
>collatz(152) -> 23
>collatz(153) -> 36
>collatz(154) -> 23
>collatz(155) -> 85
>collatz(156) -> 36
>collatz(157) -> 36
>collatz(158) -> 36
>collatz(159) -> 54
>collatz(160) -> 10
>collatz(161) -> 98
>collatz(162) -> 23
>collatz(163) -> 23
>collatz(164) -> 111
>collatz(165) -> 111
>collatz(166) -> 111
>collatz(167) -> 67
>collatz(168) -> 10
>collatz(169) -> 49
>collatz(170) -> 10
>collatz(171) -> 124
>collatz(172) -> 31
>collatz(173) -> 31
>collatz(174) -> 31
>collatz(175) -> 80
>collatz(176) -> 18
>collatz(177) -> 31
>collatz(178) -> 31
>collatz(179) -> 31
>collatz(180) -> 18
>collatz(181) -> 18
>collatz(182) -> 93
>collatz(183) -> 93
>collatz(184) -> 18
>collatz(185) -> 44
>collatz(186) -> 18
>collatz(187) -> 44
>collatz(188) -> 106
>collatz(189) -> 106
>collatz(190) -> 106
>collatz(191) -> 44
>collatz(192) -> 13
>collatz(193) -> 119
>collatz(194) -> 119
>collatz(195) -> 119
>collatz(196) -> 26
>collatz(197) -> 26
>collatz(198) -> 26
>collatz(199) -> 119
>collatz(200) -> 26
