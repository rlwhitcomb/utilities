>Starting expression tests (suite 1).
>
>Precision is now 50 digits.
>52 + 27 -> 79
>3.4 + 5 -> 8.4
>34 + 5 @x -> 0x27
>PI -> 3.141592653589793238462643383279502884197169399375105
>sin (pi / 3) -> 0.86602540378443864676372317075293618347140262690517
>4 & 7 -> 4
>true && false -> false
>(1 + 2) * (3 + 4) -> 21
>Precision is now 16 digits.
>atan2 (4, 5) -> 0.6747409422235527
>14 / 7 -> 2
>12 / 4 -> 3
>13 / 9 -> 1.444444444444444
>a = 1 -> 1
>b = 2 -> 2
>a + b -> 3
>a <=> b -> -1
>a <= b -> true
>b < a -> false
>1 > 2 -> false
>2 >= 1 -> true
>Precision is now 34 digits.
>1.2 + 3.4 -> 4.6
>1 / 7 -> 0.1428571428571428571428571428571429
>Precision is now 18 digits.
>e -> 2.7182818284590452353
>a -> 1
>All variables cleared.
>a -> <null>
>a = b = c = 27 -> 27
>a + b -> 54
>b + c -> 54
>e -> 2.7182818284590452353
>name = 'Roger' -> "Roger"
>"This isn't a number" -> "This isn't a number"
>'This ' + "isn't" + " a number" -> "This isn't a number"
>'This isn\'t either, ' + name -> "This isn't either, Roger"
>Precision is now 60 digits.
>s = sqrt (17) -> 4.12310562561766054982140985597407702514719922537362043439864
>t = s * s -> 17.0000000000000000000000000000000000000000000000000000000001
>t = 17 ** 0.5 -> 4.12310562561766058564671766362152993679046630859375
>t * t -> 17.0000000000000002954230563223910221532761907018178681606627
>u = 12 ! -> 479001600
>v = cbrt (u) -> 782.430289767919172129487594284066592725746299239673099133301
>v * v * v - u -> 0.000000000000000000000000000000000000000000000000000
>u ** (1 / 3) -> 782.4302897679189072732697241008281707763671875
>t ⁸ -> 83521.0000000000058056539028476285186906560463719062610295841
>3 ⁶ -> 729
>_This_is_a_very_long_variable_name_Which_not_surprisingly_is_not_worth_remembering_1_ = sqrt 42 -> 6.48074069840786023096596743608799665770520430705834654971136
>++ _This_is_a_very_long_variable_name_Which_not_surprisingly_is_not_worth_remembering_1_ -> 7.48074069840786023096596743608799665770520430705834654971136
>Variable '_This_is_a_very_long_variable_name_Which_not_surprisingly_is_not_worth_remembering_1_' cleared.
>_This_is_a_very_long_variable_name_Which_not_surprisingly_is_not_worth_remembering_1_ -> <null>
>72 ! -> 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000
>-5 ! -> 0.0416666666666666666666666666666666666666666666666666666666667
>-8 ! -> -0.000198412698412698412698412698412698412698412698412698412698413
>1 / 7 ! -> 0.000198412698412698412698412698412698412698412698412698412698413
>fib 27 -> 196418
>fib 0 -> 0
>fib 1 -> 1
>fib 2 -> 1
>fib 3 -> 2
>fib 5 -> 5
>fib -1 -> 1
>fib -2 -> -1
>fib -6 -> -8
>fib 200 -> 280571172992510140037611932413038677189525
>I = 1 -> 1
>++ I -> 2
>I -> 2
>J = 2 -> 2
>J ++ -> 2
>J -> 3
>Precision is now 16 digits.
>pi / 2 -> 1.570796326794897
>asin (sin (pi / 2)) -> 1.570796326794897
>pi / 4 -> 0.7853981633974483
>acos (cos (pi / 4)) -> 0.7853981633974484
>pi / 3 -> 1.047197551196598
>atan (tan (pi / 3)) -> 1.047197551196598
>b = -27 -> -27
>c = 0 -> 0
>d = 153 -> 153
>signum b -> -1
>signum c -> 0
>signum d -> 1
>length b -> 2
>length c -> 1
>length d -> 3
>scale b -> 0
>scale c -> 0
>scale d -> 0
>h = 23 -> 23
>i = ln (h) -> 3.1354942159291497
>e ** i -> 23.00000000000000
>m = 10000 -> 10000
>n = log (m) -> 4
>10 ** n -> 10000
>p = ln2 (1000000) -> 19.93156856932417
>2 ** p -> 999999.9999999974
>isprime 15485863 -> true
>Trig mode is now DEGREES.
>sin (45) -> 0.7071067811865477
>cos (60) -> 0.4999999999999998
>asin (sin (50)) -> 50.00000000000001
>acos (cos (30)) -> 29.99999999999999
>atan (tan (15)) -> 15
>Trig mode is now RADIANS.
>Precision is now 60 digits.
>π -> 3.1415926535897932384626433832795028841971693993751058209749445
>a = sin (π / 4) -> 0.707106781186547524400844362104849039284835937688474036588340
>b = a * 2 -> 1.41421356237309504880168872420969807856967187537694807317668
>c = b * b -> 2.00000000000000000000000000000000000000000000000000000000000
>round c, 14 -> 2.00000000000000
>round (a, 10) -> 0.7071067812
>round a, -2 -> 0.7
>round c, 0 -> 2
>sin (2700) -> -0.980287334634811667478146359133904571815486693671784054587473
>sin -(4 * pi) -> -0.0000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000
>min 1, -1, 27, -300, 18.5, -300.5 -> -300.5
>max 'abc', 'ghi', "ABC", "012" -> "ghi"
>min (-27) -> -27
>max (2.4) -> 2.4
>min (-3, -5) -> -5
>max (1, 3, 5, 2, 8, 9, 11, 4, 6) -> 11
>gcd (25, 10) -> 5
>gcd (27 * 2, 3 * 9 * 18) -> 54
>lcm (6, 10) -> 30
>lcm -20, 30 -> -60
>max ('123', 456, 789) -> "789"
>min (123, '-1', '14') -> -1
>ty = 47 -> 47
>ty \ 13 -> 3
>ty \= 6 -> 7
>10 \ 3 -> 3
>5 \ 6 -> 0
>127 | 128 -> 255
>15 & 7 -> 7
>31 ^ 10 -> 21
>0b0011 ~& 0b0101 @b -> 0b11111110
>0b0011 ~| 0b0101 @b -> 0b11111000
>0b0011 ^ 0b0101 @b -> 0b110
>~ 0b0110 @b -> 0b11111001
>0b0011 ~^ 0b0101 @b -> 0b11111001
>0x3FF &~ 0xFF0 @X -> 0XF
>'abc' != "ABC" && 0 != 1 -> true
>false ^^ false -> false
>false ^^ true -> true
>true ^^ false -> true
>true ^^ true -> false
>0xFFFF ^ 0xAAAA @X -> 0X5555
>012 -> 10
>10 @o -> 012
>0b1010101010 @x -> 0x2aa
>0x2aa @b -> 0b1010101010
>~ 0x7FFF @X -> 0X8000
>~ 0x7FFF @o -> 0200000
>~ 0x7FFF @b -> 0b1000000000000000
>255 @o -> 0377
>123 @b -> 0b1111011
>'def' @o -> '144145146'
>'abc' @b -> '011000010110001001100011'
>'Hello' @X -> '48656C6C6F'
>Variables 'this', 'hello', 'handsome', and 'rude' cleared.
>this = join ('This', 'is', 'a', 'test', ' ') -> "This is a test"
>hello = join ('Hello', "World!", ', ') -> "Hello, World!"
>handsome = join ("Hello ", "handsome.") -> "Hello handsome."
>rude = join "RUDE!" -> "RUDE!"
>length this -> 14
>length hello -> 13
>length handsome -> 15
>length rude -> 5
>'[' + join (1, 2, 3, 4, 5, ', ') + ']' -> "[1, 2, 3, 4, 5]"
>target = 'this is the day' -> "this is the day"
>split target, ' ' -> [ "this", "is", "the", "day" ]
>split (target, ' ', 2) -> [ "this", "is the day" ]
>target = 'boo:and:foo' -> "boo:and:foo"
>split target, ':', 2 -> [ "boo", "and:foo" ]
>split (target, ':', 5) -> [ "boo", "and", "foo" ]
>split (target, ':', -2) -> [ "boo", "and", "foo" ]
>split (target, 'o', 5) -> [ "b", "", ":and:f", "", "" ]
>split (target, 'o', -2) -> [ "b", "", ":and:f", "", "" ]
>split target, 'o' -> [ "b", "", ":and:f" ]
>Variables 'target', 'one', 'two', and 'three' cleared.
>target = 'This is an "index" test.' -> "This is an \"index\" test."
>one = index target, 'is' -> 2
>two = index target, 'is', one + 1 -> 5
>three = index target, 'test', -1 -> -5
>index (target, 'junk') -> <null>
>index (target, 'more junk', -1) -> <null>
>one = substr (target, 4) -> " is an \"index\" test."
>two = substr (target, 11, 18) -> "\"index\""
>three = substr (target, index (target, 'test', -1)) -> "test."
>substr (target, index (target, '"', 0), index (target, '"', -1) + 1) -> "\"index\""
>funny_string = ' \t\f  \r\n   345  \f  \t \r\n  ' -> " 	  
>   345    	 
>  "
>trim funny_string -> "345"
>ltrim funny_string -> "345    	 
>  "
>rtrim funny_string -> " 	  
>   345"
>arr_n = [] -> [ ]
>fill arr_n, 0, 10 -> [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
>fill arr_n, 1, 2, 3 -> [ 0, 0, 1, 1, 1, 0, 0, 0, 0, 0 ]
>fill arr_n, 3, 12, 4 -> [ 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, <null>, <null>, 3, 3, 3, 3 ]
>str_b = '' -> ""
>fill str_b, '=', 25 -> "========================="
>fill str_b, '-', 0, 3 -> "---======================"
>fill str_b, '-', 22, 3 -> "---===================---"
>1 < 2 == 3 > 4 -> false
>1 == '1' > 2 != '2' -> true
>1 === '1' -> false
>1 == '1' -> true
>! true -> false
>a -> 0.707106781186547524400844362104849039284835937688474036588340
>! (a == null) -> true
>! foundset.username -> true
>foundset.username = '' -> ""
>! foundset.username -> true
>foundset.username = 'Don' -> "Don"
>! foundset.username -> false
>! ! foundset.username -> true
>Precision is now 200 digits.
>1 / 7 -> 0.14285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714
>Precision is now 30 digits.
>1 / 9 -> 0.111111111111111111111111111111
>Precision is now 50 digits.
>pi -> 3.141592653589793238462643383279502884197169399375105
>Precision is now 10000 digits.
>e -> 2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901157383418793070215408914993488416750924476146066808226480016847741185374234544243710753907774499206955170276183860626133138458300075204493382656029760673711320070932870912744374704723069697720931014169283681902551510865746377211125238978442505695369677078544996996794686445490598793163688923009879312773617821542499922957635148220826989519366803318252886939849646510582093923982948879332036250944311730123819706841614039701983767932068328237646480429531180232878250981945581530175671736133206981125099618188159304169035159888851934580727386673858942287922849989208680582574927961048419844436346324496848756023362482704197862320900216099023530436994184914631409343173814364054625315209618369088870701676839642437814059271456354906130310720851038375051011574770417189861068739696552126715468895703503540212340784981933432106817012100562788023519303322474501585390473041995777709350366041699732972508868769664035557071622684471625607988265178713419512466520103059212366771943252786753985589448969709640975459185695638023637016211204774272283648961342251644507818244235294863637214174023889344124796357437026375529444833799801612549227850925778256209262264832627793338656648162772516401910590049164499828931505660472580277863186415519565324425869829469593080191529872117255634754639644791014590409058629849679128740687050489585867174798546677575732056812884592054133405392200011378630094556068816674001698420558040336379537645203040243225661352783695117788386387443966253224985065499588623428189970773327617178392803494650143455889707194258639877275471096295374152111513683506275260232648472870392076431005958411661205452970302364725492966693811513732275364509888903136020572481765851180630364428123149655070475102544650117272115551948668508003685322818315219600373562527944951582841882947876108526398139559900673764829224437528718462457803619298197139914756448826260390338144182326251509748279877799643730899703888677822713836057729788241256119071766394650706330452795466185509666618566470971134447401607046262156807174818778443714369882185596709591025968620023537185887485696522000503117343920732113908032936344797273559552773490717837934216370120500545132638354400018632399149070547977805669785335804896690629511943247309958765523681285904138324116072260299833053537087613893963917795745401613722361878936526053815584158718692553860616477983402543512843961294603529133259427949043372990857315802909586313826832914771163963370924003168945863606064584592512699465572483918656420975268508230754425459937691704197778008536273094171016343490769642372229435236612557250881477922315197477806056967253801718077636034624592787784658506560507808442115296975218908740196609066518035165017925046195013665854366327125496399085491442000145747608193022120660243300964127048943903971771951806990869986066365832322787093765022601492910115171776359446020232493002804018677239102880978666056511832600436885088171572386698422422010249505518816948032210025154264946398128736776589276881635983124778865201411741109136011649950766290779436460058519419985601626479076153210387275571269925182756879893027617611461625493564959037980458381823233686120162437365698467037858533052758333379399075216606923805336988795651372855938834998947074161815501253970646481719467083481972144888987906765037959036696724949925452790337296361626589760394985767413973594410237443297093554779826296145914429364514286171585873397467918975712119561873857836447584484235555810500256114923915188930994634284139360803830916628188115037152849670597416256282360921680751501777253874025642534708790891372917228286115159156837252416307722544063378759310598267609442032619242853170187817729602354130606721360460003896610936470951414171857770141806064436368154644400533160877831431744408119494229755993140118886833148328027065538330046932901157441475631399972217038046170928945790962716622607407187499753592127560844147378233032703301682371936480021732857349359475643341299430248502357322145978432826414216848787216733670106150942434569844018733128101079451272237378861260581656680537143961278887325273738903928905068653241380627960259303877276977837928684093253658807339884572187460210053114833513238500478271693762180049047955979592905916554705057775143081751126989851884087185640260353055837378324229241856256442550226721559802740126179719280471396006891638286652770097527670697770364392602243728418408832518487704726384403795301669054659374616193238403638931313643271376888410268112198912752230562567562547017250863497653672886059667527408686274079128565769963137897530346606166698042182677245605306607738996242183408598820718646826232150802882863597468396543588566855037731312965879758105012149162076567699506597153447634703208532156036748286083786568030730626576334697742956346437167093971930608769634953288468336130388294310408002968738691170666661468000151211434422560238744743252507693870777751932999421372772112588436087158348356269616619805725266122067975406210620806498829184543953015299820925030054982570433905535701686531205264956148572492573862069174036952135337325316663454665885972866594511364413703313936721185695539521084584072443238355860631068069649248512326326995146035960372972531983684233639046321367101161928217111502828016044880588023820319814930963695967358327420249882456849412738605664913525267060462344505492275811517093149218795927180019409688669868370373022004753143381810927080300172059355305207007060722339994639905713115870996357773590271962850611465148375262095653467132900259943976631145459026858989791158370934193704411551219201171648805669459381311838437656206278463104903462939500294583411648241149697583260118007316994373935069662957124102732391387417549230718624545432220395527352952402459038057445028922468862853365422138157221311632881120521464898051800920247193917105553901139433166815158288436876069611025051710073927623855533862725535388309606716446623709226468096712540618695021431762116681400975952814939072226011126811531083873176173232352636058381731510345957365382235349929358228368510078108846343499835184044517042701893819942434100905753762577675711180900881641833192019626234162881665213747173254777277834887743665188287521566857195063719365653903894493664217640031215278702223664636357555035655769488865495002708539236171055021311474137441061344455441921013361729962856948991933691847294785807291560885103967819594298331864807560836795514966364489655929481878517840387733262470519450504198477420141839477312028158868457072905440575106012852580565947030468363445926525521370080687520095934536073162261187281739280746230946853678231060979215993600199462379934342106878134973469592464697525062469586169091785739765951993929939955675427146549104568607020990126068187049841780791739240719459963230602547079017745275131868099822847308607665368668555164677029113368275631072233467261137054907953658345386371962358563126183871567741187385277229225947433737856955384562468010139057278710165129666367644518724656537304024436841408144887329578473484900030194778880204603246608428753518483649591950828883232065221281041904480472479492913422849519700226013104300624107179715027934332634079959605314460532304885289729176598760166678119379323724538572096075822771784833616135826128962261181294559274627671377944875867536575448614076119311259585126557597345730153336426307679854433857617153334623252705720053039882894990342595662329757824887350292591668258944568946559926584547626945287805165017206747854178879822768065366506419109734345288783386217261562695826544782056729877564263253215942944180399432170000905426507630955884658951717091476074371368933194690909819045012903070995662266203031826493657336984195557769637876249188528656866076005660256054457113372868402055744160308370523122425872234388541231794813885500756893811249353863186352870837998456926199817945233640874295911807474534195514203517261842008455091708456823682008977394558426792142734775608796442792027083121501564063413416171664480698154837644915739001212170415478725919989438253649505147713793991472052195290793961376211072384942906163576045962312535060685376514231153496656837151166042207963944666211632551577290709784731562782775987881364919512574833287937715714590910648416426783099497236744201758622694021594079244805412553604313179926967391575424192966073123937635421392306178767539587114361040894099660894714183406983629936753626215452472984642137528910798843813060955526227208375186298370667872244301957937937860721072542772890717328548743743557819665117166183308811291202452040486822000723440350254482028342541878846536025915064452716577000445210977355858976226554849416217149895323834216001140629507184904277892585527430352213968356790180764060421383073087744601708426882722611771808426643336517800021719034492342642662922614560043373838683355553434530042648184739892156270860956506293404052649432442614456659212912256488935696550091543064261342526684725949143142393988454324863274618428466559853323122104662598901417121034460842716166190012571958707932175696985440133976220967494541854071184464339469901626983516078489245140589409463952678073545797003070511636825194877011897640028276484141605872061841852971891540196882532893091496653457535714273184820163846448324990378860690080727093276731275819665639411489617168329804551397295066876047409154204284299935410258291135022416907694316685742425225090269390348148564513030699251995904363840284292674125734224477655841778861717372654620854982944989467873509295816526320722589923687684570178230380965678831122893058091405726108658848458731016581511675333276748870148291674197015125597825727074064318086014281490241467804723275976842696339357735429301867394397163886117642090040686633988568416810038723892144831760701166845038872123643670433140911557332801829779887365909166596124020217785588548761761619893707943800566633648843650891448055710397652146960276625835990519870423001794655367885
>Units in binary.
>1024 ** 2 @k -> 1.00 Mibytes
>Units in SI (base ten) form.
>1000 ** 4 @k -> 1.00 Tbytes
>Units in mixed form.
>1024 ** 3 @k -> 1.00 Gbytes
>100MB -> 100000000
>2EB -> 2000000000000000000
>2EiB -> 2305843009213693952
>900KB @k -> 0.86 Mbytes
>300PB -> 300000000000000000
>450PiB -> 506654958079180800
>
>a = [1, 2, 3] -> [ 1, 2, 3 ]
>a[0] = 4 -> 4
>a[1] = 5 -> 5
>a -> [ 4, 5, 3 ]
>a[3] = 10 -> 10
>a -> [ 4, 5, 3, 10 ]
>a ₀ -> 4
>a ₂ -> 3
>length a -> 4
>scale a -> 4
>b = null -> <null>
>b[2] = 'abc' -> "abc"
>b -> [ <null>, <null>, "abc" ]
>b[0] = 'ABC' -> "ABC"
>b -> [ "ABC", <null>, "abc" ]
>c = null -> <null>
>c.d = true -> true
>c.f = 1.2 -> 1.2
>c.g = "Begin" -> "Begin"
>c."key" = 'end' -> "end"
>c -> { d: true, "key": "end", f: 1.2, g: "Begin" }
>length c -> 4
>scale c -> 4
>d = [1, {start: 1, end: 2}, {px: 0, py: 0}, "Area"] -> [ 1, { start: 1, end: 2 }, { px: 0, py: 0 }, "Area" ]
>d -> [ 1, { start: 1, end: 2 }, { px: 0, py: 0 }, "Area" ]
>d[0] = 2 -> 2
>d[1].start = 3 -> 3
>d[2].py = 4 -> 4
>d[3] = "Bounding " + d[3] -> "Bounding Area"
>d @j -> 
>[
>  2,
>  {
>    start: 3,
>    end: 2
>  },
>  {
>    px: 0,
>    py: 4
>  },
>  "Bounding Area"
>]
>length d -> 6
>scale d -> 4
>f = {coords: [1, 1, 4, 5], name: "box"} -> { name: "box", coords: [ 1, 1, 4, 5 ] }
>f @j -> 
>{
>  name: "box",
>  coords: [
>    1,
>    1,
>    4,
>    5
>  ]
>}
>1 == 2 ? 'impossible' : 'correct' -> "correct"
>2 ! < 2 ** 2 ? 'true' : 'not likely' -> "true"
>x = 7 -> 7
>y = 8 -> 8
>_min = min_plus_1 = x < y ? x + 1 : y + 1 -> 8
>_min -> 8
>y = x = 7 + 1 -> 8
>y -> 8
>x -> 8
>Variable 'm' cleared.
>m[0] = m[1] = m[2] = 3 -> 3
>m -> [ 3, 3, 3 ]
>Variable 'n' cleared.
>n.a = 'First' -> "First"
>n.b = 123 -> 123
>n.c = false -> false
>n -> { a: "First", b: 123, c: false }
>Variable 'a' cleared.
>a = 128 -> 128
>` a is $a, b isn't $a` -> " a is 128, b isn't 128"
>`a + 1 = ${a + 1}` -> "a + 1 = 129"
>`5! = ${5!} !!` -> "5! = 120 !!"
>`g$$` -> "g$"
>`a = ${a@x}` -> "a = 0x80"
>`a = ${a@%}` -> "a = 12800%"
>`a = ${a@k}` -> "a = 128 bytes"
>Variables 'g', 'h', 'i', and 'j' cleared.
>Precision is now 200 digits.
>g = 271 -> 271
>h = 385 -> 385
>i = 192 -> 192
>j = 120 ! -> 6689502913449127057588118054090372586752746333138029810295671352301633557244962989366874165271984981308157637893214090552534408589408121859898481114389650005964960521256960000000000000000000000000000
>g += h -> 656
>i -= g -> -464
>h *= g -> 252560
>i /= g -> -0.70731707317073170731707317073170731707317073170731707317073170731707317073170731707317073170731707317073170731707317073170731707317073170731707317073170731707317073170731707317073170731707317073170732
>j %= 10 ** 40 -> 4960521256960000000000000000000000000000
>j -> 4960521256960000000000000000000000000000
>g = 0377 @o -> 0377
>g &= 0177 @o -> 0177
>h = 0x400 @x -> 0x400
>h |= 0x080 @o -> 02200
>i = 0xaaa @x -> 0xaaa
>i ^= 0x554 @x -> 0xffe
>g @o -> 0177
>h @x -> 0x480
>i @x -> 0xffe
>g = 0x4000 @x -> 0x4000
>g >>>= 3 @x -> 0x800
>g >>= 2 @x -> 0x200
>g <<= 2 @x -> 0x800
>g @x -> 0x800
>a = {b: [1, 2, 3], c: {d: 1, f: true, g: 'abcd'}} -> { b: [ 1, 2, 3 ], c: { d: 1, f: true, g: "abcd" } }
>a -> { b: [ 1, 2, 3 ], c: { d: 1, f: true, g: "abcd" } }
>++ a.b[1] -> 3
>a.b -> [ 1, 3, 3 ]
>a.c.d ++ -> 1
>a -> { b: [ 1, 3, 3 ], c: { d: 2, f: true, g: "abcd" } }
>a.c.d ++ -> 2
>a -> { b: [ 1, 3, 3 ], c: { d: 3, f: true, g: "abcd" } }
>a.b[2] = a.b[0] + a.c.d -> 4
>a -> { b: [ 1, 3, 4 ], c: { d: 3, f: true, g: "abcd" } }
>a.c.h = a.c.g + ": " + `a.b[2] = ${a.b[2]}` -> "abcd: a.b[2] = 4"
>a @j -> 
>{
>  b: [
>    1,
>    3,
>    4
>  ],
>  c: {
>    d: 3,
>    f: true,
>    g: "abcd",
>    h: "abcd: a.b[2] = 4"
>  }
>}
>length a -> 7
>scale a.b -> 3
>str = 'abcdefg' -> "abcdefg"
>str[1] = 'z' -> "z"
>str[2] = 'y' -> "y"
>str[3] = 'xw' -> "xw"
>str[8] = 'new' -> "new"
>str -> "azyxwfg new"
>b = [[[1, 2], [3, 4], [5, 6]]] -> [ [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ] ] ]
>b[0][0][1] = 11 -> 11
>b[1] = [[7, 9], [0, 1], [3, 4]] -> [ [ 7, 9 ], [ 0, 1 ], [ 3, 4 ] ]
>b @j -> 
>[
>  [
>    [
>      1,
>      11
>    ],
>    [
>      3,
>      4
>    ],
>    [
>      5,
>      6
>    ]
>  ],
>  [
>    [
>      7,
>      9
>    ],
>    [
>      0,
>      1
>    ],
>    [
>      3,
>      4
>    ]
>  ]
>]
>length b -> 12
>scale b -> 2
>length b[1] -> 6
>Precision is now 34 digits.
>p = {b: 2, c: {d: true}, "e": e} -> { b: 2, c: { d: true }, "e": 2.71828182845904523536028747135266249 }
>p @j -> 
>{
>  b: 2,
>  c: {
>    d: true
>  },
>  "e": 2.71828182845904523536028747135266249
>}
>length p -> 3
>scale p -> 3
>Elements of p:
>"name: b, value: 2"
>"name: c, value: { d: true }"
>"name: \"e\", value: 2.71828182845904523536028747135266249"
>chars 'abc' -> [ 97, 98, 99 ]
>chars 123 -> [ 49, 50, 51 ]
>$_ -> 49
>$_ -> 50
>$_ -> 51
>$_ -> 8539
>$_ -> 51
>$_ -> 52
>Calculation mode set to RATIONAL.
>4 / 5 < 7 / 9 -> false
>1 / 3 * 4 / 5 @F -> 4/15
>(7 / 11) / (9 / 5) -> 35/99
>"5 3/8" * "4 1/4" @F -> 22 27/32
>(4 / 6) ⁹ -> 512/19683
>bn 0 -> 1/1
>bn 1 -> 1/2
>bn -1 -> -1/2
>bn 2 -> 1/6
>bn 20 -> -174611/330
>bn 126 -> 5556330281949274850616324408918951380525567307126747246796782304333594286400508981287241419934529638692081513802696639/4357878
>Calculation mode set to DECIMAL.
>Variable 'a' cleared.
>Defining function 'a' = {loop $i in 10 {$i}}
>a -> 10
>eval a -> 10
>r = R'MCMLXII' -> 1962
>s = r'ⅿⅽⅿⅼⅹⅶ' -> 1967
>1962 @R -> R'MCMLXII'
>roman 'xx' + 'ii' -> 22
>t'27h' + t'13m' + t'27.9s' @h -> h'27:13:27.9'
>h'12:30 pm' - h'11:45 am' @mt -> t'45m'
>h'8:30 am' + t'1h' + t'37m' @h -> h'10:07'
>t'3.0002s' @5mt -> t'0.05000333333333333333333333333333333m'
>h'12:10am' - t'20m' @ah -> h'-0:10'
>d'990101' - d'980101' -> 365
>d'21/5/16' - d'99/12/31' -> 7807
>d'1941/12/7' + 1000 @e -> d'1944-09-02'
>d'-01000101' -> -756052
>-756052 @e -> d'-0100-01-01'
>d'990101' -> 10592
>10592 @e -> d'1999-01-01'
>d'000101' @e -> d'2000-01-01'
>d'500101' @e -> d'1950-01-01'
>d'49/01/01' @e -> d'2049-01-01'
>d'-9999/01/01' @e -> d'-9999-01-01'
>D'01-01--9999' @E -> D'01/01/-9999'
>d'9999/12/31' @e -> d'9999-12-31'
>_911 = D'9/11/01' -> 11576
>_911 @e -> d'2001-09-11'
>_911 @E -> D'09/11/2001'
>D'1/1/1999' @e -> d'1999-01-01'
>_waterloo = d'1815/6/18' -> -56445
>_waterloo @e -> d'1815-06-18'
>_waterloo @E -> D'06/18/1815'
>pi ** 20 @,d -> 8,769,956,796.082699474752255593703897
>pi @,d -> 3.14159265358979323846264338327950288
>200 ! @,d -> 788,657,867,364,790,503,552,363,213,932,185,062,295,135,977,687,173,263,294,742,533,244,359,449,963,403,342,920,304,284,011,984,623,904,177,212,138,919,638,830,257,642,790,242,637,105,061,926,624,952,829,931,113,462,857,270,763,317,237,396,988,943,922,445,621,451,664,240,254,033,291,864,131,227,428,294,853,277,524,242,407,573,903,240,321,257,405,579,568,660,226,031,904,170,324,062,351,700,858,796,178,922,222,789,623,703,897,374,720,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
>10e-9 @,d -> 0.000000010
>nanosperday = 24 * 60 * 60 * 1e9 @,d -> 86,400,000,000,000
>Separator display set to true.
>nanosperday -> 86,400,000,000,000
>Variable 'm' cleared.
>n = [1e10, 2 << 15, 42 !] -> [ 10,000,000,000, 65,536, 1,405,006,117,752,879,898,543,142,606,244,511,569,936,384,000,000,000 ]
>m = {p: 15 !, q: 3 ** 12, r: pi ** 15, s: n} -> { p: 1,307,674,368,000, q: 531,441, r: 28,658,145.96938799845337882197166054, s: [ 10,000,000,000, 65,536, 1,405,006,117,752,879,898,543,142,606,244,511,569,936,384,000,000,000 ] }
>`1^10 = ${1e10}` -> "1^10 = 10,000,000,000"
>Separator display set to false.
>➖ 2 -> -2
>t = 10 -> 10
>➖➖ t -> 9
>➕ 3 -> 3
>➕➕ t -> 10
>t ➖➖ -> 10
>t ➕➕ -> 9
>t ➖ 3 -> 7
>t ➕ 3 -> 13
>t ➗ 4 -> 2.5
>t ✖ 5 -> 50
>t ✕ 3 -> 30
>t ∗ 2 -> 20
>t ÷ 3 -> 3.333333333333333333333333333333333
>t ∕ 4 -> 2.5
>
>End of expression tests (suite 1).
>Tests of nested object / array variables.
>
>Variable 'a' cleared.
>a = {b: {c: 4}, "b": {c: [1, 8, 9], "c": {d: 5}}} -> { b: { c: 4 }, "b": { "c": { d: 5 }, c: [ 1, 8, 9 ] } }
>a -> { b: { c: 4 }, "b": { "c": { d: 5 }, c: [ 1, 8, 9 ] } }
>a.b.c = 5 -> 5
>a -> { b: { c: 5 }, "b": { "c": { d: 5 }, c: [ 1, 8, 9 ] } }
>a."b".c[0] = 7 -> 7
>a -> { b: { c: 5 }, "b": { "c": { d: 5 }, c: [ 7, 8, 9 ] } }
>a."b"."c".d = 6 -> 6
>a @j -> 
>{
>  b: {
>    c: 5
>  },
>  "b": {
>    "c": {
>      d: 6
>    },
>    c: [
>      7,
>      8,
>      9
>    ]
>  }
>}
>a."b"."c".d ++ -> 6
>a."b"."c" @j -> 
>{
>  d: 7
>}
>Variable 'a' cleared.
>a.b.d.f = 3 -> 3
>a @j -> 
>{
>  b: {
>    d: {
>      f: 3
>    }
>  }
>}
>Variables 'a' and 'f' cleared.
>a[0].b.c[1] = 12 -> 12
>a -> [ { b: { c: [ <null>, 12 ] } } ]
>d[1]."e"."f".g[3] = 14 -> 14
>d -> [ 2, { start: 3, end: 2, "e": { "f": { g: [ <null>, <null>, <null>, 14 ] } } }, { px: 0, py: 4 }, "Bounding Area" ]
>f[0][1] = 27 -> 27
>f -> [ [ <null>, 27 ] ]
>Variable 'a' cleared.
>a = {"b": {c: [1, 8, 9], "c": {d: 5}}} -> { "b": { "c": { d: 5 }, c: [ 1, 8, 9 ] } }
>a -> { "b": { "c": { d: 5 }, c: [ 1, 8, 9 ] } }
>a."b"."c".d = 6 -> 6
>a -> { "b": { "c": { d: 6 }, c: [ 1, 8, 9 ] } }
>a."b"."c".f = 3 -> 3
>a -> { "b": { "c": { d: 6, f: 3 }, c: [ 1, 8, 9 ] } }
>a."b"."d".i = true -> true
>a @j -> 
>{
>  "b": {
>    "d": {
>      i: true
>    },
>    "c": {
>      d: 6,
>      f: 3
>    },
>    c: [
>      1,
>      8,
>      9
>    ]
>  }
>}
>Variable 'a' cleared.
>a.b.c.d = 6 -> 6
>a -> { b: { c: { d: 6 } } }
>a.b.c.f = 3 -> 3
>a -> { b: { c: { d: 6, f: 3 } } }
>a.b.d.i = true -> true
>a @j -> 
>{
>  b: {
>    c: {
>      d: 6,
>      f: 3
>    },
>    d: {
>      i: true
>    }
>  }
>}
>Variable 'a' cleared.
>a."b"."c".d = 6 -> 6
>a -> { "b": { "c": { d: 6 } } }
>a."b"."c".f = 3 -> 3
>a -> { "b": { "c": { d: 6, f: 3 } } }
>a."b"."d".i = true -> true
>a @j -> 
>{
>  "b": {
>    "d": {
>      i: true
>    },
>    "c": {
>      d: 6,
>      f: 3
>    }
>  }
>}
>++ a['"b"']['"c"']['f'] -> 4
>a -> { "b": { "d": { i: true }, "c": { d: 6, f: 4 } } }
>Variable 'a' cleared.
>a = {b: true, c: {d: '123', f: 'fghi', g: {r: 4, s: 5}}} -> { b: true, c: { d: "123", f: "fghi", g: { r: 4, s: 5 } } }
>a.b -> true
>a.c.d -> "123"
>a.c -> { d: "123", f: "fghi", g: { r: 4, s: 5 } }
>a.c.g -> { r: 4, s: 5 }
>a.c.g.r -> 4
>++ a.c.g.r -> 5
>a -> { b: true, c: { d: "123", f: "fghi", g: { r: 5, s: 5 } } }
>++ a.c.g.r -> 6
>a.c.g."e" = 'E' -> "E"
>a -> { b: true, c: { d: "123", f: "fghi", g: { r: 6, s: 5, "e": "E" } } }
>a.c.g."e" -> "E"
>a.c.g."f" = {"g": 23, "h": {"i": 27}} -> { "h": { "i": 27 }, "g": 23 }
>a -> { b: true, c: { d: "123", f: "fghi", g: { r: 6, s: 5, "f": { "h": { "i": 27 }, "g": 23 }, "e": "E" } } }
>a.c.g."f"."h" -> { "i": 27 }
>a['c'].g."f"['"h"']."i" ++ -> 27
>a -> { b: true, c: { d: "123", f: "fghi", g: { r: 6, s: 5, "f": { "h": { "i": 28 }, "g": 23 }, "e": "E" } } }
>a.c.g."f".'h' -> <null>
>a.c.g."f"."h".j = 15 -> 15
>a -> { b: true, c: { d: "123", f: "fghi", g: { r: 6, s: 5, "f": { "h": { j: 15, "i": 28 }, "g": 23 }, "e": "E" } } }
>a.c.g."f"."h".j ++ -> 15
>a -> { b: true, c: { d: "123", f: "fghi", g: { r: 6, s: 5, "f": { "h": { j: 16, "i": 28 }, "g": 23 }, "e": "E" } } }
>
>End of nested object / array tests.
>Tests of :include directive.
>
>This is the main file.
>This is the first level of include file.
>Lowest level of :include.
>msg = "This is a test of the :include directive." -> "This is a test of the :include directive."
>Leaving lowest level :include.
>Chained / nested file.
>poem = ["Twas the night before Christmas", "and all through the house", "not a creature was stirring", "not even a mouse."] -> [ "Twas the night before Christmas", "and all through the house", "not a creature was stirring", "not even a mouse." ]
>I'm out of here.
>Back to first level include.
>Back to main file.
>msg -> "This is a test of the :include directive."
>poem @j -> 
>[
>  "Twas the night before Christmas",
>  "and all through the house",
>  "not a creature was stirring",
>  "not even a mouse."
>]
>
>Done with :include tests.
