>Starting expression tests (suite 1).
>
>info.version.major > 2 ||
> (info.version.major == 2 && info.version.minor > 4) ||
> (info.version.major == 2 && info.version.minor == 4 && info.version.patch >= 11) -> true
>Precision is now “50” digits.
>52 + 27 -> 79
>3.4 + 5 -> 8.4
>34 + 5 @x -> 0x27
>pi -> 3.1415926535897932384626433832795028841971693993751
>phi -> 1.6180339887498948482045868343656381177203091798058
>Φ -> 0.61803398874989484820458683436563811772030917980575
>1 / phi == PHI -> true
>1 / PHI == phi -> true
>PHI + 1 == phi -> true
>Calculation mode set to “RATIONAL”.
>phi -> 8670007398507948658051921 / 5358359254990966640871840
>PHI -> 5358359254990966640871840 / 8670007398507948658051921
>phi @d -> 1.6180339887498948482045868343656381177203091798058
>Calculation mode set to “DECIMAL(50)”.
>Precision is now “989” digits.
>Calculation mode set to “RATIONAL”.
>pf = phi -> 210988832765573779325625915680546502772484651687106555737832132889103082618489129155080383099076483422310421332177983161874081697609501847474948035271137411526859527009103422459109650969971779745096472068792686385976903228591490372629528329132078950851587533149191176155311271345410841902715487191470487782212217418079040055146140207403816197205047731557480853814372485769125143341894511386704488669521736853408101932147154592107461579260607339268330156833890346191364557858737266504607944318178 / 130398269895792070664451441526385441050109935536652417548438071036585896087864364258646793527178224274875670449794724513016075111561018873533334508781236137029391374811380267008214713270768880613991170955762682690218240674444219273539682820267527307996833002887275552461407535035612295863231381560421853101765103115160997141756190891736932037822635689669803363506210751516064769048020344382561875713108978238852163975577197383755838380136675203719193905307810745899410801315664216249335242788313
>Calculation mode set to “DECIMAL(989)”.
>pd = phi -> 1.6180339887498948482045868343656381177203091798057628621354486227052604628189024497072072041893911374847540880753868917521266338622235369317931800607667263544333890865959395829056383226613199282902678806752087668925017116962070322210432162695486262963136144381497587012203408058879544547492461856953648644492410443207713449470495658467885098743394422125448770664780915884607499887124007652170575179788341662562494075890697040002812104276217711177780531531714101170466659914669798731761356006708748071013179523689427521948435305678300228785699782977834784587822891109762500302696156170025046433824377648610283831268330372429267526311653392473167111211588186385133162038400522216579128667529465490681131715993432359734949850904094762132229810172610705961164562990981629055520852479035240602017279974717534277759277862561943208275051312181562855122248093947123414517022373580577278616008688382952304592647878017889921990270776903895321968198615143780314997411069260886742962267575605231727776
>pd - ~~ pf
>Precision is now “50” digits.
>Precision is now “one” digit.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 3 / 1
>Calculation mode set to “DECIMAL(1)”.
>~~ ratpi == pi -> true
>Precision is now “2” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 22 / 7
>Calculation mode set to “DECIMAL(2)”.
>~~ ratpi == pi -> true
>Precision is now “3” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 333 / 106
>Calculation mode set to “DECIMAL(3)”.
>~~ ratpi == pi -> true
>Precision is now “4” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 355 / 113
>Calculation mode set to “DECIMAL(4)”.
>~~ ratpi == pi -> true
>Precision is now “5” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 103993 / 33102
>Calculation mode set to “DECIMAL(5)”.
>~~ ratpi == pi -> true
>Precision is now “6” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 104348 / 33215
>Calculation mode set to “DECIMAL(6)”.
>~~ ratpi == pi -> true
>Precision is now “7” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 208341 / 66317
>Calculation mode set to “DECIMAL(7)”.
>~~ ratpi == pi -> true
>Precision is now “8” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 312689 / 99532
>Calculation mode set to “DECIMAL(8)”.
>~~ ratpi == pi -> true
>Precision is now “9” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 833719 / 265381
>Calculation mode set to “DECIMAL(9)”.
>~~ ratpi == pi -> true
>Precision is now “10” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 1146408 / 364913
>Calculation mode set to “DECIMAL(10)”.
>~~ ratpi == pi -> true
>Precision is now “11” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 4272943 / 1360120
>Calculation mode set to “DECIMAL(11)”.
>~~ ratpi == pi -> true
>Precision is now “12” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 5419351 / 1725033
>Calculation mode set to “DECIMAL(12)”.
>~~ ratpi == pi -> true
>Precision is now “13” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 80143857 / 25510582
>Calculation mode set to “DECIMAL(13)”.
>~~ ratpi == pi -> true
>Precision is now “14” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 165707065 / 52746197
>Calculation mode set to “DECIMAL(14)”.
>~~ ratpi == pi -> true
>Precision is now “15” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 245850922 / 78256779
>Calculation mode set to “DECIMAL(15)”.
>~~ ratpi == pi -> true
>Precision is now “16” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 411557987 / 131002976
>Calculation mode set to “DECIMAL(16)”.
>~~ ratpi == pi -> true
>Precision is now “17” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 1068966896 / 340262731
>Calculation mode set to “DECIMAL(17)”.
>~~ ratpi == pi -> true
>Precision is now “18” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 2549491779 / 811528438
>Calculation mode set to “DECIMAL(18)”.
>~~ ratpi == pi -> true
>Precision is now “19” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 6167950454 / 1963319607
>Calculation mode set to “DECIMAL(19)”.
>~~ ratpi == pi -> true
>Precision is now “20” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 14885392687 / 4738167652
>Calculation mode set to “DECIMAL(20)”.
>~~ ratpi == pi -> true
>Precision is now “21” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 21053343141 / 6701487259
>Calculation mode set to “DECIMAL(21)”.
>~~ ratpi == pi -> true
>Precision is now “22” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 1783366216531 / 567663097408
>Calculation mode set to “DECIMAL(22)”.
>~~ ratpi == pi -> true
>Precision is now “23” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 3587785776203 / 1142027682075
>Calculation mode set to “DECIMAL(23)”.
>~~ ratpi == pi -> true
>Precision is now “24” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 5371151992734 / 1709690779483
>Calculation mode set to “DECIMAL(24)”.
>~~ ratpi == pi -> true
>Precision is now “25” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 8958937768937 / 2851718461558
>Calculation mode set to “DECIMAL(25)”.
>~~ ratpi == pi -> true
>Precision is now “26” digits.
>Calculation mode set to “RATIONAL”.
>ratpi = pi -> 139755218526789 / 44485467702853
>Calculation mode set to “DECIMAL(26)”.
>~~ ratpi == pi -> true
>Precision is now “50” digits.
>sin (pi / 3) -> 0.86602540378443864676372317075293618347140262690517
>4 & 7 -> 4
>true && false -> false
>(1 + 2) * (3 + 4) -> 21
>Precision is now “16” digits.
>atan2 (4, 5) -> 0.6747409422235527
>14 / 7 -> 2
>12 / 4 -> 3
>13 / 9 -> 1.444444444444444
>a = 1 -> 1
>b = 2 -> 2
>a + b -> 3
>a <=> b -> -1
>a <= b -> true
>b < a -> false
>1 > 2 -> false
>2 >= 1 -> true
>Precision is now “34” digits.
>1.2 + 3.4 -> 4.6
>1 / 7 -> 0.1428571428571428571428571428571429
>settings.precision -> 34
>Precision is now “18” digits.
>settings.precision -> 18
>e -> 2.71828182845904524
>a -> 1
>Variables 'a' and 'b' cleared.
>a -> <null>
>a = b = c = 27 -> 27
>a + b -> 54
>b + c -> 54
>e -> 2.71828182845904524
>name = 'Roger' -> "Roger"
>"This isn't a number" -> "This isn't a number"
>'This ' + "isn't" + " a number" -> "This isn't a number"
>'This isn\'t either, ' + name -> "This isn't either, Roger"
>'\u0000\u0001\u0002\u0003\u0004\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f\u0020\u0021' -> "\0\cA\cB\cC\cD\cX\cY\cZ\u001b\u001c\u001d\u001e\u001f !"
>'\0\ca\cB\cy\cZ\f\t\b\r\n\\\u007f\u0080\u0081' -> "\0\cA\cB\cY\cZ\f\t\b\r\n\\\u007f\u0080\u0081"
>raw = s"abc
>	def
>		ghi
>" -> "abc\n\tdef\n\t\tghi\n"
>codes (raw) -> [ 97, 98, 99, 10, 9, 100, 101, 102, 10, 9, 9, 103, 104, 105, 10 ]
>Precision is now “60” digits.
>s = sqrt (17) -> 4.12310562561766054982140985597407702514719922537362043439864
>t = s * s -> 17.0000000000000000000000000000000000000000000000000000000001
>t = 17 ** 0.5 -> 4.12310562561766058564671766362152993679046630859375
>t * t -> 17.0000000000000002954230563223910221532761907018178681606627
>u = 12 ! -> 479001600
>v = cbrt (u) -> 782.430289767919172129487594284066592725746299239673099133301
>v * v * v - u -> 0
>u ** (1 / 3) -> 782.4302897679189072732697241008281707763671875
>t ⁸ -> 83521.0000000000058056539028476285186906560463719062610295841
>3 ⁶ -> 729
>_This_is_a_very_long_variable_name_Which_not_surprisingly_is_not_worth_remembering_1_ = sqrt 42 -> 6.48074069840786023096596743608799665770520430705834654971136
>++ _This_is_a_very_long_variable_name_Which_not_surprisingly_is_not_worth_remembering_1_ -> 7.48074069840786023096596743608799665770520430705834654971136
>Variable '_This_is_a_very_long_variable_name_Which_not_surprisingly_is_not_worth_remembering_1_' cleared.
>_This_is_a_very_long_variable_name_Which_not_surprisingly_is_not_worth_remembering_1_ -> <null>
>72 ! -> 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000
>-5 ! -> 0.0416666666666666666666666666666666666666666666666666666666667
>-8 ! -> -0.000198412698412698412698412698412698412698412698412698412698413
>1 / 7 ! -> 0.000198412698412698412698412698412698412698412698412698412698413
>fib 27 -> 196418
>fib 0 -> 0
>fib 1 -> 1
>fib 2 -> 1
>fib 3 -> 2
>fib 5 -> 5
>fib -1 -> 1
>fib -2 -> -1
>fib -6 -> -8
>fib 200 -> 280571172992510140037611932413038677189525
>oldPrec = settings.precision -> 60
>Precision is now “100” digits.
>settings.precision = 100 -> 100
>sum = 0 -> 0
>sum -> 734544867157818093234335754266435479339250
>Precision is now “60” digits.
>J = 1 -> 1
>++ J -> 2
>J -> 2
>K = 2 -> 2
>K ++ -> 2
>K -> 3
>Precision is now “16” digits.
>pi / 2 -> 1.570796326794896
>asin (sin (pi / 2)) -> 1.570796326794897
>pi / 4 -> 0.7853981633974482
>acos (cos (pi / 4)) -> 0.7853981633974483
>pi / 3 -> 1.047197551196598
>atan (tan (pi / 3)) -> 1.047197551196598
>b = -27 -> -27
>c = 0 -> 0
>d = 153 -> 153
>signum b -> -1
>signum c -> 0
>signum d -> 1
>length b -> 2
>length c -> 1
>length d -> 3
>scale b -> 0
>scale c -> 0
>scale d -> 0
>h = 23 -> 23
>h2 = ln (h) -> 3.1354942159291497
>e ** h2 -> 23
>epow (h2) -> 22.99999999999999
>m = 10000 -> 10000
>n = log (m) -> 4
>10 ** n -> 10000
>tenpow (n) -> 10000
>p = ln2 (1000000) -> 19.93156856932417
>2 ** p -> 999999.9999999974
>isprime 15485863 -> true
>isnull junk -> true
>notnull junk -> false
>notnull h2 -> true
>j2 = nil -> <null>
>isnull j2 -> true
>notnull j2 -> false
>notnull n -> true
>j3 = ␀ -> <null>
>isnull j3 -> true
>notnull j3 -> false
>NotNull p -> true
>upper typeof p -> "FLOAT"
>g1 = 'A strong message' -> "A strong message"
>upper g1 -> "A STRONG MESSAGE"
>lower g1 -> "a strong message"
>g2 = ['abc', 'Def', "gHI"] -> [ "abc", "Def", "gHI" ]
>upper (g2) -> [ "ABC", "DEF", "GHI" ]
>lower g2 -> [ "abc", "def", "ghi" ]
>g3 = {b: 'This', c: 'is', d: 'crazy'} -> { b: "This", c: "is", d: "crazy" }
>upper (g3) -> { B: "THIS", C: "IS", D: "CRAZY" }
>lower (g3) -> { b: "this", c: "is", d: "crazy" }
>Ignoring case is now “true”.
>upper g3 -> { b: "THIS", c: "IS", d: "CRAZY" }
>lower g3 -> { b: "this", c: "is", d: "crazy" }
>Ignoring case is now “false”.
>g4 = {b: "abc", c: ["an", "Upper", "way"], d: {c: "over", f: "One"}} -> { b: "abc", c: [ "an", "Upper", "way" ], d: { c: "over", f: "One" } }
>upper g4 -> { B: "ABC", C: [ "AN", "UPPER", "WAY" ], D: { C: "OVER", F: "ONE" } }
>Ignoring case is now “true”.
>upper g4 -> { b: "ABC", c: [ "AN", "UPPER", "WAY" ], d: { c: "OVER", f: "ONE" } }
>Ignoring case is now “false”.
>Variable 'j7' cleared.
>j7["help"] = 42 -> 42
>j7 -> { help: 42 }
>typeof "abc" -> "string"
>typeof null -> "null"
>typeof PHI -> "float"
>typeof (1.2) -> "float"
>Calculation mode set to “RATIONAL”.
>typeof (½) -> "fraction"
>Calculation mode set to “DECIMAL(16)”.
>typeof (tenpow (5)) -> "integer"
>typeof (false) -> "boolean"
>typeof (info) -> "object"
>typeof info.version -> "object"
>typeof info.version.major -> "integer"
>typeof (info.version.prerelease) -> "string"
>typeof (info.locale.weekdays) -> "array"
>typeof (info.timezone) -> "object"
>typeof (info.cpu.maxmemory) -> "integer"
>typeof (D'9/11/2001') -> "integer"
>typeof (now) -> "integer"
>Defining function “junk_func” = { 'junk' }
>typeof (junk_func) -> "function"
>typeof (junk_func()) -> "string"
>cast (null) -> ""
>cast (1, 'string') -> "1"
>cast ("23", 'float') -> 23
>cast ("true", 'boolean') -> true
>cast (10 ** n) -> "10000"
>cast (1, 'array') -> [ 1 ]
>cast ("abc", 'object') -> { _: "abc" }
>cast (3, 'null') -> <null>
>cast ([1, 2, 3], 'array') -> [ 1, 2, 3 ]
>cast ({a: '123'}, 'object') -> { a: "123" }
>cast (null, 'object') -> { _: <null> }
>Variable 'junk' cleared.
>junk = [1, 2, 3] -> [ 1, 2, 3 ]
>Defining function “_junk5b05d” = junk[0]
>cast (junk[0], 'function') -> 1
>typeof (_junk5b05d) -> "function"
>Variables
>---------
>define _junk5b05d -> junk[0]
>=========
>settings.trigMode -> "RADIANS"
>Trig mode is now “DEGREES”.
>settings.trigMode -> "DEGREES"
>sin (45) -> 0.7071067811865477
>cos (60) -> 0.4999999999999998
>asin (sin (50)) -> 50.00000000000001
>acos (cos (30)) -> 29.99999999999999
>atan (tan (15)) -> 15
>Trig mode is now “RADIANS”.
>settings.trigMode -> "RADIANS"
>Precision is now “60” digits.
>π -> 3.14159265358979323846264338327950288419716939937510582097494
>a = sin (π / 4) -> 0.707106781186547524400844362104849039284835937688474036588339
>b = a * 2 -> 1.41421356237309504880168872420969807856967187537694807317668
>c = b * b -> 2
>round c, 14 -> 2.00000000000000
>round (a, 10) -> 0.7071067812
>round a, -2 -> 0.7
>round c, 0 -> 2
>Trig mode is now “GRADS”.
>settings.trigMode -> "GRADS"
>cos (100) -> 0.00000000000000000000000000000000000000000000000000000000000229615390820314310449931401741267105853399107404325664115332
>sin (300) -> -1
>asin (0.5) -> 33.33333333333334
>Trig mode is now “RADIANS”.
>v = 1621.9 -> 1621.9
>"round to -10 -> 2000"
>"round to -9 -> 2000"
>"round to -8 -> 2000"
>"round to -7 -> 2000"
>"round to -6 -> 2000"
>"round to -5 -> 2000"
>"round to -4 -> 2000"
>"round to -3 -> 2000"
>"round to -2 -> 1600"
>"round to -1 -> 1620"
>"round to 0 -> 1622"
>"round to 1 -> 1621.9"
>"round to 2 -> 1621.90"
>"round to 3 -> 1621.900"
>"round to 4 -> 1621.9000"
>"round to 5 -> 1621.90000"
>"round to 6 -> 1621.900000"
>"round to 7 -> 1621.9000000"
>"round to 8 -> 1621.90000000"
>"round to 9 -> 1621.900000000"
>"round to 10 -> 1621.9000000000"
>0.807112688193938626506980269804138186976716402625905272604202
>0.146125375844915897091256456390605289275741273852277622601134
>0.121233629755509821753524549243641799949944640120809602541073
>0.312734100721662271432329403525225140931966784542657791589245
>0.123025978094084932419132253024501407625416886368087240297066
>0.167971509484770493188739843474492225541430564709871415619608
>0.474415660680311658353919290609519129530811547690210458318136
>0.137904297845479737566626159584977182938940712885783727088935
>0.423858515789729826604267218684702170415574987769621682557369
>0.575851246403091056753615403699435087250291577127496614651959
>0.441874672402479503855388531545710637804394032418924376423813
>0.222064219407676975268797801275635795847323109658855603566880
>0.177318447363754731317821963671497364995577429331526929058340
>0.519196593118671334002671099784166718177006807930157556933825
>0.141046135842362869295650217329558572267881795069642738055100
>0.837752323083803329731491053858741798128523500101892597985186
>0.224734122899278960462605244250585564847903381975932956743684
>0.213750771682778510633738793431174726643145928799357878116753
>0.178432785983702178157032192745345110018831635280611659275829
>0.468904699739054572490660950847904640466706506904160539121211
>0.169854855611463218336375253244232661571921810613626973280970
>sin (2700) -> -0.980287334634811667478146359133904571815486693671784054587473
>sin -(4 * pi) -> -0.000000000000000000000000000000000000000000000000000000000024
>min 1, -1, 27, -300, 18.5, -300.5 -> -300.5
>max 'abc', 'ghi', "ABC", "012" -> "ghi"
>min (-27) -> -27
>max (2.4) -> 2.4
>min (-3, -5) -> -5
>max (1, 3, 5, 2, 8, 9, 11, 4, 6) -> 11
>gcd (25, 10) -> 5
>gcd (27 * 2, 3 * 9 * 18) -> 54
>lcm (6, 10) -> 30
>lcm -20, 30 -> -60
>max ('123', 456, 789) -> "789"
>min (123, '-1', '14') -> -1
>ty = 47 -> 47
>ty \ 13 -> 3
>ty \= 6 -> 7
>10 \ 3 -> 3
>5 \ 6 -> 0
>21 % 4 -> 1
>21 mod 4 -> 1
>-21 % 4 -> -1
>-21 mod 4 -> 3
>-21 % -4 -> -1
>-21 mod -4 -> -1
>21 % -4 -> 1
>21 mod -4 -> -3
>Calculation mode set to “RATIONAL”.
>g1 = 2 / 3 -> 2 / 3
>g2 = 9 / 7 -> 9 / 7
>g1 % g2 -> 14 / 27
>g1 mod g2 -> 2 / 3
>-g1 % g2 -> -14 / 27
>-g1 mod g2 -> 13 / 21
>g1 % -g2 -> -14 / 27
>g1 mod -g2 -> -13 / 21
>-g1 % -g2 -> 14 / 27
>-g1 mod -g2 -> -2 / 3
>Calculation mode set to “DECIMAL(60)”.
>127 | 128 -> 255
>15 & 7 -> 7
>31 ^ 10 -> 21
>0b0011 ~& 0b0101 @b -> 0b11111110
>0b0011 ~| 0b0101 @b -> 0b11111000
>0b0011 ^ 0b0101 @b -> 0b110
>~ 0b0110 @b -> 0b11111001
>0b0011 ~^ 0b0101 @b -> 0b11111001
>0x3FF &~ 0xFF0 @X -> 0XF
>'abc' != "ABC" && 0 <> 1 -> true
>false ^^ false -> false
>false ^^ true -> true
>true ^^ false -> true
>true ^^ true -> false
>A = 1 -> 1
>B = 2 -> 2
>A == 1 || A == 2 && B == 1 -> true
>A == 1 && A == 2 || B == 1 -> false
>0xFFFF ^ 0xAAAA @X -> 0X5555
>012 -> 10
>10 @o -> 012
>0b1010101010 @x -> 0x2aa
>0x2aa @b -> 0b1010101010
>~ 0x7FFF @X -> 0X8000
>~ 0x7FFF @o -> 0200000
>~ 0x7FFF @b -> 0b1000000000000000
>255 @o -> 0377
>123 @b -> 0b1111011
>Quoting result strings is now “false”.
>f1 = `${'def' @o}` -> '\o144\o145\o146'
>f2 = `${'abc' @b}` -> '\B01100001\B01100010\B01100011'
>f3 = `${'Hello' @X}` -> '\u0048\u0065\u006C\u006C\u006F'
>Quoting result strings is now “true”.
>eval f1 -> "def"
>eval f2 -> "abc"
>eval f3 -> "Hello"
>eval ('def fu1(n) = n') -> "Defined function “fu1(n)”"
>eval ('const co1 = 2') -> "Defined constant “co1”"
>eval ('var va1 = 3') -> "Defined variable “va1”"
>t1 = 5.9 -> 5.9
>t2 = -6.2 -> -6.2
>ceil (t1) -> 6
>ceil (t2) -> -6
>ceil (0) -> 0
>ceil (10e22) -> 100000000000000000000000
>floor (t1) -> 5
>floor (t2) -> -7
>floor (0) -> 0
>floor (1.2e9) -> 1200000000
>Variables 'this', 'hello', 'handsome', and 'rude' cleared.
>this = join ('This', 'is', 'a', 'test', ' ') -> "This is a test"
>hello = join ('Hello', "World!", ', ') -> "Hello, World!"
>handsome = join ("Hello ", "handsome.") -> "Hello handsome."
>rude = join "RUDE!" -> "RUDE!"
>length this -> 14
>length hello -> 13
>length handsome -> 15
>length rude -> 5
>'[' + join (1, 2, 3, 4, 5, ', ') + ']' -> "[1, 2, 3, 4, 5]"
>target = 'this is the day' -> "this is the day"
>split target, ' ' -> [ "this", "is", "the", "day" ]
>split (target, ' ', 2) -> [ "this", "is the day" ]
>target = 'boo:and:foo' -> "boo:and:foo"
>split target, ':', 2 -> [ "boo", "and:foo" ]
>split (target, ':', 5) -> [ "boo", "and", "foo" ]
>split (target, ':', -2) -> [ "boo", "and", "foo" ]
>split (target, 'o', 5) -> [ "b", "", ":and:f", "", "" ]
>split (target, 'o', -2) -> [ "b", "", ":and:f", "", "" ]
>split target, 'o' -> [ "b", "", ":and:f" ]
>split 1.2, '\\.' -> [ "1", "2" ]
>c9 = " a   b d   c   e   f " -> " a   b d   c   e   f "
>pieces = [ "a", "b", "d", "c", "e", "f" ]
>Variables 'target', 'one', 'two', and 'three' cleared.
>target = 'This is an "index" test.' -> "This is an \"index\" test."
>one = index target, 'is' -> 2
>two = index target, 'is', one + 1 -> 5
>three = index target, 'test', -1 -> -5
>index (target, 'junk') -> <null>
>index (target, 'more junk', -1) -> <null>
>index 1.2, '2' -> 2
>st2 = 'abcdefg' -> "abcdefg"
>index (st2, st2[j], -1) + length (st2) == j -> true
>index (st2, st2[j], -1) + length (st2) == j -> true
>index (st2, st2[j], -1) + length (st2) == j -> true
>index (st2, st2[j], -1) + length (st2) == j -> true
>index (st2, st2[j], -1) + length (st2) == j -> true
>index (st2, st2[j], -1) + length (st2) == j -> true
>index (st2, st2[j], -1) + length (st2) == j -> true
>ar2 = [1, 2, 3, 4] -> [ 1, 2, 3, 4 ]
>index (ar2, ar2[j], -1) + length (ar2) == j -> true
>index (ar2, ar2[j], -1) + length (ar2) == j -> true
>index (ar2, ar2[j], -1) + length (ar2) == j -> true
>index (ar2, ar2[j], -1) + length (ar2) == j -> true
>ob2 = {o1: 2, o2: 'off', o3: false} -> { o1: 2, o2: "off", o3: false }
>index (ob2, j, -1) + length (ob2) -> 0
>index (ob2, j, -1) + length (ob2) -> 1
>index (ob2, j, -1) + length (ob2) -> 2
>ob2['o2'] -> "off"
>ob2[2] -> false
>length (ob2) -> 3
>ob2[__] -> 2
>ob2[__] -> "off"
>ob2[__] -> false
>ob2[j] -> 2
>ob2[j] -> "off"
>ob2[j] -> false
>index (ob2, key) -> 0
>index (ob2, key) -> 1
>index (ob2, key) -> 2
>t8 = [2, 3, 5, 7, 11, 13, 17, 19, 21, 23, 29, 31] -> [ 2, 3, 5, 7, 11, 13, 17, 19, 21, 23, 29, 31 ]
>notnull (index (t8, 22 - 1, -1)) -> true
>one = substr (target, 4) -> " is an \"index\" test."
>two = substr (target, 11, 18) -> "\"index\""
>three = substr (target, index (target, 'test', -1)) -> "test."
>substr (target, index (target, '"', 0), index (target, '"', -1) + 1) -> "\"index\""
>substr 1.234, 1, 3 -> ".2"
>substr (target, -1, -3) -> ""
>tl = 'tell teal tail teel toil tool toll' -> "tell teal tail teel toil tool toll"
>replace (tl, 't(..)l', 't$1b', all) -> "telb teab taib teeb toib toob tolb"
>replace tl, 't..l', 'test', first -> "test teal tail teel toil tool toll"
>replace tl, 't..l', 'test', last -> "tell teal tail teel toil tool test"
>replace tl, 't', 'b' -> "bell beal bail beel boil bool boll"
>r1 = ['tell', 'teal', 'tail', 'teel', 'toil', 'tool', 'toll'] -> [ "tell", "teal", "tail", "teel", "toil", "tool", "toll" ]
>replace (r1, 't(..)l', "t$1b", all) -> [ "telb", "teab", "taib", "teeb", "toib", "toob", "tolb" ]
>all = 1 -> 1
>first = 2 -> 2
>last = 7 -> 7
>all + first - last -> -4
>on = true -> true
>off = 'OFF' -> "OFF"
>prev = 12 -> 12
>previous = 15 -> 15
>yes = 'really' -> "really"
>no = 'fat chance' -> "fat chance"
>pop = 27 -> 27
>on -> true
>off -> "OFF"
>prev -> 12
>previous -> 15
>yes -> "really"
>no -> "fat chance"
>pop -> 27
>n = [1, 2, 3, 4, 5] -> [ 1, 2, 3, 4, 5 ]
>slice n, 2, -1 -> [ 3, 4 ]
>slice (target, -5) -> "test."
>s1 = [1, 2, 3] -> [ 1, 2, 3 ]
>splice (s1, 1, 0, 5, 6) -> [ ]
>s1 -> [ 1, 5, 6, 2, 3 ]
>s2 = ["This", "is", "a", "test"] -> [ "This", "is", "a", "test" ]
>splice s2, 2, 1, "an", "important", "little" -> [ "a" ]
>s2 -> [ "This", "is", "an", "important", "little", "test" ]
>s3 = {a: 1, b: true, c: 'tree', d: 14} -> { a: 1, b: true, c: "tree", d: 14 }
>splice s3, [b, c], {f: 'def', g: 'green'} -> { b: true, c: "tree" }
>s3 -> { a: 1, d: 14, f: "def", g: "green" }
>Sorting objects by keys is now “true”.
>s4 = {d: 12, b: 14, a: 2, g: 7, f: 3} -> { a: 2, b: 14, d: 12, f: 3, g: 7 }
>splice s4, [b, d], {c: 9} -> { b: 14, d: 12 }
>s4 -> { a: 2, c: 9, f: 3, g: 7 }
>Sorting objects by keys is now “false”.
>funny_string = ' \t\f  \r\n   345  \f  \t \r\n  ' -> " \t\f  \r\n   345  \f  \t \r\n  "
>trim funny_string -> "345"
>ltrim funny_string -> "345  \f  \t \r\n  "
>rtrim funny_string -> " \t\f  \r\n   345"
>trim (1.2 + " ") -> "1.2"
>t1 = [" abc", " def  ", "ghi   "] -> [ " abc", " def  ", "ghi   " ]
>t2 = {a: "  a b c ", b: '   def', c: 'ghi   ', d: t1} -> { a: "  a b c ", b: "   def", c: "ghi   ", d: [ " abc", " def  ", "ghi   " ] }
>trim t1 -> [ "abc", "def", "ghi" ]
>ltrim t1 -> [ "abc", "def  ", "ghi   " ]
>rtrim t1 -> [ " abc", " def", "ghi" ]
>trim t2 -> { a: "a b c", b: "def", c: "ghi", d: [ "abc", "def", "ghi" ] }
>ltrim t2 -> { a: "a b c ", b: "def", c: "ghi   ", d: [ "abc", "def  ", "ghi   " ] }
>rtrim t2 -> { a: "  a b c", b: "   def", c: "ghi", d: [ " abc", " def", "ghi" ] }
>arr_n = [] -> [ ]
>fill arr_n, 0, 10 -> [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
>fill arr_n, 1, 2, 3 -> [ 0, 0, 1, 1, 1, 0, 0, 0, 0, 0 ]
>fill arr_n, 3, 12, 4 -> [ 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, <null>, <null>, 3, 3, 3, 3 ]
>str_b = '' -> ""
>fill (str_b, '=', 25) -> "========================="
>fill (str_b, '-', 0, 3) -> "---======================"
>fill (str_b, '-', 22, 3) -> "---===================---"
>formatstring ('%1$s, %2$s!', 'Hello', 'World') -> "Hello, World!"
>formatstring ("Rate is %1$8.6f", 12.34567) -> "Rate is 12.345670"
>formatstring ('Name: %1$-20s, Age: %2$5d', 'Agnes Brown', 97) -> "Name: Agnes Brown         , Age:    97"
>formatstring ("%02d", yod (d'2022-05-20') % 100) -> "22"
>str12 = "Latest version: 23" -> "Latest version: 23"
>Defining variable “num”
>scan (str12, 'Latest version: %i', num) -> 23
>num -> 23
>str22 = '1 2 3' -> "1 2 3"
>Defining variable “a1”
>Defining variable “a2”
>Defining variable “a3”
>scan (str22, '%d %d %d', a1, a2, a3) -> 3
>a1 -> 1
>a2 -> 2
>a3 -> 3
>str47 = "Author: John Doe" -> "Author: John Doe"
>Defining variable “auth” = ""
>scan (str47, "Author: %s", auth) -> "John Doe"
>auth -> "John Doe"
>arr_m = [10] -> [ 10 ]
>pad (arr_m, 10, -1) -> [ -1, -1, -1, -1, -1, 10, -1, -1, -1, -1 ]
>lpad (arr_m, 15, -2) -> [ -2, -2, -2, -2, -2, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1 ]
>rpad (arr_m, 17, 20) -> [ -2, -2, -2, -2, -2, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 20, 20 ]
>pad (arr_m, 23) -> [ 0, 0, 0, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 20, 20, 0, 0, 0 ]
>arr_m -> [ 0, 0, 0, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 20, 20, 0, 0, 0 ]
>str_c = '#' -> "#"
>rpad (str_c, 9, '>') -> "#>>>>>>>>"
>lpad (str_c, 18, '<') -> "<<<<<<<<<#>>>>>>>>"
>pad (str_c, 24, '_') -> "___<<<<<<<<<#>>>>>>>>___"
>pad (str_c, 30) -> "   ___<<<<<<<<<#>>>>>>>>___   "
>str_c -> "   ___<<<<<<<<<#>>>>>>>>___   "
>palin = 'Was it a car or a cat I saw' -> "Was it a car or a cat I saw"
>reverse (palin) -> "was I tac a ro rac a ti saW"
>arr_m = [1, 2, 3, 4, 5, 6, 7, 8, 9] -> [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
>reverse arr_m -> [ 9, 8, 7, 6, 5, 4, 3, 2, 1 ]
>arr_m -> [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
>u1 = "aaabbaacceeeffccdd" -> "aaabbaacceeeffccdd"
>unique u1 -> "abcefd"
>u2 = chars u1 -> [ "a", "a", "a", "b", "b", "a", "a", "c", "c", "e", "e", "e", "f", "f", "c", "c", "d", "d" ]
>unique u2 -> [ "a", "b", "c", "e", "f", "d" ]
>a1 = [4, 3, 1, 2, -1, 5, -10] -> [ 4, 3, 1, 2, -1, 5, -10 ]
>a2 = ["abc", "Abc", "aBc", "abC"] -> [ "abc", "Abc", "aBc", "abC" ]
>a3 = ["abc", "DEF", "Abc", "def", "1.1.0", "1.10.0", "1.2.0"] -> [ "abc", "DEF", "Abc", "def", "1.1.0", "1.10.0", "1.2.0" ]
>a4 = [{b: 20}, {b: 10}, {b: 0}, {b: 1}, {b: 100}, {b: -1}] -> [ { b: 20 }, { b: 10 }, { b: 0 }, { b: 1 }, { b: 100 }, { b: -1 } ]
>a1 = sort a1 -> [ -10, -1, 1, 2, 3, 4, 5 ]
>a1 -> [ -10, -1, 1, 2, 3, 4, 5 ]
>sort (a2) -> [ "Abc", "aBc", "abC", "abc" ]
>a2 -> [ "abc", "Abc", "aBc", "abC" ]
>sort (a2, true) -> [ "abc", "Abc", "aBc", "abC" ]
>sort a3 -> [ "1.1.0", "1.2.0", "1.10.0", "Abc", "DEF", "abc", "def" ]
>sort a3, SORT_CASE_INSENSITIVE -> [ "1.1.0", "1.2.0", "1.10.0", "abc", "Abc", "DEF", "def" ]
>sort a3, false -> [ "1.1.0", "1.2.0", "1.10.0", "Abc", "DEF", "abc", "def" ]
>sort a4 -> [ { b: -1 }, { b: 0 }, { b: 1 }, { b: 10 }, { b: 20 }, { b: 100 } ]
>1 < 2 == 3 > 4 -> false
>1 == '1' > 2 != '2' -> true
>1 === '1' -> false
>1 == '1' -> true
>! true -> false
>a -> 0.707106781186547524400844362104849039284835937688474036588339
>! (a == null) -> true
>!! null -> false
>!! '' -> false
>!! 0 -> false
>!! 1 -> true
>!! 'abc' -> true
>~~ false -> 0
>~~ true -> 1
>~~ '1' -> 1
>~~ '1.234' -> 1.234
>~~ ('1' + '2') -> 12
>~~ (1 / 2) -> 0.5
>@@ null -> ""
>@@ 123 -> "123"
>@@ pi -> "3.14159265358979323846264338327950288419716939937510582097494"
>@@ (1 / 2) -> "0.5"
>@@ frac (1, 3) -> "1 / 3"
>@@ (1, 1) -> "( 1, 1 )"
>@@ info.locale.weekdays -> "[ Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday ]"
>! foundset.username -> true
>foundset.username = '' -> ""
>! foundset.username -> true
>foundset.username = 'Don' -> "Don"
>! foundset.username -> false
>!! foundset.username -> true
>Precision is now “200” digits.
>1 / 7 -> 0.14285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714
>Precision is now “60” digits.
>Precision is now “30” digits.
>1 / 9 -> 0.111111111111111111111111111111
>Precision is now “60” digits.
>Precision is now “50” digits.
>pi -> 3.1415926535897932384626433832795028841971693993751
>Precision is now “60” digits.
>Precision is now “10000” digits.
>e -> 2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264800168477411853742345442437107539077744992069551702761838606261331384583000752044933826560297606737113200709328709127443747047230696977209310141692836819025515108657463772111252389784425056953696770785449969967946864454905987931636889230098793127736178215424999229576351482208269895193668033182528869398496465105820939239829488793320362509443117301238197068416140397019837679320683282376464804295311802328782509819455815301756717361332069811250996181881593041690351598888519345807273866738589422879228499892086805825749279610484198444363463244968487560233624827041978623209002160990235304369941849146314093431738143640546253152096183690888707016768396424378140592714563549061303107208510383750510115747704171898610687396965521267154688957035035402123407849819334321068170121005627880235193033224745015853904730419957777093503660416997329725088687696640355570716226844716256079882651787134195124665201030592123667719432527867539855894489697096409754591856956380236370162112047742722836489613422516445078182442352948636372141740238893441247963574370263755294448337998016125492278509257782562092622648326277933386566481627725164019105900491644998289315056604725802778631864155195653244258698294695930801915298721172556347546396447910145904090586298496791287406870504895858671747985466775757320568128845920541334053922000113786300945560688166740016984205580403363795376452030402432256613527836951177883863874439662532249850654995886234281899707733276171783928034946501434558897071942586398772754710962953741521115136835062752602326484728703920764310059584116612054529703023647254929666938115137322753645098889031360205724817658511806303644281231496550704751025446501172721155519486685080036853228183152196003735625279449515828418829478761085263981395599006737648292244375287184624578036192981971399147564488262603903381441823262515097482798777996437308997038886778227138360577297882412561190717663946507063304527954661855096666185664709711344474016070462621568071748187784437143698821855967095910259686200235371858874856965220005031173439207321139080329363447972735595527734907178379342163701205005451326383544000186323991490705479778056697853358048966906295119432473099587655236812859041383241160722602998330535370876138939639177957454016137223618789365260538155841587186925538606164779834025435128439612946035291332594279490433729908573158029095863138268329147711639633709240031689458636060645845925126994655724839186564209752685082307544254599376917041977780085362730941710163434907696423722294352366125572508814779223151974778060569672538017180776360346245927877846585065605078084421152969752189087401966090665180351650179250461950136658543663271254963990854914420001457476081930221206602433009641270489439039717719518069908699860663658323227870937650226014929101151717763594460202324930028040186772391028809786660565118326004368850881715723866984224220102495055188169480322100251542649463981287367765892768816359831247788652014117411091360116499507662907794364600585194199856016264790761532103872755712699251827568798930276176114616254935649590379804583818232336861201624373656984670378585330527583333793990752166069238053369887956513728559388349989470741618155012539706464817194670834819721448889879067650379590366967249499254527903372963616265897603949857674139735944102374432970935547798262961459144293645142861715858733974679189757121195618738578364475844842355558105002561149239151889309946342841393608038309166281881150371528496705974162562823609216807515017772538740256425347087908913729172282861151591568372524163077225440633787593105982676094420326192428531701878177296023541306067213604600038966109364709514141718577701418060644363681546444005331608778314317444081194942297559931401188868331483280270655383300469329011574414756313999722170380461709289457909627166226074071874997535921275608441473782330327033016823719364800217328573493594756433412994302485023573221459784328264142168487872167336701061509424345698440187331281010794512722373788612605816566805371439612788873252737389039289050686532413806279602593038772769778379286840932536588073398845721874602100531148335132385004782716937621800490479559795929059165547050577751430817511269898518840871856402603530558373783242292418562564425502267215598027401261797192804713960068916382866527700975276706977703643926022437284184088325184877047263844037953016690546593746161932384036389313136432713768884102681121989127522305625675625470172508634976536728860596675274086862740791285657699631378975303466061666980421826772456053066077389962421834085988207186468262321508028828635974683965435885668550377313129658797581050121491620765676995065971534476347032085321560367482860837865680307306265763346977429563464371670939719306087696349532884683361303882943104080029687386911706666614680001512114344225602387447432525076938707777519329994213727721125884360871583483562696166198057252661220679754062106208064988291845439530152998209250300549825704339055357016865312052649561485724925738620691740369521353373253166634546658859728665945113644137033139367211856955395210845840724432383558606310680696492485123263269951460359603729725319836842336390463213671011619282171115028280160448805880238203198149309636959673583274202498824568494127386056649135252670604623445054922758115170931492187959271800194096886698683703730220047531433818109270803001720593553052070070607223399946399057131158709963577735902719628506114651483752620956534671329002599439766311454590268589897911583709341937044115512192011716488056694593813118384376562062784631049034629395002945834116482411496975832601180073169943739350696629571241027323913874175492307186245454322203955273529524024590380574450289224688628533654221381572213116328811205214648980518009202471939171055539011394331668151582884368760696110250517100739276238555338627255353883096067164466237092264680967125406186950214317621166814009759528149390722260111268115310838731761732323526360583817315103459573653822353499293582283685100781088463434998351840445170427018938199424341009057537625776757111809008816418331920196262341628816652137471732547772778348877436651882875215668571950637193656539038944936642176400312152787022236646363575550356557694888654950027085392361710550213114741374410613444554419210133617299628569489919336918472947858072915608851039678195942983318648075608367955149663644896559294818785178403877332624705194505041984774201418394773120281588684570729054405751060128525805659470304683634459265255213700806875200959345360731622611872817392807462309468536782310609792159936001994623799343421068781349734695924646975250624695861690917857397659519939299399556754271465491045686070209901260681870498417807917392407194599632306025470790177452751318680998228473086076653686685551646770291133682756310722334672611370549079536583453863719623585631261838715677411873852772292259474337378569553845624680101390572787101651296663676445187246565373040244368414081448873295784734849000301947788802046032466084287535184836495919508288832320652212810419044804724794929134228495197002260131043006241071797150279343326340799596053144605323048852897291765987601666781193793237245385720960758227717848336161358261289622611812945592746276713779448758675365754486140761193112595851265575973457301533364263076798544338576171533346232527057200530398828949903425956623297578248873502925916682589445689465599265845476269452878051650172067478541788798227680653665064191097343452887833862172615626958265447820567298775642632532159429441803994321700009054265076309558846589517170914760743713689331946909098190450129030709956622662030318264936573369841955577696378762491885286568660760056602560544571133728684020557441603083705231224258722343885412317948138855007568938112493538631863528708379984569261998179452336408742959118074745341955142035172618420084550917084568236820089773945584267921427347756087964427920270831215015640634134161716644806981548376449157390012121704154787259199894382536495051477137939914720521952907939613762110723849429061635760459623125350606853765142311534966568371511660422079639446662116325515772907097847315627827759878813649195125748332879377157145909106484164267830994972367442017586226940215940792448054125536043131799269673915754241929660731239376354213923061787675395871143610408940996608947141834069836299367536262154524729846421375289107988438130609555262272083751862983706678722443019579379378607210725427728907173285487437435578196651171661833088112912024520404868220007234403502544820283425418788465360259150644527165770004452109773558589762265548494162171498953238342160011406295071849042778925855274303522139683567901807640604213830730877446017084268827226117718084266433365178000217190344923426426629226145600433738386833555534345300426481847398921562708609565062934040526494324426144566592129122564889356965500915430642613425266847259491431423939884543248632746184284665598533231221046625989014171210344608427161661900125719587079321756969854401339762209674945418540711844643394699016269835160784892451405894094639526780735457970030705116368251948770118976400282764841416058720618418529718915401968825328930914966534575357142731848201638464483249903788606900807270932767312758196656394114896171683298045513972950668760474091542042842999354102582911350224169076943166857424252250902693903481485645130306992519959043638402842926741257342244776558417788617173726546208549829449894678735092958165263207225899236876845701782303809656788311228930580914057261086588484587310165815116753332767488701482916741970151255978257270740643180860142814902414678047232759768426963393577354293018673943971638861176420900406866339885684168100387238921448317607011668450388721236436704331409115573328018297798873659091665961240202177855885487617616198937079438005666336488436508914480557103976521469602766258359905198704230017946553679
>Precision is now “60” digits.
>Units in “binary”.
>1024 ** 2 @k -> 1.00 Mibytes
>Units in “SI (base ten)” form.
>1000 ** 4 @k -> 1.00 Tbytes
>Units in “mixed” form.
>1024 ** 3 @k -> 1.00 Gbytes
>2000 ** 10 @K -> 827181 Brontobytes
>100MB -> 100000000
>2EB -> 2000000000000000000
>2EiB -> 2305843009213693952
>900KB @k -> 0.86 Mbytes
>300PB -> 300000000000000000
>450PiB -> 506654958079180800
>320Yb @K -> 265 Yottabytes
>Units in “binary”.
>settings.units -> "BINARY"
>Units in “mixed” form.
>Units in “SI (base ten)” form.
>settings.units -> "DECIMAL"
>Units in “mixed” form.
>Precision is now “50” digits.
>settings.precision -> 50
>Precision is now “60” digits.
>Precision is now “34” digits.
>settings.precision -> 34
>Precision is now “60” digits.
>Precision is now “16” digits.
>settings.precision -> 16
>Precision is now “60” digits.
>Trig mode is now “DEGREES”.
>settings.trigMode -> "DEGREES"
>Trig mode is now “RADIANS”.
>10 ! @w -> three million six hundred twenty-eight thousand eight hundred
>500 + 40 + 7 @W -> FIVE HUNDRED FORTY-SEVEN
>2 ** 128 @w -> three hundred forty undecillion two hundred eighty-two decillion three hundred sixty-six nonillion nine hundred twenty octillion nine hundred thirty-eight septillion four hundred sixty-three sextillion four hundred sixty-three quintillion three hundred seventy-four quadrillion six hundred seven trillion four hundred thirty-one billion seven hundred sixty-eight million two hundred eleven thousand four hundred fifty-six
>10 ** 3000 @w -> one novenonagintanongentillion
>10 ** 12012 @W -> ONE QUADRILLITRILLION
>1492 @,w -> one thousand, four hundred ninety-two
>100101 @_w -> one hundred thousand one hundred one
>0.125 @2% -> 12.50%
>0.1234567 @4% -> 12.3457%
>20 ! + 0.5 @2,$ -> $2,432,902,008,176,640,000.50
>1500 @$ -> $1500.00
>'abc' @+20s -> "         abc        "
>'def' @-20s -> "                 def"
>'ghi' @20s -> "ghi                 "
>
>Calculation mode set to “RATIONAL”.
>fr1 = 5 / 6 -> 5 / 6
>++ fr1 -> 11 / 6
>-- fr1 -> 5 / 6
>fr2 = 15 / 7 -> 15 / 7
>fr2 ++ -> 15 / 7
>fr2 -- -> 22 / 7
>fr2 -- -> 15 / 7
>fr2 @F -> 1 1/7
>Calculation mode set to “DECIMAL(60)”.
>a = [1, 2, 3] -> [ 1, 2, 3 ]
>a[0] = 4 -> 4
>a[1] = 5 -> 5
>a -> [ 4, 5, 3 ]
>a[3] = 10 -> 10
>a -> [ 4, 5, 3, 10 ]
>a ₀ -> 4
>a ₂ -> 3
>length a -> 4
>scale a -> 4
>b = null -> <null>
>b[2] = 'abc' -> "abc"
>b -> [ <null>, <null>, "abc" ]
>b[0] = 'ABC' -> "ABC"
>b -> [ "ABC", <null>, "abc" ]
>c = null -> <null>
>c.d = true -> true
>c.f = 1.2 -> 1.2
>c.g = "Begin" -> "Begin"
>c."key" = 'end' -> "end"
>c -> { d: true, f: 1.2, g: "Begin", "key": "end" }
>length c -> 4
>scale c -> 4
>d = [1, {start: 1, end: 2}, {px: 0, py: 0}, "Area"] -> [ 1, { start: 1, end: 2 }, { px: 0, py: 0 }, "Area" ]
>d -> [ 1, { start: 1, end: 2 }, { px: 0, py: 0 }, "Area" ]
>d[0] = 2 -> 2
>d[1].start = 3 -> 3
>d[2].py = 4 -> 4
>d[3] = "Bounding " + d[3] -> "Bounding Area"
>d @j -> 
>[
>  2,
>  {
>    start: 3,
>    end: 2
>  },
>  {
>    px: 0,
>    py: 4
>  },
>  "Bounding Area"
>]
>length d -> 4
>scale d -> 6
>Quoting result strings is now “false”.
>d @-j -> [
>  2,
>  {
>    start:3,
>    end:2
>  },
>  {
>    px:0,
>    py:4
>  },
>  Bounding Area
>]
>Quoting result strings is now “true”.
>f = {coords: [1, 1, 4, 5], name: "box"} -> { coords: [ 1, 1, 4, 5 ], name: "box" }
>f @0.4j -> 
>{
>    coords: [
>        1,
>        1,
>        4,
>        5
>    ],
>    name: "box"
>}
>1 == 2 ? 'impossible'
> : 'correct' -> "correct"
>2 ! < 2 ** 2
> ? 'true'
> : 'not likely' -> "true"
>x = 7 -> 7
>y = 8 -> 8
>_min = min_plus_1 = x < y ? x + 1 : y + 1 -> 8
>_min -> 8
>null ?: 'nothing' -> "nothing"
>'' ?: 'empty' -> "empty"
>'a' ?: 'no a' -> "a"
>0 ?: 1 -> 1
>true ?: 'not true' -> true
>desc = 'heading' -> "heading"
>desc ?! `${desc @20s}` -> "heading             "
>'' ?! 'funny' -> ""
>true ?! 'TRUTH' -> "TRUTH"
>false ?! 'oops! true' -> false
>y = x = 7 + 1 -> 8
>y -> 8
>x -> 8
>Variable 'm' cleared.
>m[0] = m[1] = m[2] = 3 -> 3
>m -> [ 3, 3, 3 ]
>Variable 'n' cleared.
>n.a = 'First' -> "First"
>n.b = 123 -> 123
>n.c = false -> false
>n -> { a: "First", b: 123, c: false }
>Variable 'a' cleared.
>a = 128 -> 128
>` a is $a, b isn't $a` -> " a is 128, b isn't 128"
>`a + 1 = ${a + 1}` -> "a + 1 = 129"
>`5! = ${5!} !!` -> "5! = 120 !!"
>`g$$` -> "g$"
>`a = ${a@x}` -> "a = 0x80"
>`a = ${a@%}` -> "a = 12800%"
>`a = ${a@k}` -> "a = 128 bytes"
>Variables 'g', 'h', 'j', and 'k' cleared.
>Precision is now “200” digits.
>g = 271 -> 271
>h = 385 -> 385
>j = 192 -> 192
>k = 120 ! -> 6689502913449127057588118054090372586752746333138029810295671352301633557244962989366874165271984981308157637893214090552534408589408121859898481114389650005964960521256960000000000000000000000000000
>g += h -> 656
>j -= g -> -464
>h *= g -> 252560
>j /= g -> -0.70731707317073170731707317073170731707317073170731707317073170731707317073170731707317073170731707317073170731707317073170731707317073170731707317073170731707317073170731707317073170731707317073170732
>k %= 10 ** 40 -> 4960521256960000000000000000000000000000
>k -> 4960521256960000000000000000000000000000
>g = 0377 @o -> 0377
>g &= 0177 @o -> 0177
>h = 0x400 @x -> 0x400
>h |= 0x080 @o -> 02200
>j = 0xaaa @x -> 0xaaa
>j ^= 0x554 @x -> 0xffe
>g @o -> 0177
>h @x -> 0x480
>j @x -> 0xffe
>g = 0x4000 @x -> 0x4000
>g >>>= 3 @x -> 0x800
>g >>= 2 @x -> 0x200
>g <<= 2 @x -> 0x800
>g @x -> 0x800
>a = {b: [1, 2, 3], c: {d: 1, f: true, g: 'abcd'}} -> { b: [ 1, 2, 3 ], c: { d: 1, f: true, g: "abcd" } }
>a -> { b: [ 1, 2, 3 ], c: { d: 1, f: true, g: "abcd" } }
>++ a.b[1] -> 3
>a.b -> [ 1, 3, 3 ]
>a.c.d ++ -> 1
>a -> { b: [ 1, 3, 3 ], c: { d: 2, f: true, g: "abcd" } }
>a.c.d ++ -> 2
>a -> { b: [ 1, 3, 3 ], c: { d: 3, f: true, g: "abcd" } }
>a.b[2] = a.b[0] + a.c.d -> 4
>a -> { b: [ 1, 3, 4 ], c: { d: 3, f: true, g: "abcd" } }
>a.c.h = a.c.g + ": " + `a.b[2] = ${a.b[2]}` -> "abcd: a.b[2] = 4"
>a @4j -> 
>    {
>      b: [
>        1,
>        3,
>        4
>      ],
>      c: {
>        d: 3,
>        f: true,
>        g: "abcd",
>        h: "abcd: a.b[2] = 4"
>      }
>    }
>length a -> 2
>scale a.b -> 3
>r = ∅ -> { }
>s = ⦰ -> { }
>length r -> 0
>length s -> 0
>r == s -> true
>format = 'abcdefg' -> "abcdefg"
>format[1] = 'z' -> "z"
>format[2] = 'y' -> "y"
>format[3] = 'xw' -> "xw"
>format[8] = 'new' -> "new"
>format -> "azyxwfg new"
>b = [[[1, 2], [3, 4], [5, 6]]] -> [ [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ] ] ]
>b[0][0][1] = 11 -> 11
>b[1] = [[7, 9], [0, 1], [3, 4]] -> [ [ 7, 9 ], [ 0, 1 ], [ 3, 4 ] ]
>b @-j -> [
>  [
>    [
>      1,
>      11
>    ],
>    [
>      3,
>      4
>    ],
>    [
>      5,
>      6
>    ]
>  ],
>  [
>    [
>      7,
>      9
>    ],
>    [
>      0,
>      1
>    ],
>    [
>      3,
>      4
>    ]
>  ]
>]
>length b -> 2
>scale b -> 12
>length b[1] -> 3
>Sorting objects by keys is now “true”.
>o9 = {h: 12, g: 9, f: 17, d: 3, a: 4, c: -1} -> { a: 4, c: -1, d: 3, f: 17, g: 9, h: 12 }
>o9 += {b: 3} -> { a: 4, b: 3, c: -1, d: 3, f: 17, g: 9, h: 12 }
>Sorting objects by keys is now “false”.
>Precision is now “34” digits.
>p = {b: 2, c: {d: true}, "e": e} -> { b: 2, c: { d: true }, "e": 2.718281828459045235360287471352662 }
>p @j -> 
>{
>  b: 2,
>  c: {
>    d: true
>  },
>  "e": 2.718281828459045235360287471352662
>}
>length p -> 3
>scale p -> 3
>Elements of p:
>"name: b, value: 2"
>"name: c, value: { d: true }"
>"name: \"e\", value: 2.718281828459045235360287471352662"
>codes 'abc' -> [ 97, 98, 99 ]
>chars 'abc' -> [ "a", "b", "c" ]
>codes 123 -> [ 49, 50, 51 ]
>chars '123' -> [ "1", "2", "3" ]
>__ -> 49
>__ -> 50
>__ -> 51
>__ -> "1"
>__ -> "2"
>__ -> "3"
>__ -> 8539
>__ -> 51
>__ -> 52
>__ -> "⅛"
>__ -> "3"
>__ -> "4"
>set1 = {} -> { }
>typeof set1 -> "collection"
>set1 += {2} -> { 2 }
>typeof set1 -> "set"
>set1 += 2 -> { 2 }
>set1 += {3} -> { 2, 3 }
>set1 += {1, 2} -> { 2, 3, 1 }
>length set1 -> 3
>scale set1 -> 3
>3 within set1 -> true
>0 in set1 -> false
>index (set1, 2) -> 1
>A = {1, 2, 3, 4, 5, 6} -> { 1, 2, 3, 4, 5, 6 }
>B = {3, 4, 5, 6, 7, 8} -> { 3, 4, 5, 6, 7, 8 }
>A \ B -> { 1, 2 }
>B \ A -> { 7, 8 }
>X = {11, 12, 13, 14, 15} -> { 11, 12, 13, 14, 15 }
>Y = {10, 12, 14, 16, 18} -> { 10, 12, 14, 16, 18 }
>Z = {7, 9, 11, 14, 18, 20} -> { 7, 9, 11, 14, 18, 20 }
>X - Y - Z -> { 13, 15 }
>Y - X - Z -> { 10, 16 }
>Z - X - Y -> { 7, 9, 20 }
>X - [12, 13, 14] -> { 11, 15 }
>Z - {a: 7, b: 9} -> { 11, 14, 18, 20 }
>Z \ {} -> { 7, 9, 11, 14, 18, 20 }
>Calculation mode set to “RATIONAL”.
>4 / 5 < 7 / 9 -> false
>1 / 3 * 4 / 5 @F -> 4 / 15
>(7 / 11) / (9 / 5) -> 35 / 99
>"5 3/8" * "4 1/4" @F -> 22 27/32
>(4 / 6) ⁹ -> 512 / 19683
>u = 1 / 2 -> 1 / 2
>u **= -2 -> 4
>u **= -2 -> 0.0625
>u **= -2 -> 256
>u **= -2 -> 0.0000152587890625
>frac u -> 1 / 65536
>bn 0 -> 1 / 1
>bn 1 -> 1 / 2
>bn -1 -> -1 / 2
>bn 2 -> 1 / 6
>bn 20 -> -174611 / 330
>bn 126 -> 5556330281949274850616324408918951380525567307126747246796782304333594286400508981287241419934529638692081513802696639 / 4357878
>Calculation mode set to “DECIMAL(34)”.
>Variable 'a' cleared.
>Defining function “a” = { loop i in 10 { i } }
>a -> 10
>eval a -> 10
>r = R'MCMLXII' -> 1962
>s = r'ⅿⅽⅿⅼⅹⅶ' -> 1967
>1962 @R -> R'MCMLXII'
>1954 @-r -> "mcmliv"
>roman ('xx' + 'ii') -> 22
>t'27h' + t'13m' + t'27.9s' @h -> h'27:13:27.9'
>h'12:30 pm' - h'11:45 am' @mt -> t'45m'
>h'8:30 am' + t'1h' + t'37m' @h -> h'10:07'
>t'3.0002s' @-5mt -> "0.05000m"
>h'12:10am' - t'20m' @-ah -> "-0:10"
>d'990101' - d'980101' -> 365
>d'21/5/16' - d'99/12/31' -> 7807
>d'1941/12/7' + 1000 @e -> d'1944-09-02'
>d'-01000101' -> -756052
>-756052 @e -> d'-0100-01-01'
>d'990101' -> 10592
>10592 @e -> d'1999-01-01'
>d'000101' @e -> d'2000-01-01'
>d'500101' @e -> d'2050-01-01'
>d'49/01/01' @e -> d'2049-01-01'
>d'-9999/01/01' @e -> d'-9999-01-01'
>D'01-01--9999' @E -> D'01/01/-9999'
>d'9999/12/31' @e -> d'9999-12-31'
>d911 = D'9/11/01' -> 11576
>d911 @e -> d'2001-09-11'
>d911 @E -> D'09/11/2001'
>D'1/1/1999' @e -> d'1999-01-01'
>_waterloo = d'1815/6/18' -> -56445
>_waterloo @e -> d'1815-06-18'
>_waterloo @-E -> "06/18/1815"
>toDate ('2022-7-2', 'yyyy-m-d') -> 19175
>ToDate ('2022-07-02', 'yyyy-m-d') -> 19175
>todate ('2022-07-02', 'yyyy-mm-dd') -> 19175
>TODATE ('20220702', 'yyyymmdd') -> 19175
>todate ('220702', 'yymmdd') -> 19175
>ToDate ('7/2/-22', 'd-m-yy') -> -1458011
>TODATE ('7-2--2022', 'd-m-yyyy') -> -1458011
>todate ('-1100-02-03', "") -> -1121261
>todate (17802) @E -> D'09/28/2018'
>ToDate (join (['2018', '09', '28'], '-')) @-e -> "2018-09-28"
>todate (6, 30, 2020) -> 18443
>toDate (12, 31, 1999) -> 10956
>dt9 = '01-02-22' -> "01-02-22"
>ToDate (dt9, 'm-d-y') @e -> d'0022-01-02'
>ToDate (dt9, 'm-d-yy') @e -> d'2022-01-02'
>b1 = 1.2 -> 1.2
>b2 = 1 / 7 -> 0.1428571428571428571428571428571429
>b3 = pi -> 3.141592653589793238462643383279503
>b4 = 19 ! -> 121645100408832000
>b1a = toBase (b1, 4) -> "1.030303030303030303030303030303030303030303030303030303"
>b2a = ToBase (b2, 6) -> "0.050505050505050505050505050505050505050505"
>b3a = TOBASE (b3, 27) -> "3.3m5q3m2dcpqodjngig99aq9"
>b4a = tobase (b4, 36) -> "x9rl7nk0000"
>b1b = fromBase (b1a, 4) -> 1.199999999999999999999999999999999
>b2b = fromBase (b2a, 6) -> 0.1428571428571428571428571428571426
>b3b = FromBase (b3a, 27) -> 3.141592653589793238462643383279503
>b4b = FROMBASE (b4a, 36) -> 121645100408832000
>b1b - b1 -> -0.000000000000000000000000000000001
>b2b - b2 -> -0.0000000000000000000000000000000003
>b3b - b3 -> 0
>b4b - b4 -> 0
>pi ** 20 @,d -> 8,769,956,796.082699474752255593703904
>pi @,d -> 3.141592653589793238462643383279503
>200 ! @,d -> 788,657,867,364,790,503,552,363,213,932,185,062,295,135,977,687,173,263,294,742,533,244,359,449,963,403,342,920,304,284,011,984,623,904,177,212,138,919,638,830,257,642,790,242,637,105,061,926,624,952,829,931,113,462,857,270,763,317,237,396,988,943,922,445,621,451,664,240,254,033,291,864,131,227,428,294,853,277,524,242,407,573,903,240,321,257,405,579,568,660,226,031,904,170,324,062,351,700,858,796,178,922,222,789,623,703,897,374,720,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
>10e-9 @,d -> 0.00000001
>nanosperday = 24 * 60 * 60 * 1e9 @,d -> 86,400,000,000,000
>Separator display set to “true”.
>nanosperday -> 86,400,000,000,000
>Variable 'm' cleared.
>n = [1e10, 2 << 15, 42 !] -> [ 10,000,000,000, 65,536, 1,405,006,117,752,879,898,543,142,606,244,511,569,936,384,000,000,000 ]
>m = {p: 15 !, q: 3 ** 12, r: pi ** 15, s: n} -> { p: 1,307,674,368,000, q: 531,441, r: 28,658,145.96938799845337882197166056, s: [ 10,000,000,000, 65,536, 1,405,006,117,752,879,898,543,142,606,244,511,569,936,384,000,000,000 ] }
>`1^10 = ${1e10}` -> "1^10 = 10,000,000,000"
>Separator display set to “false”.
>➖ 2 -> -2
>t = 10 -> 10
>➖➖ t -> 9
>➕ 3 -> 3
>➕➕ t -> 10
>t ➖➖ -> 10
>t ➕➕ -> 9
>t ➖ 3 -> 7
>t ➕ 3 -> 13
>t ➗ 4 -> 2.5
>t ✖ 5 -> 50
>t ✕ 3 -> 30
>t ∗ 2 -> 20
>t ÷ 3 -> 3.333333333333333333333333333333333
>t ∕ 4 -> 2.5
>０ -> 0
>① -> 1
>⓯ -> 15
>𝟦 -> 4
>⑳ -> 20
>⒇ -> 20
>⒚ -> 19
>encode ('This is a Base64 test.') -> "VGhpcyBpcyBhIEJhc2U2NCB0ZXN0Lg=="
>decode "VGhpcyBpcyBhIEJhc2U2NCB0ZXN0Lg==" -> "This is a Base64 test."
>arr1 = [1, 2, 3] -> [ 1, 2, 3 ]
>enc1 = encode arr1 -> "WyAxLCAyLCAzIF0="
>arr2 = eval (decode enc1) -> [ 1, 2, 3 ]
>arr1 === arr2 -> true
>p1 = encode pi -> "My4xNDE1OTI2NTM1ODk3OTMyMzg0NjI2NDMzODMyNzk1MDM="
>p2 = eval (decode p1) -> 3.141592653589793238462643383279503
>pi === p2 -> true
>Defining constant “two_pi” = 6.283185307179586476925286766559006
>sin (two_pi) -> 0.0000000000000000000000000000000004
>two_pi / pi -> 2
>Defining constant “NULLISH” = <null>
>NULLISH -> <null>
>Defining variable “v1” = 10
>v1 ** 5 -> 100000
>v1 = 20 -> 20
>v1 ** 6 -> 64000000
>Defining variable “v2”
>v2 -> <null>
>v2 = 'three sheets' -> "three sheets"
>v2 += ' to the wind' -> "three sheets to the wind"
>v2 -> "three sheets to the wind"
>Variables 'v1' and 'v2' cleared.
>input_string = 'This is the day' -> "This is the day"
>matches (input_string, '.+is is.+') -> true
>matches (input_string, '^.+day$') -> true
>matches (input_string, '.*way') -> false
>input_array = ["ab", "aba", "baa", "cab", "dab", "ghi", "jkl", "abab"] -> [ "ab", "aba", "baa", "cab", "dab", "ghi", "jkl", "abab" ]
>matches (input_array, '.*ab.*') -> [ "ab", "aba", "cab", "dab", "abab" ]
>input_object = [
> {fname: 'John', mname: 'L', lname: 'Smith', addr1: '123 Main St', addr2: '', city: 'Anytown', state: 'OH'},
> {fname: 'Mary', mname: 'S', lname: 'Jones', addr1: '1515 Elm Ave', addr2: '', city: 'Maytown', state: 'MD'},
> {fname: 'Cecile', mname: 'R', lname: 'Mayshawn', addr1: '14235 Sierra Rd', addr2: 'Rte 17 Box 12', city: 'Rural', state: 'OR'}
>] -> [ { fname: "John", mname: "L", lname: "Smith", addr1: "123 Main St", addr2: "", city: "Anytown", state: "OH" }, { fname: "Mary", mname: "S", lname: "Jones", addr1: "1515 Elm Ave", addr2: "", city: "Maytown", state: "MD" }, { fname: "Cecile", mname: "R", lname: "Mayshawn", addr1: "14235 Sierra Rd", addr2: "Rte 17 Box 12", city: "Rural", state: "OR" } ]
>matches (input_object, '.+name') @j -> 
>[
>  {
>    fname: "John",
>    mname: "L",
>    lname: "Smith"
>  },
>  {
>    fname: "Mary",
>    mname: "S",
>    lname: "Jones"
>  },
>  {
>    fname: "Cecile",
>    mname: "R",
>    lname: "Mayshawn"
>  }
>]
>input_set = {"John Smith", "Mary Smith", "Jane Smith", "Bob Smith", "Fred Jones", "Alicia Jones"} -> { "John Smith", "Mary Smith", "Jane Smith", "Bob Smith", "Fred Jones", "Alicia Jones" }
>matches (input_set, '.+smith', MATCH_CASE_INSENSITIVE) -> { "John Smith", "Mary Smith", "Jane Smith", "Bob Smith" }
>set_name = 'Jane Smith' -> "Jane Smith"
>set_name in input_set -> true
>matches ('abc\ndef', 'abc.def', MATCH_DOTALL) -> true
>matches ('abcdef', 'abc.ef', MATCH_LITERAL) -> false
>Precision is now “34” digits.
>Defining function “help(n)” = 10 ** -n
>Precision is now “one” digit.
>help(j) -> 0.1
>Defining function “help(n)” = 10 ** -n
>Precision is now “2” digits.
>help(j) -> 0.01
>Defining function “help(n)” = 10 ** -n
>Precision is now “3” digits.
>help(j) -> 0.001
>Defining function “help(n)” = 10 ** -n
>Precision is now “4” digits.
>help(j) -> 0.0001
>Defining function “help(n)” = 10 ** -n
>Precision is now “5” digits.
>help(j) -> 0.00001
>Defining function “help(n)” = 10 ** -n
>Precision is now “6” digits.
>help(j) -> 0.000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “7” digits.
>help(j) -> 0.0000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “8” digits.
>help(j) -> 0.00000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “9” digits.
>help(j) -> 0.000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “10” digits.
>help(j) -> 0.0000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “11” digits.
>help(j) -> 0.00000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “12” digits.
>help(j) -> 0.000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “13” digits.
>help(j) -> 0.0000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “14” digits.
>help(j) -> 0.00000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “15” digits.
>help(j) -> 0.000000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “16” digits.
>help(j) -> 0.0000000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “17” digits.
>help(j) -> 0.00000000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “18” digits.
>help(j) -> 0.000000000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “19” digits.
>help(j) -> 0.0000000000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “20” digits.
>help(j) -> 0.00000000000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “21” digits.
>help(j) -> 0.000000000000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “22” digits.
>help(j) -> 0.0000000000000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “23” digits.
>help(j) -> 0.00000000000000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “24” digits.
>help(j) -> 0.000000000000000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “25” digits.
>help(j) -> 0.0000000000000000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “26” digits.
>help(j) -> 0.00000000000000000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “27” digits.
>help(j) -> 0.000000000000000000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “28” digits.
>help(j) -> 0.0000000000000000000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “29” digits.
>help(j) -> 0.00000000000000000000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “30” digits.
>help(j) -> 0.000000000000000000000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “31” digits.
>help(j) -> 0.0000000000000000000000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “32” digits.
>help(j) -> 0.00000000000000000000000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “33” digits.
>help(j) -> 0.000000000000000000000000000000001
>Defining function “help(n)” = 10 ** -n
>Precision is now “34” digits.
>help(j) -> 0.0000000000000000000000000000000001
>Defining function “Truth(v)” = {
> if v "T" else "F"
>}
>Truth({}) -> "F"
>Truth("") -> "F"
>Truth([]) -> "F"
>Truth({d: false}) -> "T"
>Truth([45]) -> "T"
>Truth(null) -> "F"
>Truth("a") -> "T"
>Truth("false") -> "F"
>Truth("F") -> "T"
>Truth("no") -> "T"
>Truth("off") -> "T"
>Truth(settings) -> "T"
>emptyset = {} -> { }
>emptyset has [0] -> false
>emptyset has [-1] -> false
>info has cpu -> true
>info has ["os"] -> true
>list = [1, 2, 3] -> [ 1, 2, 3 ]
>list has [2] -> true
>list has [3] -> false
>list has [-2] -> true
>{a: 23, b: 4, c: 19} has c -> true
>[] has [0] -> false
>[] has [-1] -> false
>'duck' in {'duck', 'duck', 'goose'} -> true
>{'duck', 'duck', 'goose'} has [1] -> true
>{'duck', 'duck', 'goose'} has [2] -> false
>c12 = {a: 1, b: {d: 23, "e": 2.718, f: {g: true, h: 'def'}}} -> { a: 1, b: { d: 23, "e": 2.718, f: { g: true, h: "def" } } }
>c12 has a -> true
>c12 has b -> true
>c12 has d -> true
>c12 has "e" -> true
>c12 has f -> true
>c12 has g -> true
>c12 has h -> true
>"a" in c12 -> true
>"b" in c12 -> true
>'"e"' in c12 -> false
>'"e"' in c12.b -> true
>"g" in c12 -> false
>"g" in c12.b.f -> true
>12 in 1 .. 12 -> true
>12 in 1 .. 10 -> false
>12 in 1 .. 20, 2 -> false
>12 in 0 .. 20, 2 -> true
>-12 in 0 .. -20, -2 -> true
>-12 in -1 .. -20, -2 -> false
>-12.0 in 0.0 .. -20.0, -2.0 -> true
>-12.0 in -1.0 .. -20.0, -2.0 -> false
>SumOf [4, 5, 6, 7, 8, 9, 10] -> 49
>sumOf 4 .. 10 -> 49
>4 + 5 + 6 + 7 + 8 + 9 + 10 -> 49
>sumof 4 .. 10, 2 -> 28
>4 + 6 + 8 + 10 -> 28
>ProductOf 10 -> 10
>ProductOf 2 .. 10 -> 3628800
>2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 -> 3628800
>productOf 9 .. 10 -> 90
>productof [3, 5, 7, 9, 11] -> 10395
>ProductOf 3 .. 11, 2 -> 10395
>Defining constant “UTF_8” = "utf-8"
>`Test of read/write/read of Unicode data = ${uni1 === uni2}` -> "Test of read/write/read of Unicode data = true"
>`Test of read of large file: length = ${length(data)@,d}` -> "Test of read of large file: length = 6,326,439"
>exists ('VersionRef.json') -> true
>exists ('test/files', 'd') -> true
>exists ('junk', 'fw') -> false
>info.os.id == "windows" ? exists ('verify_calc.bat', "fx+") : exists ('verify_calc', "fx+") -> true
>path = '../Java' -> "../Java"
>exists (path, 'd+') -> false
>info.os.id == "linux" ? exists (lower (path), 'd') : exists (path, 'd') -> true
{{ ^windows }}>FindFiles ('.', 'latest*', 'fx') -> [ "latest_push", "latest_test" ]
{{  windows }}>FindFiles ('.', 'latest*', 'fx') -> [ "latest_push.bat", "latest_test.bat" ]
>findFiles ('.', '*.java') -> [ "CheckCopyrights.java", "FormatValues.java" ]
>findfiles ('test', 'd*', 'fr*~') -> [ "Declaration.txt", "dacted.canon", "defunkt.json", "demo", "dupjson.calc", "dynarray.canon", "dynarraytest" ]
>delete 'alpha.beta', 'delta.gamma', 'alpha.omega' -> false
>Defining constant “FILE1” = "_ftest_.beta"
>Defining constant “FILE2” = "_gtest_.zeta"
>write ('test data', FILE1) -> 9
>read (FILE2) -> "test data"
>delete (FILE2) -> true
>Defining constant “PROPS” = "test.properties"
>props = {a: false, b: 123, c: "def"} -> { a: false, b: 123, c: "def" }
>writeProperties (props, PROPS) -> 3
>pr2 = readproperties (PROPS) -> { a: "false", b: "123", c: "def" }
>pr2 == props -> true
>pr2 === props -> false
>delete (PROPS) -> true
>Defining function “y3” = { const t71 = 71 }
>y3() -> "Defined constant “t71”"
>Defining function “y4” = { const t27 = 27, t38 = 38 }
>y4() -> "Defined constants “t27,t38”"
>Defining function “z22” = { var h18, h29, b32 }
>z22() -> "Defined variables “h18,h29,b32”"
>Defining function “z09” = { var b22 }
>z09() -> "Defined variable “b22”"
>Defining variable “a27”
>Defining variable “a38” = 5040
>Defining variable “a92”
>
>End of expression tests (suite 1).
>Tests of nested object / array variables.
>
>Variable 'a' cleared.
>a = {b: {c: 4}, "b": {c: [1, 8, 9], "c": {d: 5}}} -> { b: { c: 4 }, "b": { c: [ 1, 8, 9 ], "c": { d: 5 } } }
>a -> { b: { c: 4 }, "b": { c: [ 1, 8, 9 ], "c": { d: 5 } } }
>a.b.c = 5 -> 5
>a -> { b: { c: 5 }, "b": { c: [ 1, 8, 9 ], "c": { d: 5 } } }
>a."b".c[0] = 7 -> 7
>a -> { b: { c: 5 }, "b": { c: [ 7, 8, 9 ], "c": { d: 5 } } }
>a."b"."c".d = 6 -> 6
>a @j -> 
>{
>  b: {
>    c: 5
>  },
>  "b": {
>    c: [
>      7,
>      8,
>      9
>    ],
>    "c": {
>      d: 6
>    }
>  }
>}
>a."b"."c".d ++ -> 6
>a."b"."c" @j -> 
>{
>  d: 7
>}
>Variable 'a' cleared.
>a.b.d.f = 3 -> 3
>a @j -> 
>{
>  b: {
>    d: {
>      f: 3
>    }
>  }
>}
>Variables 'a' and 'f' cleared.
>a[0].b.c[1] = 12 -> 12
>a -> [ { b: { c: [ <null>, 12 ] } } ]
>d[1]."e"."f".g[3] = 14 -> 14
>d -> [ 2, { start: 3, end: 2, "e": { "f": { g: [ <null>, <null>, <null>, 14 ] } } }, { px: 0, py: 4 }, "Bounding Area" ]
>f[0][1] = 27 -> 27
>f -> [ [ <null>, 27 ] ]
>Variable 'a' cleared.
>a = {"b": {c: [1, 8, 9], "c": {d: 5}}} -> { "b": { c: [ 1, 8, 9 ], "c": { d: 5 } } }
>a -> { "b": { c: [ 1, 8, 9 ], "c": { d: 5 } } }
>a."b"."c".d = 6 -> 6
>a -> { "b": { c: [ 1, 8, 9 ], "c": { d: 6 } } }
>a."b"."c".f = 3 -> 3
>a -> { "b": { c: [ 1, 8, 9 ], "c": { d: 6, f: 3 } } }
>a."b"."d".i = true -> true
>a @j -> 
>{
>  "b": {
>    c: [
>      1,
>      8,
>      9
>    ],
>    "c": {
>      d: 6,
>      f: 3
>    },
>    "d": {
>      i: true
>    }
>  }
>}
>Variable 'a' cleared.
>a.b.c.d = 6 -> 6
>a -> { b: { c: { d: 6 } } }
>a.b.c.f = 3 -> 3
>a -> { b: { c: { d: 6, f: 3 } } }
>a.b.d.i = true -> true
>a @j -> 
>{
>  b: {
>    c: {
>      d: 6,
>      f: 3
>    },
>    d: {
>      i: true
>    }
>  }
>}
>Variable 'a' cleared.
>a."b"."c".d = 6 -> 6
>a -> { "b": { "c": { d: 6 } } }
>a."b"."c".f = 3 -> 3
>a -> { "b": { "c": { d: 6, f: 3 } } }
>a."b"."d".i = true -> true
>a @j -> 
>{
>  "b": {
>    "c": {
>      d: 6,
>      f: 3
>    },
>    "d": {
>      i: true
>    }
>  }
>}
>++ a['"b"']['"c"']['f'] -> 4
>a -> { "b": { "c": { d: 6, f: 4 }, "d": { i: true } } }
>Variable 'a' cleared.
>a = {b: true, c: {d: '123', f: 'fghi', g: {r: 4, s: 5}}} -> { b: true, c: { d: "123", f: "fghi", g: { r: 4, s: 5 } } }
>a.b -> true
>a.c.d -> "123"
>a.c -> { d: "123", f: "fghi", g: { r: 4, s: 5 } }
>a.c.g -> { r: 4, s: 5 }
>a.c.g.r -> 4
>++ a.c.g.r -> 5
>a -> { b: true, c: { d: "123", f: "fghi", g: { r: 5, s: 5 } } }
>++ a.c.g.r -> 6
>a.c.g."e" = 'E' -> "E"
>a -> { b: true, c: { d: "123", f: "fghi", g: { r: 6, s: 5, "e": "E" } } }
>a.c.g."e" -> "E"
>a.c.g."f" = {"g": 23, "h": {"i": 27}} -> { "g": 23, "h": { "i": 27 } }
>a -> { b: true, c: { d: "123", f: "fghi", g: { r: 6, s: 5, "e": "E", "f": { "g": 23, "h": { "i": 27 } } } } }
>a.c.g."f"."h" -> { "i": 27 }
>a['c'].g."f"['"h"']."i" ++ -> 27
>a -> { b: true, c: { d: "123", f: "fghi", g: { r: 6, s: 5, "e": "E", "f": { "g": 23, "h": { "i": 28 } } } } }
>a.c.g."f".'h' -> <null>
>a.c.g."f"."h".j = 15 -> 15
>a -> { b: true, c: { d: "123", f: "fghi", g: { r: 6, s: 5, "e": "E", "f": { "g": 23, "h": { "i": 28, j: 15 } } } } }
>a.c.g."f"."h".j ++ -> 15
>a -> { b: true, c: { d: "123", f: "fghi", g: { r: 6, s: 5, "e": "E", "f": { "g": 23, "h": { "i": 28, j: 16 } } } } }
>m1 = '"f"' -> "\"f\""
>m2 = "'h'" -> "'h'"
>a.c.g.`$m1`.`$m2` = 3.45 -> 3.45
>a -> { b: true, c: { d: "123", f: "fghi", g: { r: 6, s: 5, "e": "E", "f": { "g": 23, "h": { "i": 28, j: 16 }, 'h': 3.45 } } } }
>Defining function “stack” = { _len: 0, _arr: [] }
>Defining function “push(s,v)” = { s._arr[s._len ++] = v }
>Defining function “pop(s)” = { _v = splice (s._arr, -- s._len, 1) ; _v[0] }
>s1 = eval stack -> { _len: 0, _arr: [ ] }
>push(s1, 19) -> 19
>push(s1, 20) -> 20
>push(s1, 21) -> 21
>s1 -> { _len: 3, _arr: [ 19, 20, 21 ] }
>pop(s1) -> 21
>pop(s1) -> 20
>s1 -> { _len: 1, _arr: [ 19 ] }
>[
> 1,
> 2,
> 3
>] -> [ 1, 2, 3 ]
>[
>
>] -> [ ]
>{
> a: 10,
> b: true,
> c: 'ABC'
>} -> { a: 10, b: true, c: "ABC" }
>m2 = {} -> { }
>m2.first = 'Rupert' -> "Rupert"
>m2.last = 'James' -> "James"
>m2.minitial = 'P' -> "P"
>m2 -> { first: "Rupert", last: "James", minitial: "P" }
>m3 = {} -> { }
>++ m3 -> { _0: <null> }
>a1 = [1, 2, 3, 4] -> [ 1, 2, 3, 4 ]
>o1 = {b: false, c: 'def', d: 1.2} -> { b: false, c: "def", d: 1.2 }
>++ a1 -> [ <null>, 1, 2, 3, 4 ]
>a1 ++ -> [ <null>, 1, 2, 3, 4 ]
>a1 -> [ <null>, 1, 2, 3, 4, <null> ]
>a1 -- -> [ <null>, 1, 2, 3, 4, <null> ]
>-- a1 -> [ 1, 2, 3, 4 ]
>a1 -> [ 1, 2, 3, 4 ]
>++ o1 -> { _0: <null>, b: false, c: "def", d: 1.2 }
>o1 ++ -> { _0: <null>, b: false, c: "def", d: 1.2 }
>o1 -> { _0: <null>, b: false, c: "def", d: 1.2, _4: <null> }
>o1 -- -> { _0: <null>, b: false, c: "def", d: 1.2, _4: <null> }
>-- o1 -> { b: false, c: "def", d: 1.2 }
>o1 -> { b: false, c: "def", d: 1.2 }
>Variables 'p8' and 'p9' cleared.
>p9 = {'\u{1D71B}': pi} -> { '𝜛': 3.141592653589793238462643383279503 }
>p9 -> { '𝜛': 3.141592653589793238462643383279503 }
>` Value of \u{1D71B} = ${p9.'𝜛'}` -> " Value of 𝜛 = 3.141592653589793238462643383279503"
>p8 = {align: 4, pos: {x: 30, y: 15}, size: {width: 1000, height: '75%'}} -> { align: 4, pos: { x: 30, y: 15 }, size: { width: 1000, height: "75%" } }
>`align: ${case p8.align of { 2: 'LEFT', 0: 'CENTER', 4: 'RIGHT', default: 'DEFAULT' } }` -> "align: RIGHT"
>
>End of nested object / array tests.
>Tests of :include directive.
>
>This is the main file.
>This is the first level of include file.
>Lowest level of :include.
>msg = "This is a test of the :include directive." -> "This is a test of the :include directive."
>Leaving lowest level :include.
>Chained / nested file.
>poem = ["Twas the night before Christmas", "and all through the house", "not a creature was stirring", "not even a mouse."] -> [ "Twas the night before Christmas", "and all through the house", "not a creature was stirring", "not even a mouse." ]
>I'm out of here.
>Back to first level include.
>Back to main file.
>msg -> "This is a test of the :include directive."
>poem @..1j -> 
>"Twas the night before Christmas",
>"and all through the house",
>"not a creature was stirring",
>"not even a mouse."
>
>Done with :include tests.
