>Defining function “cf(num, den)” = {
>   var a = num, b = den
>   var f = []
>   if a < b {
>      f += 0
>      a, b = b, a
>   }
>   while true {
>      f += a \ b
>      const r = a % b
>      if r == 0 leave f
>      a, b = b, r
>   }
>}
>cf(43, 19) -> [ 2, 3, 1, 4 ]
>cf(19, 43) -> [ 0, 2, 3, 1, 4 ]
>cf(3, 7) -> [ 0, 2, 3 ]
>cf(7, 3) -> [ 2, 3 ]
>cf(225, 157) -> [ 1, 2, 3, 4, 5 ]
>cf(7, 38) -> [ 0, 5, 2, 3 ]
>cf(5, 27) -> [ 0, 5, 2, 2 ]
>cf(17, 12) -> [ 1, 2, 2, 2 ]
>cf(21, 8) -> [ 2, 1, 1, 1, 2 ]
>cf(2875, 1000) -> [ 2, 1, 7 ]
>Defining function “cf2(x)” = {
>   var f = []
>   var a = x
>   a0 = floor (a)
>   f += a0
>   print `f = $f`
>   a1 = a - a0
>   a2 = round (a1, scale (a1) - 2)
>   print `eps = $a1, rounded = $a2, diff = ${a1-a2}`
>   eps = a2
>   while eps > 0 && length (f) < 10 {
>      anprime = 1 / eps
>      an = floor (anprime)
>      f += an
>      print `f = $f`
>      a1 = anprime - an
>      a2 = round (a1, scale (a1) - 2)
>      print `eps = $a1, rounded = $a2, diff = ${a1-a2}`
>      eps = a2
>   }
>   f
>}
>f = [ 3 ]
>eps = 0.875, rounded = 0.9, diff = -0.025
>f = [ 3, 1 ]
>eps = 0.111111111111111111111111111111111, rounded = 0.1111111111111111111111111111111, diff = 0.000000000000000000000000000000011
>f = [ 3, 1, 9 ]
>eps = 0.0000000000000000000000000000009, rounded = 0.0000000000000000000000000000009, diff = 0
>f = [ 3, 1, 9, 1111111111111111111111111111111 ]
>eps = 0.111, rounded = 0.1, diff = 0.011
>f = [ 3, 1, 9, 1111111111111111111111111111111, 10 ]
>eps = 0, rounded = 0, diff = 0
>c1 = cf2(3.875) -> [ 3, 1, 9, 1111111111111111111111111111111, 10 ]
>f = [ 0 ]
>eps = 0.3333333333333333333333333333333333, rounded = 0.33333333333333333333333333333333, diff = 0.0000000000000000000000000000000033
>f = [ 0, 3 ]
>eps = 0.00000000000000000000000000000003, rounded = 0.00000000000000000000000000000003, diff = 0
>f = [ 0, 3, 33333333333333333333333333333333 ]
>eps = 0.33, rounded = 0.3, diff = 0.03
>f = [ 0, 3, 33333333333333333333333333333333, 3 ]
>eps = 0.333333333333333333333333333333333, rounded = 0.3333333333333333333333333333333, diff = 0.000000000000000000000000000000033
>f = [ 0, 3, 33333333333333333333333333333333, 3, 3 ]
>eps = 0.0000000000000000000000000000003, rounded = 0.0000000000000000000000000000003, diff = 0
>f = [ 0, 3, 33333333333333333333333333333333, 3, 3, 3333333333333333333333333333333 ]
>eps = 0.333, rounded = 0.3, diff = 0.033
>f = [ 0, 3, 33333333333333333333333333333333, 3, 3, 3333333333333333333333333333333, 3 ]
>eps = 0.333333333333333333333333333333333, rounded = 0.3333333333333333333333333333333, diff = 0.000000000000000000000000000000033
>f = [ 0, 3, 33333333333333333333333333333333, 3, 3, 3333333333333333333333333333333, 3, 3 ]
>eps = 0.0000000000000000000000000000003, rounded = 0.0000000000000000000000000000003, diff = 0
>f = [ 0, 3, 33333333333333333333333333333333, 3, 3, 3333333333333333333333333333333, 3, 3, 3333333333333333333333333333333 ]
>eps = 0.333, rounded = 0.3, diff = 0.033
>f = [ 0, 3, 33333333333333333333333333333333, 3, 3, 3333333333333333333333333333333, 3, 3, 3333333333333333333333333333333, 3 ]
>eps = 0.333333333333333333333333333333333, rounded = 0.3333333333333333333333333333333, diff = 0.000000000000000000000000000000033
>c2 = cf2(1 / 3) -> [ 0, 3, 33333333333333333333333333333333, 3, 3, 3333333333333333333333333333333, 3, 3, 3333333333333333333333333333333, 3 ]
