>Tests of the new LOOP construct
>
>Variables 'value', 'array', and 'SIZE' cleared.
>Precision is now “50” digits.
>value = 1 -> 1
>array = [] -> [ ]
>SIZE = 5 -> 5
>1
>2
>6
>24
>120
>720
>5040
>40320
>362880
>3628800
>39916800
>479001600
>6227020800
>87178291200
>1307674368000
>20922789888000
>355687428096000
>6402373705728000
>121645100408832000
>2432902008176640000
>51090942171709440000
>1124000727777607680000
>25852016738884976640000
>620448401733239439360000
>15511210043330985984000000
>array @j -> 
>[
>  [
>    1,
>    2,
>    6,
>    24,
>    120
>  ],
>  [
>    720,
>    5040,
>    40320,
>    362880,
>    3628800
>  ],
>  [
>    39916800,
>    479001600,
>    6227020800,
>    87178291200,
>    1307674368000
>  ],
>  [
>    20922789888000,
>    355687428096000,
>    6402373705728000,
>    121645100408832000,
>    2432902008176640000
>  ],
>  [
>    51090942171709440000,
>    1124000727777607680000,
>    25852016738884976640000,
>    620448401733239439360000,
>    15511210043330985984000000
>  ]
>]
>primes = [] -> [ ]
>start = 2 -> 2
>end = 102 -> 102
>length (primes) -> 26
>primes -> [ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101 ]
>i -> -2
>i -> -4
>i -> -6
>i -> -8
>i -> -10
>i -> 10
>i -> 9
>i -> 8
>i -> 7
>i -> 6
>i -> 5
>i -> 4
>i -> 3
>i -> 2
>__ -> "This"
>__ -> "is"
>__ -> "a"
>__ -> "test"
>__ -> "of"
>__ -> "the"
>__ -> "Emergency"
>__ -> "Broadcast"
>__ -> "System"
>Variable 'map' cleared.
>map = {a: 1, b: 2, c: 3, d: 17, f: 42} -> { a: 1, b: 2, c: 3, d: 17, f: 42 }
>`map.$_i = ${map[_i]}` -> "map.a = 1"
>`map.$_i = ${map[_i]}` -> "map.b = 2"
>`map.$_i = ${map[_i]}` -> "map.c = 3"
>`map.$_i = ${map[_i]}` -> "map.d = 17"
>`map.$_i = ${map[_i]}` -> "map.f = 42"
>Variable 'list' cleared.
>list = ['Once', 'upon', 'a', 'time', 'there', 'lived', 'a', 'princess', '...'] -> [ "Once", "upon", "a", "time", "there", "lived", "a", "princess", "..." ]
>i -> "Once"
>i -> "upon"
>i -> "a"
>i -> "time"
>i -> "there"
>i -> "lived"
>i -> "a"
>i -> "princess"
>i -> "..."
>Variable 'x' cleared.
>__ in x -> true
>__ in x -> true
>__ in x -> true
>__ in x -> true
>x -> [ 1, 2, 3, 4 ]
>_i -> 0.1
>_i -> 0.2
>_i -> 0.3
>_i -> 0.4
>_i -> 0.5
>_i -> 0.6
>_i -> 0.7
>_i -> 0.8
>_i -> 0.9
>_j -> 1
>_j -> 2
>_j -> 3
>_j -> 4
>_j -> 5
>_j -> 6
>_j -> 7
>_j -> 8
>_j -> 9
>_j -> 10
>_k -> 1
>_k -> 2.5
>_k -> 4
>_k -> 5.5
>_m -> 0.5
>_m -> 0.42
>_m -> 0.34
>_m -> 0.26
>_m -> 0.18
>_m -> 0.1
>_m -> 0.02
>_m -> -0.06
>_m -> -0.14
>_m -> -0.22
>_m -> -0.3
>_m -> -0.38
>_m -> -0.46
>Defining function “t(n)” = { case n of 1 .. 5: 'one to five', 6 .. 10: 'six to ten', default: 'other' }
>`$x: ${t(x)}` -> "0: other"
>`$x: ${t(x)}` -> "1: one to five"
>`$x: ${t(x)}` -> "2: one to five"
>`$x: ${t(x)}` -> "3: one to five"
>`$x: ${t(x)}` -> "4: one to five"
>`$x: ${t(x)}` -> "5: one to five"
>`$x: ${t(x)}` -> "6: six to ten"
>`$x: ${t(x)}` -> "7: six to ten"
>`$x: ${t(x)}` -> "8: six to ten"
>`$x: ${t(x)}` -> "9: six to ten"
>`$x: ${t(x)}` -> "10: six to ten"
>`$x: ${t(x)}` -> "11: other"
>`$x: ${t(x)}` -> "12: other"
>Defining function “t2(d)” = { case d of 0 .. 3.5, 0.5: 'halves under 3.5', 4.0 .. 4.5, 0.1: 'tenths of 4', default: 'other' }
>`$x: ${t2(x)}` -> "-1: other"
>`$x: ${t2(x)}` -> "-0.9: other"
>`$x: ${t2(x)}` -> "-0.8: other"
>`$x: ${t2(x)}` -> "-0.7: other"
>`$x: ${t2(x)}` -> "-0.6: other"
>`$x: ${t2(x)}` -> "-0.5: other"
>`$x: ${t2(x)}` -> "-0.4: other"
>`$x: ${t2(x)}` -> "-0.3: other"
>`$x: ${t2(x)}` -> "-0.2: other"
>`$x: ${t2(x)}` -> "-0.1: other"
>`$x: ${t2(x)}` -> "0: halves under 3.5"
>`$x: ${t2(x)}` -> "0.1: other"
>`$x: ${t2(x)}` -> "0.2: other"
>`$x: ${t2(x)}` -> "0.3: other"
>`$x: ${t2(x)}` -> "0.4: other"
>`$x: ${t2(x)}` -> "0.5: halves under 3.5"
>`$x: ${t2(x)}` -> "0.6: other"
>`$x: ${t2(x)}` -> "0.7: other"
>`$x: ${t2(x)}` -> "0.8: other"
>`$x: ${t2(x)}` -> "0.9: other"
>`$x: ${t2(x)}` -> "1: halves under 3.5"
>`$x: ${t2(x)}` -> "1.1: other"
>`$x: ${t2(x)}` -> "1.2: other"
>`$x: ${t2(x)}` -> "1.3: other"
>`$x: ${t2(x)}` -> "1.4: other"
>`$x: ${t2(x)}` -> "1.5: halves under 3.5"
>`$x: ${t2(x)}` -> "1.6: other"
>`$x: ${t2(x)}` -> "1.7: other"
>`$x: ${t2(x)}` -> "1.8: other"
>`$x: ${t2(x)}` -> "1.9: other"
>`$x: ${t2(x)}` -> "2: halves under 3.5"
>`$x: ${t2(x)}` -> "2.1: other"
>`$x: ${t2(x)}` -> "2.2: other"
>`$x: ${t2(x)}` -> "2.3: other"
>`$x: ${t2(x)}` -> "2.4: other"
>`$x: ${t2(x)}` -> "2.5: halves under 3.5"
>`$x: ${t2(x)}` -> "2.6: other"
>`$x: ${t2(x)}` -> "2.7: other"
>`$x: ${t2(x)}` -> "2.8: other"
>`$x: ${t2(x)}` -> "2.9: other"
>`$x: ${t2(x)}` -> "3: halves under 3.5"
>`$x: ${t2(x)}` -> "3.1: other"
>`$x: ${t2(x)}` -> "3.2: other"
>`$x: ${t2(x)}` -> "3.3: other"
>`$x: ${t2(x)}` -> "3.4: other"
>`$x: ${t2(x)}` -> "3.5: halves under 3.5"
>`$x: ${t2(x)}` -> "3.6: other"
>`$x: ${t2(x)}` -> "3.7: other"
>`$x: ${t2(x)}` -> "3.8: other"
>`$x: ${t2(x)}` -> "3.9: other"
>`$x: ${t2(x)}` -> "4: tenths of 4"
>`$x: ${t2(x)}` -> "4.1: tenths of 4"
>`$x: ${t2(x)}` -> "4.2: tenths of 4"
>`$x: ${t2(x)}` -> "4.3: tenths of 4"
>`$x: ${t2(x)}` -> "4.4: tenths of 4"
>`$x: ${t2(x)}` -> "4.5: tenths of 4"
>`$x: ${t2(x)}` -> "4.6: other"
>`$x: ${t2(x)}` -> "4.7: other"
>`$x: ${t2(x)}` -> "4.8: other"
>Defining function “tn(n)” = { case n of 5 .. 1, -1: 'five down to one', -1 .. -5, -1: 'negative 5 to 1', default: 'other' }
>`$x: ${tn(x)}` -> "6: other"
>`$x: ${tn(x)}` -> "5: five down to one"
>`$x: ${tn(x)}` -> "4: five down to one"
>`$x: ${tn(x)}` -> "3: five down to one"
>`$x: ${tn(x)}` -> "2: five down to one"
>`$x: ${tn(x)}` -> "1: five down to one"
>`$x: ${tn(x)}` -> "0: other"
>`$x: ${tn(x)}` -> "-1: negative 5 to 1"
>`$x: ${tn(x)}` -> "-2: negative 5 to 1"
>`$x: ${tn(x)}` -> "-3: negative 5 to 1"
>`$x: ${tn(x)}` -> "-4: negative 5 to 1"
>`$x: ${tn(x)}` -> "-5: negative 5 to 1"
>`$x: ${tn(x)}` -> "-6: other"
>Defining function “tm(d)” = { case d of -2.0 .. -2.5, -0.1: 'minus 2.5', 3.1 .. 2.8, -0.1: 'around three', default: 'other' }
>`$x: ${tm(x)}` -> "-3: other"
>`$x: ${tm(x)}` -> "-2.9: other"
>`$x: ${tm(x)}` -> "-2.8: other"
>`$x: ${tm(x)}` -> "-2.7: other"
>`$x: ${tm(x)}` -> "-2.6: other"
>`$x: ${tm(x)}` -> "-2.5: minus 2.5"
>`$x: ${tm(x)}` -> "-2.4: minus 2.5"
>`$x: ${tm(x)}` -> "-2.3: minus 2.5"
>`$x: ${tm(x)}` -> "-2.2: minus 2.5"
>`$x: ${tm(x)}` -> "-2.1: minus 2.5"
>`$x: ${tm(x)}` -> "-2: minus 2.5"
>`$x: ${tm(x)}` -> "-1.9: other"
>`$x: ${tm(x)}` -> "-1.8: other"
>`$x: ${tm(x)}` -> "-1.7: other"
>`$x: ${tm(x)}` -> "-1.6: other"
>`$x: ${tm(x)}` -> "-1.5: other"
>`$x: ${tm(x)}` -> "-1.4: other"
>`$x: ${tm(x)}` -> "-1.3: other"
>`$x: ${tm(x)}` -> "-1.2: other"
>`$x: ${tm(x)}` -> "-1.1: other"
>`$x: ${tm(x)}` -> "-1: other"
>`$x: ${tm(x)}` -> "-0.9: other"
>`$x: ${tm(x)}` -> "-0.8: other"
>`$x: ${tm(x)}` -> "-0.7: other"
>`$x: ${tm(x)}` -> "-0.6: other"
>`$x: ${tm(x)}` -> "-0.5: other"
>`$x: ${tm(x)}` -> "-0.4: other"
>`$x: ${tm(x)}` -> "-0.3: other"
>`$x: ${tm(x)}` -> "-0.2: other"
>`$x: ${tm(x)}` -> "-0.1: other"
>`$x: ${tm(x)}` -> "0: other"
>`$x: ${tm(x)}` -> "0.1: other"
>`$x: ${tm(x)}` -> "0.2: other"
>`$x: ${tm(x)}` -> "0.3: other"
>`$x: ${tm(x)}` -> "0.4: other"
>`$x: ${tm(x)}` -> "0.5: other"
>`$x: ${tm(x)}` -> "0.6: other"
>`$x: ${tm(x)}` -> "0.7: other"
>`$x: ${tm(x)}` -> "0.8: other"
>`$x: ${tm(x)}` -> "0.9: other"
>`$x: ${tm(x)}` -> "1: other"
>`$x: ${tm(x)}` -> "1.1: other"
>`$x: ${tm(x)}` -> "1.2: other"
>`$x: ${tm(x)}` -> "1.3: other"
>`$x: ${tm(x)}` -> "1.4: other"
>`$x: ${tm(x)}` -> "1.5: other"
>`$x: ${tm(x)}` -> "1.6: other"
>`$x: ${tm(x)}` -> "1.7: other"
>`$x: ${tm(x)}` -> "1.8: other"
>`$x: ${tm(x)}` -> "1.9: other"
>`$x: ${tm(x)}` -> "2: other"
>`$x: ${tm(x)}` -> "2.1: other"
>`$x: ${tm(x)}` -> "2.2: other"
>`$x: ${tm(x)}` -> "2.3: other"
>`$x: ${tm(x)}` -> "2.4: other"
>`$x: ${tm(x)}` -> "2.5: other"
>`$x: ${tm(x)}` -> "2.6: other"
>`$x: ${tm(x)}` -> "2.7: other"
>`$x: ${tm(x)}` -> "2.8: around three"
>`$x: ${tm(x)}` -> "2.9: around three"
>`$x: ${tm(x)}` -> "3: around three"
>`$x: ${tm(x)}` -> "3.1: around three"
>`$x: ${tm(x)}` -> "3.2: other"
>`$x: ${tm(x)}` -> "3.3: other"
>-2 -> negative
>-1 -> negative
>0 -> zero
>1 -> one
>2 -> two
>3 -> many
>4 -> many
>5 -> many
>Precision is now “10” digits.
>pi -> 3.141592654
>Precision is now “11” digits.
>pi -> 3.1415926536
>Precision is now “12” digits.
>pi -> 3.14159265359
>Precision is now “13” digits.
>pi -> 3.141592653590
>Precision is now “14” digits.
>pi -> 3.1415926535898
>Precision is now “15” digits.
>pi -> 3.14159265358979
>Precision is now “16” digits.
>pi -> 3.141592653589793
>Precision is now “17” digits.
>pi -> 3.1415926535897932
>Precision is now “18” digits.
>pi -> 3.14159265358979324
>Precision is now “19” digits.
>pi -> 3.141592653589793238
>Precision is now “20” digits.
>pi -> 3.1415926535897932385
>Precision is now “21” digits.
>pi -> 3.14159265358979323846
>Precision is now “22” digits.
>pi -> 3.141592653589793238463
>Precision is now “23” digits.
>pi -> 3.1415926535897932384626
>Precision is now “24” digits.
>pi -> 3.14159265358979323846264
>Precision is now “25” digits.
>pi -> 3.141592653589793238462643
>Precision is now “26” digits.
>pi -> 3.1415926535897932384626434
>Precision is now “27” digits.
>pi -> 3.14159265358979323846264338
>Precision is now “28” digits.
>pi -> 3.141592653589793238462643383
>Precision is now “29” digits.
>pi -> 3.1415926535897932384626433833
>Precision is now “30” digits.
>pi -> 3.14159265358979323846264338328
>Precision is now “31” digits.
>pi -> 3.141592653589793238462643383280
>Precision is now “32” digits.
>pi -> 3.1415926535897932384626433832795
>Precision is now “33” digits.
>pi -> 3.14159265358979323846264338327950
>Precision is now “34” digits.
>pi -> 3.141592653589793238462643383279503
>Precision is now “35” digits.
>pi -> 3.1415926535897932384626433832795029
>Precision is now “36” digits.
>pi -> 3.14159265358979323846264338327950288
>Precision is now “37” digits.
>pi -> 3.141592653589793238462643383279502884
>Precision is now “38” digits.
>pi -> 3.1415926535897932384626433832795028842
>Precision is now “39” digits.
>pi -> 3.14159265358979323846264338327950288420
>Precision is now “40” digits.
>pi -> 3.141592653589793238462643383279502884197
>Precision is now “34” digits.
>Bernoulli Numbers 0 to 60
>B(0) = 1 / 1
>B(1) = 1 / 2
>B(2) = 1 / 6
>B(4) = -1 / 30
>B(6) = 1 / 42
>B(8) = -1 / 30
>B(10) = 5 / 66
>B(12) = -691 / 2730
>B(14) = 7 / 6
>B(16) = -3617 / 510
>B(18) = 43867 / 798
>B(20) = -174611 / 330
>B(22) = 854513 / 138
>B(24) = -236364091 / 2730
>B(26) = 8553103 / 6
>B(28) = -23749461029 / 870
>B(30) = 8615841276005 / 14322
>B(32) = -7709321041217 / 510
>B(34) = 2577687858367 / 6
>B(36) = -26315271553053477373 / 1919190
>B(38) = 2929993913841559 / 6
>B(40) = -261082718496449122051 / 13530
>B(42) = 1520097643918070802691 / 1806
>B(44) = -27833269579301024235023 / 690
>B(46) = 596451111593912163277961 / 282
>B(48) = -5609403368997817686249127547 / 46410
>B(50) = 495057205241079648212477525 / 66
>B(52) = -801165718135489957347924991853 / 1590
>B(54) = 29149963634884862421418123812691 / 798
>B(56) = -2479392929313226753685415739663229 / 870
>B(58) = 84483613348880041862046775994036021 / 354
>B(60) = -1215233140483755572040304994079820246041491 / 56786730
>hexchars = chars '0123456789ABCDEF' -> [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F" ]
>teststring = '-.1234ABCDEFG_' -> "-.1234ABCDEFG_"
>(__ ∈ hexchars) ? `$__ is hex` : `$__ not hex` -> "- not hex"
>(__ ∈ hexchars) ? `$__ is hex` : `$__ not hex` -> ". not hex"
>(__ ∈ hexchars) ? `$__ is hex` : `$__ not hex` -> "1 is hex"
>(__ ∈ hexchars) ? `$__ is hex` : `$__ not hex` -> "2 is hex"
>(__ ∈ hexchars) ? `$__ is hex` : `$__ not hex` -> "3 is hex"
>(__ ∈ hexchars) ? `$__ is hex` : `$__ not hex` -> "4 is hex"
>(__ ∈ hexchars) ? `$__ is hex` : `$__ not hex` -> "A is hex"
>(__ ∈ hexchars) ? `$__ is hex` : `$__ not hex` -> "B is hex"
>(__ ∈ hexchars) ? `$__ is hex` : `$__ not hex` -> "C is hex"
>(__ ∈ hexchars) ? `$__ is hex` : `$__ not hex` -> "D is hex"
>(__ ∈ hexchars) ? `$__ is hex` : `$__ not hex` -> "E is hex"
>(__ ∈ hexchars) ? `$__ is hex` : `$__ not hex` -> "F is hex"
>(__ ∈ hexchars) ? `$__ is hex` : `$__ not hex` -> "G not hex"
>(__ ∈ hexchars) ? `$__ is hex` : `$__ not hex` -> "_ not hex"
>testnumbers = [17, 23, 14, 92, 87, 46, 18, 42] -> [ 17, 23, 14, 92, 87, 46, 18, 42 ]
>num in 20 .. 50 -> false
>num in 20 .. 50 -> true
>num in 20 .. 50 -> false
>num in 20 .. 50 -> false
>num in 20 .. 50 -> false
>num in 20 .. 50 -> true
>num in 20 .. 50 -> false
>num in 20 .. 50 -> true
>aft -> 0
>aft -> 1
>aft -> 2
>aft -> 3
>aft -> 4
>aft -> 5
>aft -> 6
>aft -> 7
>aft -> 8
>aft -> 9
>aft -> 10
>aft -> 15
>aft -> 16
>aft -> 17
>aft -> 18
>aft -> 19
>Defining variable “t23” = 3
>`odd t23 = $t23` -> "odd t23 = 5"
>`odd t23 = $t23` -> "odd t23 = 7"
>`odd t23 = $t23` -> "odd t23 = 9"
>`odd t23 = $t23` -> "odd t23 = 11"
>`odd t23 = $t23` -> "odd t23 = 13"
>Defining constant “KAPREKAR” = 6174
>Defining constant “START” = 3752
>Defining variable “num” = 3752
>Defining variable “iterations” = 0
>Defining variable “k0”
>Defining variable “k1”
>Defining variable “k2”
>Defining variable “num1”
>Defining variable “num2”
>k0 = chars (@@ num) -> [ "3", "7", "5", "2" ]
>k1 = sort (k0) -> [ "2", "3", "5", "7" ]
>k2 = sort (k0, SORT_DESCENDING) -> [ "7", "5", "3", "2" ]
>num1 = ~~ join (k1) -> 2357
>num2 = ~~ join (k2) -> 7532
>num = num1 > num2 ? num1 - num2 : num2 - num1 -> 5175
>++ iterations -> 1
>k0 = chars (@@ num) -> [ "5", "1", "7", "5" ]
>k1 = sort (k0) -> [ "1", "5", "5", "7" ]
>k2 = sort (k0, SORT_DESCENDING) -> [ "7", "5", "5", "1" ]
>num1 = ~~ join (k1) -> 1557
>num2 = ~~ join (k2) -> 7551
>num = num1 > num2 ? num1 - num2 : num2 - num1 -> 5994
>++ iterations -> 2
>k0 = chars (@@ num) -> [ "5", "9", "9", "4" ]
>k1 = sort (k0) -> [ "4", "5", "9", "9" ]
>k2 = sort (k0, SORT_DESCENDING) -> [ "9", "9", "5", "4" ]
>num1 = ~~ join (k1) -> 4599
>num2 = ~~ join (k2) -> 9954
>num = num1 > num2 ? num1 - num2 : num2 - num1 -> 5355
>++ iterations -> 3
>k0 = chars (@@ num) -> [ "5", "3", "5", "5" ]
>k1 = sort (k0) -> [ "3", "5", "5", "5" ]
>k2 = sort (k0, SORT_DESCENDING) -> [ "5", "5", "5", "3" ]
>num1 = ~~ join (k1) -> 3555
>num2 = ~~ join (k2) -> 5553
>num = num1 > num2 ? num1 - num2 : num2 - num1 -> 1998
>++ iterations -> 4
>k0 = chars (@@ num) -> [ "1", "9", "9", "8" ]
>k1 = sort (k0) -> [ "1", "8", "9", "9" ]
>k2 = sort (k0, SORT_DESCENDING) -> [ "9", "9", "8", "1" ]
>num1 = ~~ join (k1) -> 1899
>num2 = ~~ join (k2) -> 9981
>num = num1 > num2 ? num1 - num2 : num2 - num1 -> 8082
>++ iterations -> 5
>k0 = chars (@@ num) -> [ "8", "0", "8", "2" ]
>k1 = sort (k0) -> [ "0", "2", "8", "8" ]
>k2 = sort (k0, SORT_DESCENDING) -> [ "8", "8", "2", "0" ]
>num1 = ~~ join (k1) -> 288
>num2 = ~~ join (k2) -> 8820
>num = num1 > num2 ? num1 - num2 : num2 - num1 -> 8532
>++ iterations -> 6
>k0 = chars (@@ num) -> [ "8", "5", "3", "2" ]
>k1 = sort (k0) -> [ "2", "3", "5", "8" ]
>k2 = sort (k0, SORT_DESCENDING) -> [ "8", "5", "3", "2" ]
>num1 = ~~ join (k1) -> 2358
>num2 = ~~ join (k2) -> 8532
>num = num1 > num2 ? num1 - num2 : num2 - num1 -> 6174
>++ iterations -> 7
>Starting from 3752, sequence converged to Kaprekar's constant (6174) in 7 iterations.
>
>Done with LOOP tests.
