#
# Tests of IF, and CASE
#

# Test variables defined on the command line
verbose

:Clear
:Variables

define oddness={
   Case value%2 Of
    0: 'even',
    1: 'odd',
    Default: 'NOT POSSIBLE!'
}

value=27; oddness
value=30; oddness
value=-1; oddness

def oddness_if = {
   IF Abs(value%2) == 0
      'even'
   ELSE
      'odd'
}

value=23; oddness_if
value=14; oddness_if
value=pi; oddness_if

def multiples=
{
   case value of
      Default: { 'some other value' },
      7,14,21: { 'multiple of 7' },
      6,12,18: { 'multiple of 6' }
}

value=14; multiples
value=12; multiples
value=3; multiples

define match_arrays = {
   case value of {
      [ ]: {
         'empty array'
      },
      [ 1, 2 ]: {
         "one and two"
      },
      default: {
         'some other array'
      }
   }
}

value=[]; match_arrays
value=[1,2]; match_arrays
value=[3,4,5]; match_arrays

define strings = {
   case upper(value) of
      "ONE": 1,
      "TWO": 2,
      "THREE" : 3.14,
      default: "many"
}

value='one'; strings
value='Two'; strings
value='THREE'; strings
value="zero"; strings

define fieldType(typeid) = {
    case typeid of {
	4: ' TEXT',
	7: 'LABEL',
	19,
	default,
	23: `$typeid`
    }
}
fieldType(4);fieldType(7);fieldType(23);fieldType(19);fieldType(99)
'type: ' + fieldType(4)

def srt(a1, a2, f) = { f(a1, a2) > 0 ? a1 : a2 }

#
# New "case" syntax
#
define precision_to_directive = {
  case settings.precision of {
    0 : ':unlimited',
    1,2,3,4,5,6,
    8 ... 15,1,
    17 .. 33 : `:dec ${settings.precision}`,
    7 : ':float',
    16: ':double',
    34: ':default',
    default: `:decimal(${settings.precision})`
  }
}

old_precision = settings.precision
loop over 0..40 { :dec __; precision_to_directive }
settings.precision = old_precision
precision_to_directive

test_string = 'abababc'
case test_string of {
  matches '(ab){3}.': 'match',
  default: 'not a match'
}

define test(a) = {
  case a of {
    0: 'zero',
    1: 'one',
    3: 'three',
    default: next,
    4: 'even'
  }
}

loop v within 5 { test(v) }

define power(n) = {
  var result = 1;
  case n of {
    20: { result *= n; next },
    19: { result *= n; next },
    18: { result *= n; next },
    17: { result *= n; next },
    16: { result *= n; next },
    15: { result *= n; next },
    14: { result *= n; next },
    13: { result *= n; next },
    12: { result *= n; next },
    11: { result *= n; next },
    10: { result *= n; next },
     9: { result *= n; next },
     8: { result *= n; next },
     7: { result *= n; next },
     6: { result *= n; next },
     5: { result *= n; next },
     4: { result *= n; next },
     3: { result *= n; next },
     2: { result *= n; next },
     1: { result *= n; next }
  }
  result
}

loop f over 20 { power(f) }

def sign(value) = {
  case value of {
    < 0: -1,
   == 0: 0,
    > 0: +1
  }
}
sign(-23)
signum(-23)
sign(0.0)
signum(0.0)
sign(0.01)
signum(0.01)

def m(v) = {
   case v of {
      matches "abc", 1: 'this is abc',
      matches "def", 1: 'and def',
      default: 'something else!'
   }
}
m("ABC")
m("abc")
m("Def")
m("def")
m("junk")

#
# Using functions for objects
#
w = { universal: true }
def u = { "universal" }
def v = { w }
v().`$u`
v().`$u` = 127
v()

# Test input arguments
$#
$*
$0;$4
$*[2]
$5

# Solutions taken from https://en.wikipedia.org/wiki/Sums_of_three_cubes
# and here: https://www.uni-math.gwdg.de/jahnel/Arbeiten/Liste/threecubes_20070419.txt
define sum_of_cubes(x, y, z, sum) = { x**3 + y**3 + z**3 == sum }
:dec 400 {
sum_of_cubes(1214928, 3480205, -3528875, 2)
sum_of_cubes(37404275617, -25282289375, -33071554596, 2)
sum_of_cubes(3737830626090, 1490220318001, -3815176160999, 2)
sum_of_cubes(1, 1, 1, 3)
sum_of_cubes(4, 4, -5, 3)
sum_of_cubes(569936821221962380720, -569936821113563493509, -472715493453327032, 3)
sum_of_cubes(4207039164926, 3980702370479, -5161892429569, 6)
sum_of_cubes(8866128975287528, -8778405442862239, -2736111468807040, 33)
sum_of_cubes(-80538738812075974, 80435758145817515, 12602123297335631, 42)
sum_of_cubes(-284650292555885, 66229832190556, 283450105697727, 74)
sum_of_cubes(-14219049725358227, 14197965759741571, 2337348783323923, 795)
sum_of_cubes(8832050461219, -4404654595589, -8450650557413, 993)
}

