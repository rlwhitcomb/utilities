#
# Testing new looping construct
#
:echo "Tests of the new LOOP construct"
:echo

:clear [i, j, value, array, SIZE ]
:dec 50
value = 1
array = []
SIZE = 5
:resultsonly on
loop $i in SIZE {
   loop $j in SIZE {
      array[$i-1][$j-1] = value++!
   }
}
:resultsonly pop
array@j

primes = []
start = 2; end = 102;
:quiet on
loop $i in start .. end { isprime($i) ? primes[length(primes)] = $i : "" }
:quiet previous
length(primes); primes;

loop $i in -10 .. -2, -2 { $i }
loop $i in -2 .. -10, -2 { $i }
loop $i in 10 .. 2, -1 { $i }
loop $i in 10 .. 20, -1 { $i }
loop $i in -2 .. -10 { $i }

loop ( 'This', 'is', 'a', 'test', 'of', 'the', 'Emergency', "Broadcast", "System" ) { $_ }

:clear map
map = { a:1, b:2, c:3, d:17, f:42 }
loop $i in map { `map.$$i = ${map[$i]}` }

:clear list
list = [ 'Once', 'upon', 'a', 'time', 'there', 'lived', 'a', 'princess', '...' ]
loop $i in list {$i}

loop $i in 0.1 .. 0.9, 0.1 { $i }
loop $j in 10.5 {$j}
loop $k in 5.5, 1.5 {$k}
loop $m in 0.5 .. -0.5, -0.08 {$m}

loop $p âˆˆ 10...40 { :dec $p; pi }
:default

:echo "Bernoulli Numbers 0 to 60"
:resultonly on
:rational on
`B(0) = ${bn 0}`
`B(1) = ${bn 1}`
loop $b in 2 .. 60, 2 { `B($$b) = ${bn $b}` }
:rational pop
:resultonly pop


:echo
:echo "Done with LOOP tests."

