#
# Testing new looping construct
#
:echo "Tests of the new LOOP construct"
:echo

:clear [j, k, value, array, SIZE ]
:dec 50
value = 1
array = []
SIZE = 5
:resultsonly on {
  loop _i in SIZE {
    loop _j in SIZE {
      array[_i-1][_j-1] = value++!
    }
  }
}
array@j

primes = []
start = 2; end = 102;
:quiet on {
  loop _i_ in start .. end { isprime(_i_) ? primes[length(primes)] = _i_ : "" }
}
length(primes); primes;

loop _i in -10 .. -2, -2 { _i }
loop _i in -2 .. -10, -2 { _i }
loop _i in 10 .. 2, -1 { _i }
loop _i in 10 .. 20, -1 { _i }
loop _i in -2 .. -10 { _i }

loop ( 'This', 'is', 'a', 'test', 'of', 'the', 'Emergency', "Broadcast", "System" ) { __ }

:clear map
map = { a:1, b:2, c:3, d:17, f:42 }
loop _i in map { `map.$_i = ${map[_i]}` }

:clear list
list = [ 'Once', 'upon', 'a', 'time', 'there', 'lived', 'a', 'princess', '...' ]
loop _i in list {_i}

loop _i in 0.1 .. 0.9, 0.1 { _i }
loop _j in 10.5 {_j}
loop _k in 5.5, 1.5 {_k}
loop _m in 0.5 .. -0.5, -0.08 {_m}

loop _p ∈ 10...40 { :dec _p; pi }
:default

:echo "Bernoulli Numbers 0 to 60"
:resultonly on {
  :rational on {
    :quotestrings off {
`B(0) = ${bn 0}`
`B(1) = ${bn 1}`
loop b in 2 .. 60, 2 { `B($b) = ${bn b}` }
    }
  }
}

hexchars = split '0123456789ABCDEF', ''
teststring = '-.1234ABCDEFG_'
loop over teststring { (__ ∈ hexchars) ? `$__ is hex` : `$__ not hex` }

testnumbers = [ 17, 23, 14, 92, 87, 46, 18, 42 ]
loop num over testnumbers { num in 20..50 }

:echo
:echo "Done with LOOP tests."

