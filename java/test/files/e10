#
# Testing new looping construct
#
:echo "Tests of the new LOOP construct"
:echo

:clear [j, k, value, array, SIZE ]
:dec 50
value = 1
array = []
SIZE = 5
:resultsonly on {
  loop i in SIZE {
    loop j in SIZE {
      array[i-1][j-1] = value++!
    }
  }
}
array@j

primes = []
start = 2; end = 102;
:quiet on {
  loop _i_ in start .. end { isprime(_i_) ? primes[length(primes)] = _i_ : "" }
}
length(primes); primes;

loop i in -10 .. -2, -2 { i }
loop i in -2 .. -10, -2 { i }
loop i in 10 .. 2, -1 { i }
loop i in 10 .. 20, -1 { i }
loop i in -2 .. -10 { i }

loop ( 'This', 'is', 'a', 'test', 'of', 'the', 'Emergency', "Broadcast", "System" ) { __ }

:clear map
map = { a:1, b:2, c:3, d:17, f:42 }
loop _i in map { `map.$_i = ${map[_i]}` }

:clear list
list = [ 'Once', 'upon', 'a', 'time', 'there', 'lived', 'a', 'princess', '...' ]
loop i in list {i}

loop _i in 0.1 .. 0.9, 0.1 { _i }
loop _j in 10.5 {_j}
loop _k in 5.5, 1.5 {_k}
loop _m in 0.5 .. -0.5, -0.08 {_m}

def t(n) = { case n of 1..5: 'one to five', 6..10: 'six to ten', default: 'other' }
loop x over 0..12 { `$x: ${t(x)}` }
def t2(d) = { case d of 0 .. 3.5, 0.5: 'halves under 3.5', 4.0 .. 4.5, 0.1: 'tenths of 4', default: 'other' }
loop x over -1.0 .. 4.8, 0.1 { `$x: ${t2(x)}` }
define tn(n) = { case n of 5..1,-1: 'five down to one', -1..-5,-1: 'negative 5 to 1', default: 'other' }
loop x over 6..-6,-1 { `$x: ${tn(x)}` }
define tm(d) = { case d of -2.0 .. -2.5, -0.1: 'minus 2.5', 3.1 .. 2.8, -0.1: 'around three', default: 'other' }
loop x over -3.0 .. 3.3, 0.1 { `$x: ${tm(x)}` }

:quiet on {
define test(value) = {
   if value < 0 "negative"
   else if value == 0 "zero"
   else if value == 1 "one"
   else if value == 2 "two"
   else "many"
}
}

:resultsonly on { loop v over -2 .. 5 `$v -> ${test(v)}`@q }

loop p ∈ 10...40 { :dec p; pi }
:default

:echo "Bernoulli Numbers 0 to 60"
:resultonly on {
  :rational on {
    :quotestrings off {
`B(0) = ${bn 0}`
`B(1) = ${bn 1}`
loop b in 2 .. 60, 2 { `B($b) = ${bn b}` }
    }
  }
}

hexchars = chars '0123456789ABCDEF'
teststring = '-.1234ABCDEFG_'
loop over teststring { (__ ∈ hexchars) ? `$__ is hex` : `$__ not hex` }

testnumbers = [ 17, 23, 14, 92, 87, 46, 18, 42 ]
loop num over testnumbers { num in 20..50 }

loop aft within 20 { if aft > 10 && aft < 15 next; aft }

var t23 = 3
while t23++ < 13 {
   if t23 % 2 == 0 next
   `odd t23 = $t23`
}

:echo
:echo "Done with LOOP tests."

