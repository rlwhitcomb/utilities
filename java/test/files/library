:quiet on
/*
 * Convert one of our dates to an Excel date serial number
 * where 1/1/1900 is considered day 1 (BUT 1900 is also considered
 * [erroneously] as a leap year)
 * From here: https://docs.microsoft.com/en-us/office/troubleshoot/excel/determine-a-leap-year
 * "However, in order to be compatible with other programs, Microsoft Excel treats the year 1900 as a leap year."
 *
 * @param $date The input date value
 * @return      The Excel date serial number, where 1/1/1900 is 1
 */
def excel_date($date) = { $date < D'3/1/1900' ? $date - D'1/1/1900' + 1 : $date - D'1/1/1900' + 2 }

/*
 * Convert one of our dates to an Excel date serial number using the 1904 system
 * where 1/1/1904 is considered day 0
 *
 * @param $date The input date value
 * @return      The Excel 1904-system date serial number, where 1/1/1904 is 0
 */
def excel_date_1904($date) = { $date - D'1/1/1904' }

/*
 * Convert radians to degrees: 2*pi = 360, so radians / pi * 180 = degrees
 *
 * @param $rad The input radians value
 * @return     Computed degrees
 */
def rad_to_deg($rad) = { $rad / pi * 180 }

/*
 * Convert degrees to radians: 2*pi = 360, so degrees / 180 * pi = radians
 *
 * @param $deg The input degrees value
 * @return     Computed radians
 */
def deg_to_rad($deg) = { $deg / 180 * pi }

/*
 * Get the day of week name for a given date.
 *
 * @param $date The input date value.
 * @return      The day name ("Sunday" .. "Saturday").
 */
_day_names_  = [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ]
def dow_name($date) = { _day_names_ [ dow($date) ] }

/*
 * Get the month name for a given date.
 *
 * @param $date The input date value.
 * @return      The month name ("January" .. "December").
 */
_month_names_ = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ]
def moy_name($date) = { _month_names_ [ moy $date - 1 ] }

/*
 * Get the long form of a date.
 * From D'2/1/1980' -> Friday, February 1, 1980
 *
 * @param $date The input date value.
 * @return      The long string representation of the date.
 */
def long_date($date) = { `${dow_name($date)}, ${moy_name($date)} ${dom($date)}, ${yod($date)}` }

/*
 * Compute the flat map of an array.
 *
 * @param $arr The input array.
 * @return     The flat map of that array.
 */
def flat_map($arr) = { eval `[${join $arr, ','}]` }

/*
 * Determine if a given number is a "perfect" number - equal to the sum of
 * all its positive divisors, excluding itself.
 * Note: the first few perfect numbers are: 6, 28, 496, and 8128.
 *
 * @param $n The test value.
 * @return   true/false if the number is perfect.
 */
define is_perfect($n) = { sumof ( factors ($n) ) - $n == $n }

/*
 * Solve the quadratic formula to find the roots of a general
 * quadratice equation: a*x**2 + b*x + c = 0.
 * x = (-b +- sqrt(b**2 - 4 * a * c))/2*a
 *
 * @param $a
 * @param $b
 * @param $c
 * @return [ x1, x2 ] if solution is real, error if not
 */
define quad($a, $b, $c) = { _b2 = $b * $b; _2a = 2 * $a; _r = (_b2 - 4 * $a * $c); if _r < 0 { sqrt(_r) } else { [ (-$b + sqrt(_r))/_2a, (-$b - sqrt(_r))/_2a ] } }

:quiet pop
