#
# M = P[r(1+r)^n/((1+r)^n)-1)]
#
#  M = the total monthly mortgage payment
#  P = the principal loan amount
#  r = your monthly interest rate. Lenders provide you an annual rate
#      so you'll need to divide that figure by 12 (the number of month
#      in a year) to get the monthly rate. If your interest rate is 5%,
#      your monthly rate would be 0.004167 (0.05/12=0.004167).
#  n = number of payments over the loan's lifetime. Multiply the number
#      of years in your loan term by 12 (the number of months in a year)
#      to get the number of total payments for your loan. For example,
#      a 30-year fixed mortgage would have 360 payments (30x12=360).
#

#
# grammar is PMT obj
# where "obj" has P, r or R, n or N
# where r = monthly rate, R = yearly rate
#   and n = months, N = years
#

# Note: this particular example comes from
# https://www.bankrate.com/calculators/mortgages/mortgage-calculator.aspx

# The context for the payment calculation is:
#    P = full principal amount to be financed
#    R = yearly interest rate (%)
# or r = monthly interest rate (%/12)
#    N = number of years
# or n = number of months (N*12)
# Then the calculated values are:
#   rate = monthly interest as a decimal value (% / 100 / 12)
#   num = number of months (years * 12)
:quiet on
define PMT($ctx) = {
  # Setup the context object, given the P, R, r, N, and n values are already set
  ctx = { P: P, R: R, r: r, N: N, n: n }

  ctx.rate = (ctx.R ? (ctx.R / 12) : ctx.r) / 100
  ctx.num = (ctx.N ? (ctx.N * 12) : ctx.n)
  ctx

  # Calculate the intermediate values (which are reused)
  r_n = (1 + ctx.rate) ** ctx.num
  r_r_n = ctx.rate * r_n
  r_n_1 = r_n - 1

  # Now the final monthly payment value
  ctx.P * (r_r_n / r_n_1)
}

def help_mort = { "\nUsage: P=<present value>; R=<yearly interest rate (%)> or r=<monthly interest %>; N=<number of years> or n=<number of months>\nThen use one of PMT, PMT_M, monthly or monthly_whole to get the results in different forms." }

# Note: the 2nd param is the number of fractional digits (after the decimal point)
# regardless of the number of whole digits in the result; so "0" will round
# to a whole dollar, "2" rounds to pennies.
def PMT_M($ctx) = { round(PMT, 2) }

def monthly = { `Full monthly payment is \$${PMT_M}` }
def monthly_whole = { `Monthly payment in whole dollars is \$${round (PMT, 0)}` }
:quiet pop
