/*
 * Tests of the expression engine in Calc.
 */
print "Starting expression tests (suite 1)."
print

# Simple version check ...
# version 2.3.0 was first version where these checks would work, and 2.4.11 is where versioninfo -> info.version
info.version.major > 2 ||
    (info.version.major == 2 && info.version.minor > 4) ||
    (info.version.major == 2 && info.version.minor == 4 && info.version.patch >= 11)
$requires 2.45.0, base 1.12.3

# Various simple expressions
$decimal(50)
52+27
3.4 + 5
34 + 5 @x

pi
phi
Φ
1/phi == PHI
1/PHI == phi
PHI+1 == phi
$rational on {
  phi
  PHI
  phi@d
}

$decimal 989 {
  $rational on {
    pf = phi
  }
  pd = phi
  pd - ~~pf
}

# Tests of rational pi
loop pre over 1..26 {
   $decimal pre
   $rational on { ratpi = pi }
   ~~ratpi == pi
}

$decimal(50)
sin(pi/3)
4 & 7
true && false
(1+2) * (3+4)
$Double
atan2(4, 5)
14/7;12/4;13/9
a = 1; b = 2; a+b;
a<=>b; a<=b; b<a; 1>2; 2>=1;
$DEFAULT
1.2+3.4
1/7
settings.precision
$decimal 18
settings.precision
e
a
$clear a,b
a
a = b = c = 27; a+b; b+c
e

# Now some string tests
name = 'Roger'
"This isn't a number"
'This ' + "isn't" + " a number"
'This isn\'t either, ' + name
'\u0000\u0001\u0002\u0003\u0004\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f\u0020\u0021'
'\0\ca\cB\cy\cZ\f\t\b\r\n\\\u007f\u0080\u0081'
raw = s"abc
	def
		ghi
"
codes(raw)

# Other operators and functions
$decimal 60
s = sqrt(17);
t = s * s;
t = 17**0.5
t * t
u = 12!
v = cbrt(u)
v*v*v-u
u**(1/3)
t⁸
3⁶

_This_is_a_very_long_variable_name_Which_not_surprisingly_is_not_worth_remembering_1_ = sqrt 42
++ _This_is_a_very_long_variable_name_Which_not_surprisingly_is_not_worth_remembering_1_

$clear [ _This_is_a_very_long_variable_name_Which_not_surprisingly_is_not_worth_remembering_1_ ]
_This_is_a_very_long_variable_name_Which_not_surprisingly_is_not_worth_remembering_1_

# Factorial tests
72!
-5!
-8!
1/7!

# Special tests of the "fib" function
fib 27
fib 0
fib 1
fib 2
fib 3
fib 5
fib -1
fib -2
fib -6
fib 200
oldPrec = settings.precision
settings.precision = 100
sum = 0
$quiet on { loop f over 100..200 { sum += fib(f) } }
sum
$dec oldPrec

# Trig and log functions
J0 = 1; ++J0; J0;
K0 = 2; K0++; K0;
$double
pi / 2
asin ( sin ( pi / 2 ) )
pi/4
acos(cos(pi/4))
pi/3
atan(tan(pi/3))
b = -27; c = 0; d = 153;
signum b; signum c; signum d;
length b; length c; length d;
scale b; scale c; scale d;
h = 23
h2 = ln(h)
e**h2
epow(h2)
m = 10000
n = log(m)
10**n
tenpow(n)
p = ln2(1000000)
2**p
$default
isprime 15485863
t31=((2**31-1)**2)-1
isprime (t31)
p31=pfactors(t31)
productof p31
// Fibonacci primes!
isprime(2, 3, 5, 13, 89, 233, 1597, 28657, 514229, 433494437, 2971215073)

isnull junk
notnull junk
notnull h2
j2=nil
isnull j2
notnull j2
notnull n
j3=␀
isnull j3
notnull j3
NotNull p

upper typeof p
g1 = 'A strong message'
upper g1
lower g1
g2=['abc', 'Def', "gHI"]; upper(g2); lower g2
g3 = { b: 'This', c: 'is', d: 'crazy' }; upper(g3); lower(g3)
$ignore on { upper g3; lower g3 }
g4 = { b: "abc", c: [ "an", "Upper", "way" ], d: { c: "over", f: "One" } }
upper g4
$ignore on { upper g4 }

$clear j7
j7["help"] = 42
j7

typeof "abc"
typeof null
typeof PHI
typeof(1.2)
$rational on
typeof(½)
$rational pop
typeof(tenpow(5))
typeof(false)
typeof(info)
typeof info.version
typeof info.version.major
typeof(info.version.prerelease)
typeof(info.locale.weekdays)
typeof(info.timezone)
typeof(info.cpu.maxmemory)
# Note: these will both be "integer" for now, until we figure out how to differentiate them
typeof(D'9/11/2001')
typeof(now)
def junk_func = { 'junk' }
typeof(junk_func)
typeof(junk_func())

cast(null)
cast(1, 'string')
cast("23", 'float')
cast("true", 'boolean')
cast(10**n)
cast(1, 'array')
cast("abc", 'object')
cast(3, 'null')
cast([1,2,3], 'array')
cast({ a:'123' }, 'object')
cast(null, 'object')
$clr junk
junk=[1,2,3]
cast(junk[0], 'function')
typeof(_junk5b05d)
$var _junk5b05d

info.version.major is integer
info.locale.name is "string"
info.cpu.cores is "integer"
info.version is object
info.locale.weekdays is `array`

settings.trigMode
$degrees
settings.trigMode

sin(45)
cos(60)
asin(sin(50))
acos(cos(30))
atan(tan(15))

$rad
settings.trigMode
$dec 60
π
a = sin(π/4)
b = a * 2
c = b*b
round b, 14
round(a, 10)
round a, -2
round c, 0

$grad
settings.trigMode
cos(100)
sin(300)
asin(0.5)

$radians

v = 1621.94397520429

$resultonly on {
loop -10 .. 10 { `round to $__ -> ${round(v, __)}` }
random(123)
loop over 20 { random }
}

sin(2700)
sin -(4*pi)

# Min, max, gcd, and lcm tests
min 1, -1, 27, -300, 18.5, -300.5
max 'abc', 'ghi', "ABC", "012"

min(-27)
max(2.4)
min(-3,-5)
max(1,3,5,2,8,9,11,4,6)

gcd(25, 10)
gcd(27*2, 3*9*18)
gcd([14,28,42,84])

lcm(6, 10)
lcm -20, 30
lcm(7,13,21,26)

max('123', 456, 789)
min(123, '-1', '14')

# Integer division
ty=47
ty\13
ty\=6
10\3
5\6

# "mod" and remainder operators
21 % 4
21 mod 4
-21 % 4
-21 mod 4
-21 % -4
-21 mod -4
21 % -4
21 mod -4

$frac on {
g1 = 2/3
g2 = 9/7
g1 % g2
g1 mod g2
-g1 % g2
-g1 mod g2
g1 % -g2
g1 mod -g2
-g1 % -g2
-g1 mod -g2
}

# Bit and logical operators
127 | 128
15 & 7
31 ^ 10

0b110011 ∪ 0b101010 @b
0b110011 ∩ 0b101010 @b

0b0011 ~& 0b0101 @b
0b0011 ~| 0b0101 @b
0b0011  ^ 0b0101 @b
~0b0110 @b
0b0011 ~^ 0b0101 @b
0x3FF &~ 0xFF0 @X

585@-x
585@-b
585@-o
585@x
585@b
585@o

'abc' != "ABC" && 0 <> 1

false ^^ false
false ^^ true
true ^^ false
true ^^ true

Not false
NOT true

false Or false
false or true
true OR false
true or true

false And false
false AND true
true and false
true and true

false Xor false
false xor true
true XOR false
true xor true

u1 = true; u2 = false
u1 & u2
u1 | u2
u1 ^ u2
u1 &~ u2
u1 ~& u2
u1 |~ u2
u1 ~| u2
u1 ^~ u2
u1 ~^ u2

0b1 & 0b1000 != 0
0b1 & 0b1 != 0

A=1;B=2
A==1||A==2&&B==1
A==1&&A==2||B==1

0xFFFF ^ 0xAAAA @X
012
10 @o
0b1010101010 @x
0x2aa @b
~ 0x7FFF @X
~ 0x7FFF @o
~ 0x7FFF @b
255 @o
123 @b
$quotestrings off {
f1 = `${'def' @o}`
f2 = `${'abc' @b}`
f3 = `${'Hello' @X}`
}
eval f1;eval f2;eval f3

eval('def fu1(n) = n')
eval('const co1 = 2')
eval('var va1 = 3')

t1=5.9
t2=-6.2
ceil(t1);ceil(t2)
ceil(0);ceil(10e22)
floor(t1);floor(t2)
floor(0);floor(1.2e9)

# The "join" operator
$clear this, hello, handsome, rude
this = join('This', 'is', 'a', 'test', ' ');
hello = join('Hello', "World!", ', ');
handsome = join("Hello ", "handsome.");
rude = join "RUDE!"
length this; length hello; length handsome; length rude;

'[' + join (1, 2, 3, 4, 5, ', ') + ']'

# The "split" function
target = 'this is the day'
split target, ' '
split(target,' ',2)
target = 'boo:and:foo'
split target, ':', 2
split(target, ':', 5)
split(target, ':', -2)
split(target, 'o', 5)
split(target, 'o', -2)
split target, 'o'
split 1.2, '\\.'
c9 = " a   b d   c   e   f "
print 'pieces =', split(trim(c9), '\\s+') @Q

# The "index" operator
$clear target, one, two, three
target = 'This is an "index" test.'
one = index target, 'is'
two = index target, 'is', one+1
three = index target, 'test', -1
index(target, 'junk')
index(target, 'more junk', -1)
index 1.2, '2'
st2 = 'abcdefg'
loop j within length(st2) { index(st2, st2[j], -1) + length(st2) == j }
ar2 = [ 1, 2, 3, 4 ]
loop j within length(ar2) { index(ar2, ar2[j], -1) + length(ar2) == j }
ob2 = { o1: 2, o2: 'off', o3: false }
loop j over ob2 { index(ob2, j, -1) + length(ob2) }
ob2['o2']
ob2[2]
length(ob2)
loop within length(ob2) { ob2[__] }
loop j over ob2 { ob2[j] }
loop key over ob2 { index(ob2, key) }

t8 = [ 2, 3, 5, 7, 11, 13, 17, 19, 21, 23, 29, 31 ]
notnull(index(t8, 22-1, -1))

# Binary "search" operator
# (Note: input must be sorted for this to work properly)
const sentence = "this is a very good time to be properly aware of the consequences of our actions"
const words = unique(sort(split(sentence, " ")))
search(words, "time")
search(words, "fortune")
search(words, "good", 4)
search(words, "our", -5)
search(words, "a", , -2)
search(words, "a", -2, -1)
search(words, "the", 3, )

const teststring = "abcdefg"
search(teststring, "c")
search(teststring, "i")
search(teststring, "e", 1, 4)

# The "substr" and "slice" operators
one = substr(target, 4)
two = substr(target, 11, 7)
three = substr(target, index(target, 'test', -1))
target[index(target, '"', 0) : index(target, '"', -1) + 1]
substr 1.234, 1, 2
target[-1: -3]
target[:-1]
target[index(target, " is") + 1 : index(target, "test") - 1]
tar = 'abc'
tar[-2: -1]
tar[null: -1]
substr tar, -2, null
substr tar, -1
tar[1: -1]
substr tar
const find1 = " is "
substr(target, index(target, find1), length(find1))

# The "replace" function in all of its options
tl = 'tell teal tail teel toil tool toll'
tm = 'abcabc'
replace(tl, 't(..)l', 't$1b', all)
replace tl, 't..l', 'test', first
replace tl, 't..l', 'test', last
replace tl, 't', 'b'
replace tl, 't', , first
r1 = [ 'tell', 'teal', 'tail', 'teel', 'toil', 'tool', 'toll' ]
replace(r1, 't(..)l', "t$1b", all)
replace tm, 'b'
replace tm, 'c',
replace(tm, 'a', , last)

# Make sure the option keywords still work as variable names
all = 1; first = 2; last=7; all+first-last
on = true; off ='OFF'; prev = 12; previous = 15; yes = 'really'; no = 'fat chance'; pop = 27
on; off; prev; previous; yes; no; pop

# Slice notation
n = [ 1, 2, 3, 4, 5 ]
n[2:-1]
target[-5:]
n[2:]
n[2:null]
n[:3]
n[null:3]
n[2:3]

# Splice function
s1 = [ 1, 2, 3 ]
splice(s1, 1, 0, 5, 6)
s1
s2 = [ "This", "is", "a", "test" ]
splice s2, 2, 1, "an", "important", "little"
s2
s3 = { a:1, b:true, c:'tree', d:14 }
splice s3, [ b, c ], { f: 'def', g: 'green' }
s3
$sortobjects on {
  s4 = { d:12, b:14, a:2, g:7, f: 3 }
  splice s4, [b, d], { c: 9 }
  s4
}

# Trim functions
funny_string = ' \t\f  \r\n   345  \f  \t \r\n  '
trim funny_string
ltrim funny_string
rtrim funny_string
trim (1.2 + " ")
t1 = [ " abc", " def  ", "ghi   " ]
t2 = { a: "  a b c ", b: '   def', c: 'ghi   ', d: t1 }
trim t1; ltrim t1; rtrim t1
trim t2; ltrim t2; rtrim t2

# The "fill" function
arr_n = []
fill arr_n, 0, 10
fill arr_n, 1, 2, 3
fill arr_n, 3, 12, 4

str_b = ''
fill(str_b, '=', 25)
fill(str_b, '-', 0, 3)
fill(str_b, '-', 22, 3)

# Tiny tests of "formatstring"
formatstring('%1$s, %2$s!', 'Hello', 'World')
formatstring("Rate is %1$8.6f", 12.34567)
formatstring('Name: %1$-20s, Age: %2$5d', 'Agnes Brown', 97)
formatstring("%02d", yod(d'2022-05-20') % 100)

# "scan" function
str12 = "Latest version: 23"
var num
scan(str12, 'Latest version: %i', num)
num
str22 = '1 2 3'
var a1, a2, a3
scan(str22, '%d %d %d', a1, a2, a3)
a1;a2;a3
str47 = "Author: John Doe"
var auth = ''
scan(str47, "Author: %s", auth)
auth
str33='a,b,c'
var ch1,ch2,ch3
scan(str33, '%c,%c,%c', ch1,ch2,ch3)
ch1;ch2;ch3
str34='25.2% discount'
var disc
scan(str34, '%d%% discount', disc)
str15='first\nsecond\nthird'
scan(str15, '%s%s%s', ch1, ch2, ch3)
ch1;ch2;ch3
str22='a\nb\nd'
scan(str22, '%c%n%c%n%c', ch1,ch2,ch3)
ch1;ch2;ch3
str42='(52)'
scan(str42, '(%d)', disc)

# The "pad" functions
arr_m = [ 10 ]
pad(arr_m, 10, -1)
lpad(arr_m, 15, -2)
rpad(arr_m, 17, 20)
pad(arr_m, 23)
arr_m

str_c = '#'
rpad(str_c, 9, '>')
lpad(str_c, 18, '<')
pad(str_c, 24, '_')
pad(str_c, 30)
str_c

# The "reverse" function
palin = 'Was it a car or a cat I saw'
reverse(palin)
arr_m = [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
reverse arr_m
arr_m

# The "unique" function
u1 = "aaabbaacceeeffccdd"
unique u1
u2 = chars u1
unique u2

# The "sort" function
a1 = [ 4, 3, 1, 2, -1, 5, -10 ]
a2 = [ "abc", "Abc", "aBc", "abC" ]
a3 = [ "abc", "DEF", "Abc", "def", "1.1.0", "1.10.0", "1.2.0" ]
a4 = [ { b: 20}, {b: 10}, {b:0}, {b:1}, {b:100}, {b:-1} ]
a1 = sort a1
a1
sort(a2)
a2
sort(a2, true)
sort a3
sort a3, SORT_CASE_INSENSITIVE
sort a3, false
sort a4

# Precedence of compare / equal operators
1 < 2 == 3 > 4
1 == '1' > 2 != '2'

# Special tests of the strict equality vs. equality operations
1 === '1'
1 == '1'

! true
a
! (a == null)

# "to boolean" operator
!! null
!! ''
!! 0
!! 1
!! 'abc'

# "to number" operator
~~false
~~true
~~'1'
~~'1.234'
~~('1'+'2')
~~(1/2)
num1 = [ "14", "-43.5", 18 ]
num2 = { "-25", "10", "42" }
num3 = { a1: 34, a2: "845", a3: "-56" }
~~num1
~~num2
~~num3

-num1
+num2
-num3

# "to string" operator
@@null
@@123
@@pi
@@(1/2)
@@frac(1,3)
@@(1,1)
@@info.locale.weekdays

# JavaScript compatible string -> boolean operations

!foundset.username
foundset.username=''
!foundset.username
foundset.username='Don'
!foundset.username
!!foundset.username

# Testing operations a various precisions
$decimal 200 { 1/7 }
$decimal 30 { 1/9 }
$decimal 50 { pi }
$decimal 10000 { e }

# The formatting operations
$binary
1024**2@k
$ten
1000**4@k
$mixed
1024**3@k
2000**10@K

100MB
2EB
2EiB
900KB@k
300PB
450PiB
320Yb @K

$binary { settings.units }
$si { settings.units }

$decimal 50 { settings.precision }
$default { settings.precision }
$double { settings.precision }

$degrees { settings.trigMode }

10! @w
500 + 40 + 7 @W
2**128@w
10**3000@w
10**12012@W
1492@,w
100101@_w
2**32@w
2**32@+w

0.125@2%
0.1234567@4%

20! + 0.5@2,$
1500@$

'abc'@+20s
'def'@-20s
'ghi'@20s

print

# Rational mode pre/post inc/dec
$rational true {
fr1 = 5/6
++fr1
--fr1
fr2 = 15/7
fr2++
fr2--
fr2--
fr2@F
}

//
// Now, start on the array and object stuff
//
a = [1, 2, 3]
a[0] = 4
a[1] = 5
a
a[3] = 10
a
a₀
a₂
length a; scale a;

b = null
b[2] = 'abc'
b
b[0] = 'ABC'
b

c = null
c.d = true
c.f = 1.2
c.g = "Begin"
c."key" = 'end'
c
length c; scale c;

d = [ 1, { start:1, end: 2 }, { px:0, py:0}, "Area" ]
d
d[0] = 2; d[1].start = 3; d[2].py = 4; d[3] = "Bounding " + d[3];
d@j
length d; scale d;
$quote off { d@-j }

f = { coords: [1, 1, 4, 5], name: "box" }
f@0.4j

# The ternary operator
1 == 2 ? 'impossible'
       : 'correct'
2! < 2**2
   ? 'true'
   : 'not likely'
x = 7; y = 8
_min = min_plus_1 = x < y ? x + 1 : y + 1
_min

null ?: 'nothing'
'' ?: 'empty'
'a' ?: 'no a'
0 ?: 1
true ?: 'not true'

desc = 'heading'
desc ?! `${desc @20s}`
'' ?! 'funny'
true ?! 'TRUTH'
false ?! 'oops! true'

y = x = 7 + 1
y; x;

$clear m
m[0] = m[1] = m[2] = 3;
m
$clear n
n.a = 'First'; n.b = 123; n.c = false;
n

# Interpolated strings
$clear a
a = 128
` a is $a, b isn't $a`
`a + 1 = ${a + 1}`
`5! = ${5!} !!`
`g$$`
`a = ${a@x}`
`a = ${a@%}`
`a = ${a@k}`

# The various assignment operators
$clr [g,h,p,s]
$dec(200)
g = 271; h = 385; p = 192; s = 120!
g+=h
p-=g
h*=g
p/=g
s %= 10**40;
s
g = 0377@o; g&=0177@o
h = 0x400@x; h|=0x080@o
p = 0xaaa@x; p^=0x554@x
g@o; h@x; p@x;
g = 0x4000@x
g >>>= 3@x
g >>= 2@x
g<<=2@x
g@x

var1, var2 = 27, 33
var1, var2 = var2, var1
var1; var2

vara = [ 1, 2, 3, 4, 5, 6 ]
vara[1], vara[-2] = vara[-2], vara[1]
vara
vara[0], vara[1], vara[2] = vara[-1], vara[-2], vara[-3]
vara

# Operations on parts of arrays and objects
a = { b : [ 1, 2, 3 ], c : { d: 1, f: true, g: 'abcd' } } 
a
++a.b[1]
a.b
a.c.d++
a
a.c.d++
a
a.b[2] = a.b[0] + a.c.d
a
a.c.h = a.c.g + ": " + `a.b[2] = ${a.b[2]}`
a@4j
length a; scale a.b;

r = ∅; s = ⦰
length r; length s
r == s

format = 'abcdefg'
format[1] = 'z'
format[2] = 'y'
format[3] = 'xw'
format[8] = 'new'
format

b = [ [ [ 1,2], [3,4], [5, 6]]]
b[0][0][1] = 11
b[1] = [ [ 7,9], [0,1], [3,4] ]
b@-j
length b; scale b; length b[1];

$sortobjects on {
  o9 = { h: 12, g:9, f:17, d:3, a:4, c:-1 }
  o9 += { b: 3 }
}

$def
p = {b:2, c: { d:true }, `"e"`:e }
p@j
length p; scale p;
print "Elements of p:"
$result on {
loop _p ∈ p { `name: $_p, value: ${p[_p]}` }
}

#
# "CHARS" and "CODES" functions
#
codes 'abc'
chars 'abc'
codes 123
chars '123'
loop codes(123) __
loop chars('123') {__}
loop codes "⅛34" __
loop chars "⅛34" {__}

#
# Sets
#
set1 = {}
typeof set1
set1 += { 2 }
typeof set1
set1 += 2
set1 += { 3 }
set1 += { 1, 2 }
length set1
scale set1
3 within set1
0 in set1
index(set1, 2)
set1[1]

A = {1,2,3,4,5,6}
B = {3,4,5,6,7,8}
A\B
B\A
A | B
A ∪ B
A ⋃ B
A & B
A ⋂ B
A ∩ B

ChessClub = { 'John', 'Emma', 'Sarah', 'Michael' }
DramaClub = { 'Emma', 'Michael', 'Olivia', 'Ethan' }

ChessClub ∪ DramaClub
ChessClub ∩ DramaClub

X = {11, 12, 13, 14, 15}
Y = {10, 12, 14, 16, 18}
Z = {7, 9, 11, 14, 18, 20}
X-Y-Z
Y-X-Z
Z-X-Y

X-[12, 13, 14]
Z-{a:7, b:9}
Z\{}

#
# Fractions
#
$rational on
4/5 < 7/9
1/3 * 4/5@f
(7/11) / (9/5)
"5 3/8" * "4 1/4"@F
(4/6)⁹
u = 1/2
u **= -2
u**=-2
u**= -2
u**=-2
frac u

#
# Bernoulli numbers
#
bn 0
bn 1
bn -1
bn 2
bn 20
bn 126
$rational pop

#
# Tests of functions
#
$clear a
def a={ loop i in 10 { i }}
a
eval a

#
# Tests of Roman Numerals
#
r = R'MCMLXII'
s = r'ⅿⅽⅿⅼⅹⅶ'

1962 @R
1954 @-r

roman('xx' + 'ii')

#
# Time and duration constants, expressions, and formats
#
t'27h' + t'13m' + t'27.9s' @h
h'12:30 pm' - h'11:45 am' @mt
h'8:30 am' + t'1h' + t'37m' @h
t'3.0002s' @-5mt
h'12:10am' - t'20m' @-ah

#
# Date calculations
#
d'990101' - d'980101'
d'21/5/16' - d'99/12/31'
d'1941/12/7' + 1000@e
d'-01000101'
-756052@e
d'990101'
10592@e
d'000101'@e
d'500101'@e
d'49/01/01'@e
d'-9999/01/01'@e
D'01-01--9999'@E
d'9999/12/31'@e
d911 = D'9/11/01'
d911@e;d911@E
D'1/1/1999'@e
_waterloo = d'1815/6/18'
_waterloo@e;_waterloo@-E

toDate('2022-7-2', 'yyyy-m-d')
ToDate('2022-07-02', 'yyyy-m-d')
todate('2022-07-02', 'yyyy-mm-dd')
TODATE('20220702', 'yyyymmdd')
todate('220702', 'yymmdd')
ToDate('7/2/-22', 'd-m-yy')
TODATE('7-2--2022', 'd-m-yyyy')
todate('-1100-02-03', "")
todate(17802)@E
ToDate(join(['2018', '09', '28'], '-'))@-e
todate(6,30,2020)
toDate(12,31,1999)
dt9 = '01-02-22'
ToDate(dt9, 'm-d-y')@e
ToDate(dt9, 'm-d-yy')@e

b1 = 1.2
b2 = 1/7
b3 = pi
b4 = 19!
b1a = toBase(b1, 4)
b2a = ToBase(b2, 6)
b3a = TOBASE(b3, 27)
b4a = tobase(b4, 36)
b1b = fromBase(b1a, 4)
b2b = fromBase(b2a, 6)
b3b = FromBase(b3a, 27)
b4b = FROMBASE(b4a, 36)
b1b-b1
b2b-b2
b3b-b3
b4b-b4

#
# Play around with "," formatting
#
pi**20@,d
pi@,d
200!@,d
10e-9@,d
nanosperday=24*60*60*1e9@,d

$sep on {
nanosperday
$clear m
n = [ 1e10, 2<<15, 42! ]
m = { p:15!, q:3**12, r:pi**15, s:n }
`1^10 = ${1e10}`
}

#
# New Unicode math symbols
#
➖2
t=10
➖➖t
➕3
➕➕t
t➖➖
t➕➕
t➖3
t➕3
t➗4
t✖5
t✕3
t∗2
t÷3
t∕4

#
# New Unicode number symbols
#
０
①
⓯
𝟦
⑳
⒇
⒚

#
# Base64 encode/decode
#
encode ('This is a Base64 test.')
decode "VGhpcyBpcyBhIEJhc2U2NCB0ZXN0Lg=="
arr1 = [1,2,3]
enc1 = encode arr1
arr2 = eval(decode enc1)
arr1 === arr2
p1 = encode pi
p2 = eval(decode p1)
pi === p2

#
# "const" declarations
#
const two_pi = 2*pi
sin(two_pi)
two_pi/pi
const NULLISH = null
NULLISH

#
# "var" declarations (non-local)
#
var v1 = 10
v1**5
v1 = 20
v1**6
var v2
v2
v2 = 'three sheets'
v2 += ' to the wind'
v2
$clear v1, v2

#
# "matches" function
#
input_string = 'This is the day'
matches(input_string, '.+is is.+')
matches(input_string, '^.+day$')
matches(input_string, '.*way')
input_array = ["ab", "aba", "baa", "cab", "dab", "ghi", "jkl", "abab"]
matches(input_array, '.*ab.*')
input_object = [
  { fname: 'John', mname: 'L', lname: 'Smith', addr1: '123 Main St', addr2: '', city: 'Anytown', state: 'OH' },
  { fname: 'Mary', mname: 'S', lname: 'Jones', addr1: '1515 Elm Ave', addr2: '', city: 'Maytown', state: 'MD' },
  { fname: 'Cecile', mname: 'R', lname: 'Mayshawn', addr1: '14235 Sierra Rd', addr2: 'Rte 17 Box 12', city: 'Rural', state: 'OR' }
]
matches(input_object, '.+name')@j
input_set = { "John Smith", "Mary Smith", "Jane Smith", "Bob Smith", "Fred Jones", "Alicia Jones" }
matches(input_set, '.+smith', MATCH_CASE_INSENSITIVE)
set_name = 'Jane Smith'
set_name in input_set
matches('abc\ndef', 'abc.def', MATCH_DOTALL)
matches('abcdef', 'abc.ef', MATCH_LITERAL)

#
# Defining functions inside blocks
#
$default
loop j over settings.precision {
  define help(n) = 10 ** -n
  $decimal j
  help(j)
}

define Truth(v) = {
  if v "T" else "F"
}

Truth({})
Truth("")
Truth([])
Truth({ d: false })
Truth([ 45 ])
Truth(null)
Truth("a")
Truth("false")
Truth("F")
Truth("no")
Truth("off")
Truth(settings)

#
# "has" operator
#
emptyset = {}
emptyset has [0]
emptyset has [-1]
info has cpu
info has ["os"]
list=[1,2,3]
list has [2]
list has [3]
list has [-2]
{ a: 23, b:4, c:19 } has c
[] has [0]
[] has [-1]
'duck' in { 'duck', 'duck', 'goose' }
{ 'duck', 'duck', 'goose' } has [1]
{ 'duck', 'duck', 'goose' } has [2]

#
# difference between "has" and "in"
#
c12 = { a:1, b:{d:23, '"e"': 2.718, f: { g:true, h:'def' } } }
c12 has a
c12 has b
c12 has d
c12 has '"e"'
c12 has f
c12 has g
c12 has h
"a" in c12
"b" in c12
'"e"' in c12
'"e"' in c12.b
"g" in c12
"g" in c12.b.f

#
# Tests of "in" with loops
#
12 in 1..12
12 in 1..10
12 in 1..20, 2
12 in 0..20, 2
-12 in 0..-20, -2
-12 in -1..-20, -2
-12.0 in 0.0 .. -20.0, -2.0
-12.0 in -1.0 .. -20.0, -2.0

#
# Tests of "sumof" and "productof"
#
sumof 1..30
var sumoftest = 0
$quiet on { loop over 1..30 sumoftest += __ }
sumoftest
SumOf [ 4, 5, 6, 7, 8, 9, 10 ]
sumOf 4..10
4+5+6+7+8+9+10
sumof 4..10,2
4+6+8+10
$rational on { sumof 3/4, 5/9, 17/8, 4/3 }
sumof i, 2, 7, 3*i
sumof 2*k, j, 17, i
ProductOf 10
ProductOf 2..10
2*3*4*5*6*7*8*9*10
productOf 9..10
productof [ 3, 5, 7, 9, 11 ]
ProductOf 3..11,2
$ration on { productof 3/5, 5/6, 7/8, 8/9 }
ProductOf 3*k + 5*i + 4*j, 9

#
# "arrayof" tests, especially with dot ranges
#
arr3 = arrayof 10..20,2
arrayof arr1, arr2, arr3

#
# Test read/write, especially of Unicode data
#
const UTF_8 = 'utf-8'
const UNI2  = 'uni2'
$quiet on {
   uni1 = read('test/data/unicode.txt': UTF_8)
   write(uni1, UNI2: UTF_8)
   uni2 = read(UNI2: UTF_8)
   delete UNI2
}
`Test of read/write/read of Unicode data = ${uni1 === uni2}`
$quiet on {
   exec('gunz', 'test/data/ExportCSV.csv.gz')
   data = read('test/data/ExportCSV.csv')
   exec('gz', 'test/data/ExportCSV.csv')
}
`Test of read of large file: length = ${length(data)@,d}`

#
# "exists" function
#
exists('VersionRef.json')
exists('test/files', 'd')
exists('junk', 'fw')
info.os.id == "windows" ? exists('verify_calc.bat', "fx+") : exists('verify_calc', "fx+")
path = '../Java'
exists(path, 'd+')
info.os.id == "linux" ? exists(lower(path), 'd') : exists(path, 'd')

#
# "findfiles" function
#
FindFiles('.', 'latest*', 'fx')
findFiles('.', '*.java')
findfiles('test', 'd*', 'fr*~')

# "delete" function
delete 'alpha.beta', 'delta.gamma', 'alpha.omega'

# "fileinfo" function and result object
fileinfo('build.xml').name

# "rename" function
const FILE1 = '_ftest_.beta'
const FILE2 = '_gtest_.zeta'
$quiet on { delete FILE1, FILE2 }

write('test data', FILE1)
$quiet on { rename(FILE1, FILE2) }
read(FILE2)

delete(FILE2)

const PROPS = 'test.properties'
props = { a:false, b:123, c:"def" }
writeProperties(props, PROPS)
pr2 = readproperties(PROPS);
pr2 == props
pr2 === props

delete(PROPS)

define y3 = { const t71=71 }
y3()
define y4 = { const t27 = 27, t38 = 38 }
y4()
define z22 = { var h18, h29, b32 }
z22()
define z09 = { var b22 }
z09()
var a27, a38 = 7!, a92

print
print "End of expression tests (suite 1)."

