$Require '2.44.0'
$Requires '2.44.0', Base '1.12.3'
// Calc latest version is in "version.properties", base version is in "build.properties"

/*
 * A series of functions that provide some added value to Calculator.
 */

/*
 * The system-defined line ending.
 */
const EOL = info.os.linesep

/*
 * Pattern for splitting lines no matter the line ending.
 */
const LINESEP = '\r?\n'

/*
 * Whether we are running on Windows vs. something else.
 */
const ON_WINDOWS = info.os.id == 'windows'

/*
 * The local timezone offset from GMT (nanoseconds).
 */
const TZ_OFFSET = eval(info.timezone.offset)

/*
 * Just for fun
 */
const GOOGOL = 10⌃100

/*
 * Flag values for "sort"
 */
const SORT_CASE_INSENSITIVE = 0x0001
const SORT_SORT_KEYS        = 0x0002
const SORT_DESCENDING       = 0x0004

/*
 * Flag values for "matches"
 */
const MATCH_CASE_INSENSITIVE = 0x0001
const MATCH_DOTALL           = 0x0002
const MATCH_UNICODE_CASE     = 0x0004
const MATCH_LITERAL          = 0x0008
const MATCH_MULTILINE        = 0x0010
const MATCH_UNIX_LINES       = 0x0020

/*
 * Color tags
 */
const RESET   = "<r>"
const CLOSE   = "<.>"
const END     = "<-->"

const EXPR         = "<x>"
const EXPR_QUOTE   = "<y>"
const VALUE        = "<v>"
const VALUE_QUOTE  = "<u>"
const ARROW        = "<a>"
const ERROR        = "<e>"
const ERROR_BRIGHT = "<f>"

const BLACK   = "<Bk>"
const RED     = "<Rd>"
const GREEN   = "<Gr>"
const YELLOW  = "<Yw>"
const BLUE    = "<Bl>"
const MAGENTA = "<Mg>"
const CYAN    = "<Cy>"
const WHITE   = "<Wh>"

const BLACK_BOLD   = "<Bk*>"
const RED_BOLD     = "<Rd*>"
const GREEN_BOLD   = "<Gr*>"
const YELLOW_BOLD  = "<Yw*>"
const BLUE_BOLD    = "<Bl*>"
const MAGENTA_BOLD = "<Mg*>"
const CYAN_BOLD    = "<Cy*>"
const WHITE_BOLD   = "<Wh*>"

const BLACK_UNDER   = "<Bk_>"
const RED_UNDER     = "<Rd_>"
const GREEN_UNDER   = "<Gr_>"
const YELLOW_UNDER  = "<Yw_>"
const BLUE_UNDER    = "<Bl_>"
const MAGENTA_UNDER = "<Mg_>"
const CYAN_UNDER    = "<Cy_>"
const WHITE_UNDER   = "<Wh_>"

const BLACK_BKGND   = "<Bk.>"
const RED_BKGND     = "<Rd.>"
const GREEN_BKGND   = "<Gr.>"
const YELLOW_BKGND  = "<Yw.>"
const BLUE_BKGND    = "<Bl.>"
const MAGENTA_BKGND = "<Mg.>"
const CYAN_BKGND    = "<Cy.>"
const WHITE_BKGND   = "<Wh.>"

const BLACK_BRIGHT   = "<Bk!>"
const RED_BRIGHT     = "<Rd!>"
const GREEN_BRIGHT   = "<Gr!>"
const YELLOW_BRIGHT  = "<Yw!>"
const BLUE_BRIGHT    = "<Bl!>"
const MAGENTA_BRIGHT = "<Mg!>"
const CYAN_BRIGHT    = "<Cy!>"
const WHITE_BRIGHT   = "<Wh!>"

const BLACK_BOLD_BRIGHT   = "<Bk*!>"
const RED_BOLD_BRIGHT     = "<Rd*!>"
const GREEN_BOLD_BRIGHT   = "<Gr*!>"
const YELLOW_BOLD_BRIGHT  = "<Yw*!>"
const BLUE_BOLD_BRIGHT    = "<Bl*!>"
const MAGENTA_BOLD_BRIGHT = "<Mg*!>"
const CYAN_BOLD_BRIGHT    = "<Cy*!>"
const WHITE_BOLD_BRIGHT   = "<Wh*!>"

const BLACK_UNDER_BRIGHT   = "<Bk_!>"
const RED_UNDER_BRIGHT     = "<Rd_!>"
const GREEN_UNDER_BRIGHT   = "<Gr_!>"
const YELLOW_UNDER_BRIGHT  = "<Yw_!>"
const BLUE_UNDER_BRIGHT    = "<Bl_!>"
const MAGENTA_UNDER_BRIGHT = "<Mg_!>"
const CYAN_UNDER_BRIGHT    = "<Cy_!>"
const WHITE_UNDER_BRIGHT   = "<Wh_!>"

const BLACK_BKGND_BRIGHT   = "<Bk.!>"
const RED_BKGND_BRIGHT     = "<Rd.!>"
const GREEN_BKGND_BRIGHT   = "<Gr.!>"
const YELLOW_BKGND_BRIGHT  = "<Yw.!>"
const BLUE_BKGND_BRIGHT    = "<Bl.!>"
const MAGENTA_BKGND_BRIGHT = "<Mg.!>"
const CYAN_BKGND_BRIGHT    = "<Cy.!>"
const WHITE_BKGND_BRIGHT   = "<Wh.!>"

/*
 * Convert one of our dates to an Excel date serial number
 * where 1/1/1900 is considered day 1 (BUT 1900 is also considered [erroneously] as a leap year).
 * From here: https://docs.microsoft.com/en-us/office/troubleshoot/excel/determine-a-leap-year
 * "However, in order to be compatible with other programs, Microsoft Excel treats the year 1900 as a leap year."
 *
 * @param date The input date value
 * @return     The Excel date serial number, where 1/1/1900 is 1
 */
def excel_date(date) = date < D'3/1/1900' ? date - D'1/1/1900' + 1 : date - D'1/1/1900' + 2

/*
 * Convert one of our dates to an Excel date serial number using the 1904 system
 * where 1/1/1904 is considered day 0.
 *
 * @param date The input date value
 * @return     The Excel 1904-system date serial number, where 1/1/1904 is 0
 */
def excel_date_1904(date) = date - D'1/1/1904'

/*
 * Helpers for the Excel column conversion code.
 */
const _A_ = codes('A')
const _Z_ = codes('Z')
const _BASE_ = _Z_ - _A_ + 1

/*
 * Convert a numeric Excel column index (1..16384) into a regular column name ("A" .. "XFD").
 *
 * @param index The numeric column index to convert.
 * @return      The column name.
 *
 * Algorithm taken from example given here:
 * https://stackoverflow.com/questions/181596/how-to-convert-a-column-number-e-g-127-into-an-excel-column-e-g-aa
 */
define to_excel_col(idx) = {
   var col = ''
   var ix = idx - 1
   while ix >= 0 {
      col = chars(_A_ + ix % _BASE_) + col
      ix = ix \ _BASE_ - 1
   }
   col
}

/*
 * Convert an Excel column name ("A" .. "XFD") to a numeric column index (1..16384).
 *
 * @param col The column name to convert.
 * @return    The numeric index of the column.
 */
define from_excel_col(col) = {
   if length(col) == 1 {
      codes(upper(col)) - _A_ + 1
   }
   else {
      var idx = 0
      loop c over codes(upper(col)) {
         idx = idx × _BASE_ + (c - _A_ + 1)
      }
   }
}

/*
 * Convert radians to degrees: 2 × pi = 360, so radians / pi × 180 = degrees
 *
 * @param rad The input radians value
 * @return    Computed degrees
 */
def rad_to_deg(rad) = rad / pi × 180

/*
 * Convert degrees to radians: 2 × pi = 360, so degrees / 180 × pi = radians
 *
 * @param deg The input degrees value
 * @return    Computed radians
 */
def deg_to_rad(deg) = deg / 180 × pi

/*
 * Convert radians to gradians (centesimal degrees): 2 × pi = 400, so radians / pi × 200 = gradians
 *
 * @param rad The input radians value
 * @return    Computed gradians
 */
def rad_to_grad(rad) = rad / pi × 200

/*
 * Convert gradians to radians: 2 × pi = 400, so gradians / 200 × pi = radians
 *
 * @param grad The input gradians value
 * @return     Computed radians
 */
def grad_to_rad(grad) = grad / 200 × pi

/*
 * Convert gradians to degrees: 400 = 360, so gradians / 10 × 9 = degrees
 *
 * @param grad The input gradians value
 * @return     Computed degrees
 */
def grad_to_deg(grad) = grad / 10 × 9

/*
 * Convert degrees to gradians: 360 = 400, so degrees / 9 × 10 = gradians
 *
 * @param deg The input degrees value
 * @return    Computed gradians
 */
def deg_to_grad(deg) = deg / 9 × 10

/*
 * Convert degrees Fahrenheit to degrees Celsius.
 *
 * @param f Degrees in Fahrenheit (32 = freezing point of water)
 * @return  Equivalent in degrees Celsius.
 */
def FtoC(f) = (f - 32) × 5 / 9

/*
 * Convert degrees Celsius to degrees Fahrenheit.
 *
 * @param c Degrees in Celsius (0 = freezing point of water)
 * @return  Equivalent in degrees Fahrenheit.
 */
def CtoF(c) = (c × 9 / 5) + 32

/*
 * The basic English to/from metric length conversion (defined).
 */
const MM_PER_INCH = 25.4

/*
 * The exact English to/from metric mass conversion.
 */
const GM_PER_OZ = 28.349523125

/*
 * Exact volume conversion from cubic inches to cubic cm.
 */
const IN3_PER_CM3 = (MM_PER_INCH / 10)³

/*
 * Exact value of cubic inches per gallon.
 */
const IN3_PER_GAL = 231

/*
 * Derived constant for feet / m conversions.
 */
const MM_PER_FOOT = MM_PER_INCH × 12

/*
 * Derived constant for mile / km conversions.
 */
const MM_PER_MILE = MM_PER_FOOT × 5280

/*
 * Constant for converting acres to square feet / yards.
 * 22 yards to a "chain" and 10 chains to a "furlong";
 * And an acre is one furlong by one chain.
 */
const SQFT_PER_ACRE = (22×3)² × 10

/*
 * Convert millimeters to inches.
 *
 * @param mm Number of millimeters.
 * @return   Equivalent number of inches.
 */
define mm_to_in(mm) = mm / MM_PER_INCH

/*
 * Convert inches to millimeters.
 *
 * @param inch Number of inches to convert.
 * @return     Equivalent number of millimeters.
 */
define in_to_mm(inch) = inch × MM_PER_INCH

/*
 * Convert centimeters to inches.
 *
 * @param cm Number of centimeters.
 * @return   Equivalent number of inches.
 */
define cm_to_in(cm) = cm × 10 / MM_PER_INCH

/*
 * Convert inches to centimeters.
 *
 * @param inch Number of inches to convert.
 * @return     Equivalent number of centimeters.
 */
define in_to_cm(inch) = inch × MM_PER_INCH / 10

/*
 * Convert meters to feet.
 *
 * @param m Number of meters to convert.
 * @return  Equivalent number of feet.
 */
define m_to_ft(m) = (m × 1e3) / MM_PER_FOOT

/*
 * Convert feet to meters.
 *
 * @param ft Number of feet to convert.
 * @return   Equivalent number of meters.
 */
define ft_to_m(ft) = (ft × MM_PER_FOOT) / 1e3

/*
 * Convert kilometers to miles.
 *
 * @param km Number of kilometers to convert
 * @return   Corresponding number of miles
 */
define km_to_mile(km) = (km × 1e6) / MM_PER_MILE

/*
 * Convert miles to kilometers.
 *
 * @param mi Number of miles to convert
 * @return   Corresponding number of kilometers
 */
define mile_to_km(mi) = (mi × MM_PER_MILE) / 1e6

/*
 * Convert grams to ounces.
 *
 * @param gm Number of grams to convert.
 * @return   Equivalent number of avoirdupois ounces.
 */
define gm_to_oz(gm) = gm / GM_PER_OZ

/*
 * Convert ounces to grams.
 *
 * @param oz Number of avoirdupois ounces to convert.
 * @return   Equivalent in grams.
 */
define oz_to_gm(oz) = oz × GM_PER_OZ

/*
 * Convert kilograms to pounds.
 *
 * @param kg Number of kilograms to convert.
 * @return   Equivalent mass in pounds.
 */
define kg_to_lb(kg) = (kg × 1e3) / (GM_PER_OZ × 16)

/*
 * Convert pounds to kilograms.
 *
 * @param lb Number of pounds to convert.
 * @return   Equivalent mass in kilograms.
 */
define lb_to_kg(lb) = (lb × 16 × GM_PER_OZ) / 1e3

/*
 * Convert milliliters to pints (US fluid).
 *
 * @param ml Number of milliliters (cm^3) to convert.
 * @return   Equivalent volume in US fluid pints.
 */
define ml_to_pt(ml) = (ml × 8) / (IN3_PER_CM3 × IN3_PER_GAL)

/*
 * Convert US fluid pints to milliliters.
 *
 * @param pt Number of pints to convert.
 * @return   Equivalant volume in millliters (ml).
 */
define pt_to_ml(pt) = (pt × IN3_PER_GAL × IN3_PER_CM3) / 8

/*
 * Convert acres to square feet.
 *
 * @param acre Number of acres to convert.
 * @return     Number of square feet in that many acres.
 */
define acre_to_sqft(acre) = acre × SQFT_PER_ACRE

/*
 * Convert square feet to acres.
 *
 * @param sqft Number of square feet to convert.
 * @return     Equivalent number of acres.
 */
define sqft_to_acre(sqft) = sqft / SQFT_PER_ACRE


/*
 * Define a dynamic constant that refers to one day ago ("yesterday").
 *
 * @return today - 1
 */
define yesterday = today - 1

/*
 * Define a dynamic constant that refers to the next day ("tomorrow").
 *
 * @return today + 1
 */
define tomorrow = today + 1

/*
 * Define a constant that refers to a time of midnight.
 */
const midnight = h'12:00am'

/*
 * Define a constant that refers to a time of noon.
 */
const noon = h'12:00pm'

/*
 * Get the day of week name for a given date.
 *
 * @param date The input date value.
 * @return     The day name ("Sunday" .. "Saturday").
 */
def dow_name(date) = info.locale.weekdays [ dow(date) ]

/*
 * Get the month name for a given date.
 *
 * @param date The input date value.
 * @return     The month name ("January" .. "December").
 */
def moy_name(date) = info.locale.months [ moy(date) - 1 ]

/*
 * Get the long form of a date.
 * From D'2/1/1980' -> Friday, February 1, 1980
 *
 * @param date The input date value, defaults to "today" if omitted.
 * @return     The long string representation of the date.
 */
def long_date(date = today) = `${dow_name(date)}, ${moy_name(date)} ${dom(date)}, ${yod(date)@_d}`

/*
 * Adjust a two-digit ("short") year to a 4-digit year value, based on the
 * same algorithm as DateUtil.adjustShortYear (used by "todate").
 *
 * @param year A 2-digit year value from 0 - 99
 * @return     The year adjusted to 4 digits.
 */
def adjust_short_year(year) = {
   const cutoverYear = yod(today) % 100 + 30
   year < cutoverYear ? year + 2000 : year + 1900
}

/*
 * For time values, number of ticks (nanoseconds) in a second.
 */
const TICKS_PER_SECOND = 1e9
/*
 * For time values, the number of ticks in a minute.
 */
const TICKS_PER_MINUTE = TICKS_PER_SECOND × 60
/*
 * For time values, the number of ticks in an hour.
 */
const TICKS_PER_HOUR = TICKS_PER_MINUTE × 60
/*
 * For time values, the number of ticks in a day.
 */
const TICKS_PER_DAY = TICKS_PER_HOUR × 24
/*
 * Number of seconds in a standard day.
 */
const SECS_PER_DAY = 60 × 60 × 24

/*
 * Get the number of hours in a time value.
 *
 * @param time The time value (as from "now")
 * @return     The integer number of hours.
 */
define hot(time) = time \ TICKS_PER_HOUR

/*
 * Get the number of minutes in a time value.
 *
 * @param time The time value (as from "now")
 * @return     The integer number of minutes.
 */
define mot(time) = (time - (hot(time) × TICKS_PER_HOUR)) \ TICKS_PER_MINUTE

/*
 * Get the number of seconds in a time value.
 *
 * @param time The time value (as from "now")
 * @return     The integer number of seconds.
 */
define sot(time) = (time - (hot(time) × TICKS_PER_HOUR) - (mot(time) × TICKS_PER_MINUTE)) \ TICKS_PER_SECOND

/*
 * Get a timestamp from the given date and time in the Linux "date" form.
 *
 * @param date The desired date.
 * @param time The desired time.
 * @return     Timestamp in the form of "Mon Dec 20  6:46:19 PST 2021"
 */
def timestamp(date = today, time = now) = {
   `${dow_name(date)[:3]} ${moy_name(date)[:3]} ${dom(date)@.2d} ${hot(time)@-2s}:${mot(time)@.2d}:${sot(time)@.2d} ${info.timezone.name} ${yod(date)@_d}`
}

/*
 * Format a date according to the given format.
 *
 * @param d  The date value.
 * @param f  Format for the date, such as "mm/dd/yyyy" (default pattern).
 * @return   The date formatted according to the pattern.
 */
define dateformat(d, f = 'mm/dd/yyyy') = {
    define d2(n) = n < 10 ? '0' + n : @@n
    define dg(n) = @@n
    define finishRun(ch) = {
        const len = length(runOf)
        if len {
            if ch == runOf[0] leave
            case runOf[0] of {
                'd': result +=
                        (len == 1 ? dg(dom(d)) : d2(dom(d))),
                'y': result +=
                        (len <= 2 ? d2(yod(d) % 100) : dg(yod(d))),
                'm': result +=
                        (len == 1 ? dg(moy(d)) : d2(moy(d))),
                'M': result +=
                        (len <= 2 ? moy_name(d)[:3] : moy_name(d))
            }
        }
        runOf = ''
    }

    var result = ''
    var runOf = ''
    loop fch over f {
        case fch of {
            'd', 'm', 'M', 'y': {
                finishRun(fch)
                runOf += fch
            },
            default: {
                finishRun(fch)
                result += fch
            }
        }
    }
    finishRun('')
    result
}

/*
 * Complement to built-in "now" function, this returns the current time,
 * but in the GMT timezone.
 *
 * @return Current time at GMT (use "@h" to format as a time).
 */
def gmtnow = now - TZ_OFFSET

/*
 * Convert a surrogate pair to the corresponding Unicode codepoint.
 *
 * @param h The high surrogate value.
 * @param l The low surrogate.
 */
define surr_pair_to_cp(h, l) = (h - 0xD800) × 0x400 + (l - 0xDC00) + 0x10000

/*
 * Extract the high surrogate of a codepoint outside the BMP.
 *
 * @param cp The codepoint under dissection.
 * @return   The high surrogate value for this codepoint.
 */
define cp_to_high_surr(cp) = (cp - 0x10000) \ 0x400 + 0xD800

/*
 * Extract the low surrogate of a codepoint outside the BMP.
 *
 * @param cp The codepoint under dissection.
 * @return   The low surrogate value for this codepoint.
 */
define cp_to_low_surr(cp) = (cp - 0x10000) % 0x400 + 0xDC00

/*
 * Fix a directory name so it ends with the file separator, suitable for
 * constructing a path with a file name.
 *
 * @param path The path to regularize.
 * @return     Input path guaranteed to end with the system file separator.
 */
define fixpath(path) = {
    var newpath = path
    if !matches(newpath, s'^.*[\/]$') newpath += info.os.filesep
    replace(newpath, s'[/\]', info.os.filesep)
}

/*
 * Concatenate together a series of path segments, using the O/S file separator string.
 *
 * @param ... Fragments of a path
 * @return    The fragments joined together appropriately.
 */
define makepath(...) = join(_*, info.os.filesep)

/*
 * Format a FILETIME value (from "FileInfo") to a more readable local time string.
 *
 * @param ft One of the "fileinfo" time strings.
 * @return   A nicer local date/time string.
 */
define ft2time(ft) = {
    define date(d) = `${d@-E}`
    define time(t) = { var v = `${t@-h}`; lpad(v, 8, '0') }

    var dt = eval(`d'${ft[0:10]}'`)
    var tm = eval(`h'${ft[11:19]}'`)
    tm += TZ_OFFSET
    if tm < 0 { dt--; tm += TICKS_PER_DAY }
    `${date(dt)}  ${time(tm)}`
}

/*
 * Convert a number of seconds since the epoch to a date and time value.
 *
 * @param secs Number of seconds since the epoch (1970-01-01 00:00:00)
 * @return Date / time string
 */
define epoch_secs_to_datetime(secs) = {
   var days = secs \ SECS_PER_DAY
   var ticks = (secs % SECS_PER_DAY) × TICKS_PER_SECOND
   while ticks < 0 {
      --days; ticks += TICKS_PER_DAY
   }
   `${days@-e} ${ticks@-h}`
}

/*
 * Convert a date and time to number of seconds since the epoch start
 * (1970-01-01 00:00:00).
 *
 * @param date One of our date values.
 * @param time A time value (nanos since midnight).
 * @return Number of seconds since the epoch start.
 */
define datetime_to_epoch_secs(d, t) = d × SECS_PER_DAY + t / TICKS_PER_SECOND

/*
 * Determine if a given number is a "perfect" number - equal to the sum of
 * all its positive divisors, excluding itself.
 * Note: the first few perfect numbers are: 6, 28, 496, and 8128.
 *
 * @param n The test value.
 * @return  true/false if the number is perfect.
 */
define is_perfect(n) = sumof ( factors (n) ) - n == n

/*
 * Return a list of the prime numbers within the given range.
 *
 * @param m Starting value for the list (should be 2 or any odd number); default 2.
 * @param n Limit for the list of primes.
 * @return  Array of prime numbers within the input range.
 */
define primes(m = 2, n) = {
   var list = []
   if 2 in m..n list += 2
   const s = max(m|1, 3)
   loop x over s..n, 2 {
      if isprime(x) list += x
   }
   list
}

/*
 * Solve the quadratic formula to find the roots of a general
 * quadratic equation: a × x² + b × x + c = 0.
 * x = (-b +- √(b² - 4 × a × c))/2 × a
 *
 * @param a
 * @param b
 * @param c
 * @return [ x1, x2 ] if solution is real, error if not
 */
define quad(a, b, c) = {
  const _2a = 2 × a
  var _r = (b² - 4 × a × c)
  if _r < 0 {
    _r = abs(_r)
    [ ( -b/_2a, √(_r)/_2a ), ( -b/_2a, -√(_r)/_2a ) ]
  } else {
    [ (-b + √(_r))/_2a, (-b - √(_r))/_2a ]
  }
}

/*
 * Find the value of a quadratic equation at the given point.
 * y = a×x² + b×x + c
 *
 * @param a
 * @param b
 * @param c
 * @param x
 * @return The value of the equation at the given point.
 */
define quad_exp(a, b, c, x) = a × x² + b × x + c

/*
 * The Euler-Riemann "zeta" function for positive integer even values.
 * Reference:
 * https://en.wikipedia.org/wiki/Riemann_zeta_function
 *
 * @param _2n Positive even integer value
 * @return    The Euler "zeta" function of that value
 * Note: no error checking if the parameter is not a positive even integer.
 */
define zeta_2n(_2n) = ((-1)⭡ (_2n / 2 + 1) × Bn(_2n) × (2 × pi) ⭡ _2n) / (2 × _2n!)

/*
 * Tangent numbers, derived from the Bernoulli numbers. Value is zero for 0
 * and all even values.
 * Reference: http://scipp.ucsc.edu/~haber/ph116A/taylor11.pdf pg. 3 eq. 8
 *
 * @param k where we calculate the value for (2k+1)
 * @return The k-th Tangent number
 */
define Tn(k) = {
  const _2k2 = 2×k + 2
  const _2_2k2 = 2 ⭡ _2k2
  $rational on {
    const _fact = Bn(_2k2) / _2k2
    const _result = _2_2k2 × (_2_2k2 - 1) × _fact
  }
  ~~_result
}

#
# M = P[r(1+r)^n/((1+r)^n)-1)]
#
#  M = the total monthly mortgage payment
#  P = the principal loan amount
#  r = your monthly interest rate. Lenders provide you an annual rate
#      so you'll need to divide that figure by 12 (the number of month
#      in a year) to get the monthly rate. If your interest rate is 5%,
#      your monthly rate would be 0.004167 (0.05/12=0.004167).
#  n = number of payments over the loan's lifetime. Multiply the number
#      of years in your loan term by 12 (the number of months in a year)
#      to get the number of total payments for your loan. For example,
#      a 30-year fixed mortgage would have 360 payments (30x12=360).
#

# Note: this particular example comes from
# https://www.bankrate.com/calculators/mortgages/mortgage-calculator.aspx

# The context for the payment calculation is:
#    P = full principal amount to be financed
#    R = yearly interest rate (%)
# or r = monthly interest rate (R/12)
#    N = number of years
# or n = number of months (N×12)
# Then the calculated values are:
#   rate = monthly interest as a decimal value (% / 100 / 12)
#   num = number of months (years * 12)
define _pmt_internal_(P, R=5, N=30, r=R/12, n=N×12) = {
  const rate = r / 100

  # Calculate the intermediate values (which are reused)
  const r_n = (1 + rate) ⭡ n
  const r_r_n = rate × r_n
  const r_n_1 = r_n - 1

  # Now the final monthly payment value
  P * (r_r_n / r_n_1)
}

define PMT(P,R,N) = {
   # Note: the 2nd param is the number of fractional digits (after the decimal point)
   # regardless of the number of whole digits in the result; so "0" will round
   # to a whole dollar, "2" rounds to pennies.
   round(_pmt_internal_(P=P, R=R, N=N), 2)
}

define PMT2(P,r,n) = round(_pmt_internal_(P=P, r=r, n=n), 2)

def monthly(P,R,N) = `Full monthly payment is ${PMT(P,R,N)@2,$}`
def monthly_whole(P,R,N) = `Monthly payment in whole dollars is ${PMT(P,R,N)@0,$}`

def help_mort = {
"""
Usage: PMT (P = present value, R = yearly interest rate (%), N = number of years)
   or PMT2 (P = present value, r = monthly interest (%), n = number of months)
   Or use monthly(P,R,N) or monthly_whole(P,R,N) to get the results in different forms.
"""
}

/*
 * Compute the winning percentage, given wins, ties, and losses.
 *
 * @param wins   Number of wins.
 * @param losses Number of times lost.
 * @param ties   Number of ties (default 0).
 * @return       Winning percentage.
 */
def win_pct(wins, losses, ties = 0) = wins / (wins + ties + losses) @2%

/*
 * Calculate percent increase from old to new value.
 *
 * @param old   Previous value.
 * @param new   New value.
 * @return      (new - previous) / previous as a percentage
 */
def pct_inc(old, new) = `${( new - old ) / old × 100 @2d}%`

/*
 * Implementation of a stack data structure. The array of values is kept trimmed, so the current value array length
 * is also the current depth.
 */
def stack = { _values: [] }

/*
 * Push a new value onto the given stack.
 *
 * @param s     The stack to use.
 * @param value The new value to push onto the top of the stack.
 */
def push(s, value) = { s._values += value }

/*
 * Pop the latest value off the given stack.
 *
 * @param s The stack to use.
 * @return  The latest value pushed into the stack.
 */
def pop(s) = { _v = s._values--; _v ? _v[-1] : null }

/*
 * Is the given stack empty?
 *
 * @param s The stack to check on.
 * @return  Whether or not the stack is empty.
 */
def isempty(s) = { !s._values }

/*
 * Peek at the top value on the stack without popping it.
 *
 * @param s The stack to use.
 * @return   The top-most element of the stack, without modifying the stack.
 */
def peek(s) = { s._values ? s._values[-1] : null }

/*
 * Construct a nice string form of the version information.
 */
def version = `Version ${info.version.major}.${info.version.minor}.${info.version.patch} build ${info.version.build[1:]}${info.version.prerelease}`

/*
 * Execute the "uuid" program to return a unique identifier.
 *
 * @return A unique identifier.
 */
define uuid() = trim(exec('uuid'))

/*
 * Execute the "sleep" program for the given time period.
 *
 * @param time A time period to sleep (could be "n" seconds, or other units such as "2m").
 */
define sleep(time) = trim(exec('sleep', time))

/*
 * Hash a file using the given algorithm (default is "SHA-256" if none given).
 *
 * @param filename  Name of the file to compute the hash for.
 * @param algorithm Which hash algorithm to use.
 * @param uppercase Which case to use for the result (default 'false')
 * @return          The given hash value (lower case).
 */
define hash(filename, algorithm = 'sha-256', uppercase = false) = {
   trim(exec('hsh', uppercase ? '--upper' : '--lower', '--algorithm=' + algorithm, '--file', filename))
}

/*
 * Hash a string with same parameters as "hash".
 *
 * @param value     The string value to hash.
 * @param algorithm Which hash algorithm to use.
 * @param uppercase Which case to use for the results (default 'false')
 * @return          The given string's hash value.
 */
define hashstring(value, algorithm = 'sha-256', uppercase = false) = {
   trim(exec('hsh', '--line', uppercase ? '--upper' : '--lower', '--algorithm=' + algorithm, `${value@q}`))
}

/*
 * An enumeration of capitalization modes for the "capitalize" function.
 */
enum ALLCAPS, FIRSTCAP, WORDCAP

/*
 * Capitalize a string according to the given mode.
 *
 * @param s    The input value to change.
 * @param mode Which mode to use: ALLCAPS  (0) = change to all capitals
 *                                FIRSTCAP (1) = only capitalize the first letter
 *                                WORDCAP  (2) = Capitalize all words
 * @return     The modified string.
 */
define capitalize(s, mode) = {
   define cap(n) = upper(n[:1]) + n[1:]
   case mode of {
       ALLCAPS: upper(s),
      FIRSTCAP: cap(s),
       WORDCAP: {
            var res = []
            loop w over split(s, s'\s') { res += cap(w) }
            join(res, ' ')
         },
      default:
         $assert false, `Unknown mode $mode passed to "capitalize(...)".`
   }
}

/*
 * Easy average computation
 *
 * @param values
 * @return The average of those values
 */
define avg(...) = sumof(_*) / _#

/*
 * Compute the mean and standard deviation of a list of values.
 *
 * @param values
 * @return { mean: xxx, stddev: sss }
 */
define mean_stddev (...) = {
  const avg = sumof(_*) / _#
  var variance = 0
  loop v over _* { variance += (v - avg)² }
  variance /= _#
  { mean: avg, stddev: round(√ variance, 3) }
}

/*
 * Construct the Collatz sequence from the given start value.
 *
 * @param start The starting value for the sequence.
 * @return      The Collatz sequence starting from that value.
 */
define collatz(start) = {
   var value = start
   var seq = [ value ]
   while value > 1 {
      if value % 2 == 0 { value \= 2            }
                   else { value = 3 × value + 1 }
      seq += value
   }
   seq += value
}

/*
 * Calculate the number of permutations of N objects taken R at a time.
 *
 * @param N Number of objects to permute.
 * @param R Number of objects at a time (default = 1).
 * @return  The number of permutations of those objects.
 */
define perm(N, R = 1) = N! / (N - R)!

/*
 * Calculate the number of combinations of N object taken R at a time.
 * Combinations are not order dependent.
 *
 * @param N Number of objects to start with.
 * @param R Number of objects to select each time.
 * @return  The number of combinations of those objects.
 */
define comb(N, R) = N! / ((N - R)! × R!)

/*
 * Compute the nth triangle number.
 *
 * @param n Which triangle number.
 * @return  The given triangle number.
 */
define tri(n) = (n² + n) / 2

/*
 * Compute the nth pentagonal number.
 *
 * @param n Which pentagonal number.
 * @return  The given pentagonal number.
 */
define pent(n) = (3 × n² - n) / 2

/*
 * Compute the nth hexagonal number.
 *
 * @param n Which hexagonal number.
 * @return  The given hexagonal number.
 */
define hex(n) = 2 × n² - n

/*
 * Compute the sum of the digits of this number.
 *
 * @param num A number (or number string)
 * @return    Sum of the digits of this number
 */
define sum_of_digits(num) = sumof(chars(@@~~num))

/*
 * Read a text file, separate into lines, then return the list of them in order.
 *
 * @param fn The full or partially qualified file name to read.
 * @return   List of lines in that file.
 */
define readFileLines(fn) = {
   split(trim(read(fn)), LINESEP)
}

/*
 * Return an array of the screen width and height (taken from "info.os").
 *
 * @return Array of {@code [ width, height ]}
 */
define screenSize = [ info.os.screenwidth, info.os.screenheight ]

