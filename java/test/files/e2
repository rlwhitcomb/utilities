:echo "Tests of nested object / array variables."
:echo

:clear a
a = { b: { c: 4 }, "b": { c: [ 1, 8, 9], "c": { d: 5 } } }
a
a.b.c = 5
a
a."b".c[0] = 7
a
a."b"."c".d = 6
a@j
a."b"."c".d++
a."b"."c"@j

:clear a
a.b.d.f = 3
a@j

:clear [a,f]
a[0].b.c[1] = 12
a
d[1]."e"."f".g[3] = 14
d
f[0][1] = 27
f

:clear a
a = { "b": { c: [ 1, 8, 9], "c": { d: 5 } } }
a
a."b"."c".d = 6
a
a."b"."c".f = 3
a
a."b"."d".i = true
a@j

:clear a
a.b.c.d = 6
a
a.b.c.f = 3
a
a.b.d.i = true
a@j

:clear a
a."b"."c".d = 6
a
a."b"."c".f = 3
a
a."b"."d".i = true
a@j

++a['"b"']['"c"']['f']
a

:clear a
a = { b:true, c:{ d:'123', f:'fghi', g: { r:4, s:5 }}}
a.b
a.c.d
a.c
a.c.g
a.c.g.r
++a.c.g.r
a
++a.c.g.r
a.c.g."e"='E'
a
a.c.g."e"
a.c.g."f"={"g":23, "h":{"i":27}}
a
a.c.g."f"."h"
a['c'].g."f"['"h"']."i"++
a
a.c.g."f".'h'
a.c.g."f"."h".j=15
a
a.c.g."f"."h".j++
a
m1 = '"f"'
m2 = "'h'"
a.c.g.`$m1`.`$m2` = 3.45
a

def stack = { _len:0, _arr:[] }
def push(s, v) = { s._arr[s._len++] = v }
def pop(s) = { _v = splice(s._arr, --s._len, 1); _v[0] }

s1 = eval stack;
push(s1, 19); push(s1, 20); push(s1, 21)
s1
pop(s1); pop(s1)
s1

# New EOL tests
[
  1,
  2,
  3
]

[

]

{
  a : 10,
  b : true,
  c : 'ABC'
}

# Bug tests after set implementation
m2 = {}
m2.first = 'Rupert'
m2.last = 'James'
m2.minitial = 'P'
m2

# pre- and post- operations on lists and objects
a1 = [ 1, 2, 3, 4 ]
o1 = { b: false, c:'def', d: 1.2 }

++a1
a1++
a1

a1--
--a1
a1

++o1
o1++
o1

o1--
--o1
o1
// Tests of extended identifier characters
:clear p8, p9
p9 = { '\u{1D71B}': pi }
p9
` Value of \u{1D71B} = ${p9.'ùúõ'}`
p8 = { align: 4, pos: { x: 30, y: 15 }, size: { width: 1000, height: '75%' }}
`align: ${case p8.align of { 2: 'LEFT', 0: 'CENTER', 4: 'RIGHT', default: 'DEFAULT' } }`


:echo
:echo "End of nested object / array tests."
