$requires '2.12.0-alpha'

$quiet on {
define readJSON(f) = { eval(read(f)) }

oldForm = readJSON($0)
newForm = readJSON($1)

define newKey(prefix, key) = {
    prefix ? prefix + '.' + key : key
}

define check(prefix, oldValue, newValue) = {
    oldType = typeof(oldValue)
    newType = typeof(newValue)
    if oldType <> newType { $echo `Key '$prefix': type mismatch: old=$oldType, new=$newType` }
    else {
        case oldType of {
            "array": checkArray(prefix, oldValue, newValue),
            "object": checkObject(prefix, oldValue, newValue),
            default: if oldValue <> newValue { $echo `Key '$prefix': old '$oldValue' != new '$newValue'` }
        }
    }
}

define checkArray(key, oldArr, newArr) = {
    loop idx within length(oldArr) {
        var oldValue = oldArr[idx]
        var newValue = newArr[idx]
        check(newKey(key, `[$idx]`), oldValue, newValue)
    }
}

define checkObject(prefix, oldObj, newObj) = {
    loop key over oldObj {
        var oldValue = oldObj[key]
        var newValue = newObj[key]
        check(newKey(prefix, key), oldValue, newValue)
    }
}

check("", oldForm, newForm)
}
