#
# Issue #33: Allow Calc to return functions from other functions
#
# The LValue for a function needs to be allowed to be another function
#
def f1(a, b) = { a + b }
def f2(a, b) = { a * b }
def f(c) = { c ? f1 : f2 }
f(true)(1,2)
f(true)(7,8)
f(false)(3,4)

enum F1, F2
def visit(type) = { case type of F1: f1, F2: f2 }
visit(F1)(4,5)
visit(F2)(7,8)

#
# Passing a function as a parameter to another function
#
define gop(op, m, n) = op(m, n)
gop(f1, 5, 6)
gop(f2, 9, 8)
gop(f1, 3, 4)
gop(f2, 12, 13)

#
# Issue #69: varargs, define "_#" and "_*" inside functions
#
def g1(...) = { `number = $_#` }
g1(1, 2, 3)
def g2(...) = { _* }
g2()
g2(1)
g2(1, 2)
g2(3, 4, 5)

def g3(a, ...) = { a + (isnull(_*[1]) ? '' : ' ' + _*[1]) }
g3(1)
g3(2, 'days')

def g4(a, ...) = { a + _1 }
g4(1, 2)

set = { os: { ver: '7.3', major: 7, minor: 3 } }

def iss = { set.os }
iss().ver

def l(a) = {
  if a & 1 { leave 'odd' } else { leave 'even' }
}

l(3);l(4)

define array(a=1, b=2, c=3) = { [ a, b, c ] }
array()
array(7)
array(,9)
array(,,11)
array(7,,11)
array(7,9)

def arr2(a=1, ...) = { _* }
arr2()
arr2(,)
arr2(,,3)
arr2(8)
arr2(9,,11)

define ifmany(value) = {
  if value === 0
    'zero'
  else if value === 1
    'one'
  else if value === 2
    'two'
  else if value === 3
    'three'
  else if value === 3.5
    'three and a half'
  else
    value
}

$results on {
  loop over 0..4,0.5 {
    `$__ = ${ifmany(__)}`
  }
}
define type(value) = `${value} = ${typeof(value)}`
$results on {
loop over 0..4,0.5 type(__)
}


def f1 = 'f1 here'
def f2(a) = a + ' here'
def c(f) = f()
def c1(f, a) = f(a)
c(f1)
def c(f) = f
c(f1)
c1(f2, 'roger')

define f(op, v1, v2) = { op(v1,v2) }
define add(o1, o2) = o1 + o2
define mul(o1, o2) = o1 * o2
f(add, 1, 2)
f(mul, 3, 4)

pp = 5
def func(pp) = { pp }
func(21)
$results on {
`var pp before loop = $pp` @q
loop pp over 2 { `param pp in loop = $pp` @q }
`var pp after loop = $pp` @q
}

define testing(v) = { `$_funcname(v=$v)` }
define finished() = { `Function '$_funcname()' called.` }
testing(1); testing('abc'); finished

calls = 0
define valueFunc(n) = { calls++; { value: n } }
valueFunc(1)
calls
valueFunc(3)
calls

def n1(n) = {
   if n == 2 { $echo callers() }
   if n == 0 { 0 }
   else if n == 1 { $echo callers(1); 1 }
   else { n + n1(n - 1) }
}

n1(0)
n1(3)

#
# Issue #554: allow default param exprs reference earlier params
#
define fun(a, b=a, c=b) = { [ a, b, c ] }
fun(1)
fun(1,2)
fun(1,2,3)

#
# "defined" function
#
defined(ON_WINDOWS)
defined 'junk'
const M1="MATCH"
const M2="LITERAL"
defined `${M1}_${M2}`

#
# Interesting mathematical way to implement "max" and "min"
# (average +/- half the difference)
#
define mx(a,b) = {
  (a + b) / 2 + abs(a - b) / 2
}

define mn(a,b) = {
  (a + b) / 2 - abs(a - b) / 2
}

const M_1 = 1.1
const M_2 = 1.09
const M_3 = -2
const M_4 = -1

mx(M_1, M_2)
mn(M_1, M_2)
mx(M_3, M_4)
mn(M_3, M_4)

