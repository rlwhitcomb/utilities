//
// The game of "Tic-Tac-Toe"
// User plays against the computer and is allowed to pick whether to start first
// and which "color" to use.
//
// Winning strategies from here:
// http://www.wikihow.com/Win-at-Tic-Tac-Toe
//
$quiet on

/* The values that correspond to each side. */
const X = -1
const O = +1
const EMPTY = 0

board = [
  [ EMPTY, EMPTY, EMPTY ],
  [ EMPTY, EMPTY, EMPTY ],
  [ EMPTY, EMPTY, EMPTY ]
]

/* The board layout is as follows:
   0, 0   |   0, 1   |   0, 2
     1    |     2    |     3
----------+----------+---------
   1, 0   |   1, 1   |   1, 2
     4    |     5    |     6
----------+----------+---------
   2, 0   |   2, 1   |   2, 2
     7    |     8    |     9
*/

/*
Diagonals are (by index):
 0 = NW to SE (1, 5, 9)
 1 = SW to NE (7, 5, 3)
*/
const diagonals = [
  [ 1, 5, 9 ],
  [ 7, 5, 3 ]
]

/* Which "color" is the user playing? */
userColor = EMPTY
/* Which "color" is the computer playing? */
ourColor = EMPTY
/* Does the user want to start first? */
userFirst = false
/* Input variable for user's color choice. */
userColorChoice = EMPTY
/* Did the user win? */
userWon = false
/* Game ended in a draw. */
gameIsDrawn = false
/* Number of moves made by either party so far. */
numberOfMoves = 0

/* Various constant strings used for board display. */
const EOL        = info.os.linesep
const HDR_LINE   = ' = Current Board ='
const SEP_LINE   = ' -----+-----+-----'
const FINAL_LINE = ' ================='
const COL_SEP  = '|'
const X_BOX = [
    ' \\ / ',
    '  X  ',
    ' / \\ '
]
const O_BOX = [
    ' OOO ',
    ' O O ',
    ' OOO '
]
FINAL[4] = '     \\_/';
FINAL[3] = '      -';
FINAL[1] = '     O   O';
FINAL[0] = '    ~~~~~~';
FINAL[2] = '   (  /   )';

/*
 * Convert a 0-based (row,col) pair to a 1-9 index.
 */
define toIndex(row, col) = { row * 3 + col + 1 }

/*
 * Convert the given 1-9 index to (row,col) pair
 * and return the board value there.
 */
define valueAt(_index) = { board[(_index - 1) \ 3][(_index - 1) % 3] }

/*
 * Display the current state of the board.
 */
define displayBoard() = {
  display = HDR_LINE + EOL
  loop row within 3 {
    loop x within 3 {
      line = ' '
      loop col within 3 {
        case board[row][col] of {
          X: line += X_BOX[x],
          O: line += O_BOX[x],
      EMPTY: case x of {
               1: line += '  ' + toIndex(row, col) + '  ',
         default: line += '     '
          }
        }
        if col < 2 { line += COL_SEP }
      }
      display += line + EOL
    }
    if row < 2 { display += SEP_LINE + EOL }
  }
  display += FINAL_LINE + EOL
  display += EOL
}

/*
 * Make the desired move for the given color.
 */
define makeMove(_index, _color) = {
  board[(_index - 1) \ 3][(_index - 1) % 3] = _color;
  if _color === userColor {
    $echo `You have chosen space $_index`
  } else {
    $echo `Choosing space $_index`
  }
  displayBoard()@q
}

/*
 * Sum the given row.
 */
define sumRow(row) = { sumof board[row] }

/*
 * Sum the given column.
 */
define sumColumn(col) = { board[0][col] + board[1][col] + board[2][col] }

/*
 * Sum the given diagonal.
 */
define sumDiagonal(which) = {
  sum = 0
  loop diag over diagonals[which] { sum += valueAt(diag) }
}

/*
 * Return 1 if the color at the given position matches, or 0 if it does not.
 * Called by the various "count" functions.
 */
define countValue(row, col, _color) = { board[row][col] === _color ? 1 : 0 }

/*
 * Return count of the given color in the given row.
 */
define countInRow(row, _color) = {
  count = 0
  loop col within 3 { count += countValue(row, col, _color) }
}

/*
 * Return count of the given color in the given column.
 */
define countInCol(col, _color) = {
  count = 0
  loop row within 3 { count += countValue(row, col, _color) }
}

/*
 * Count the number of the given color in the given diagonal
 * (0 = NW to SE, 1 = SW to NE).
 */
define countInDiag(which, _color) = {
  count = 0
  loop diag over diagonals[which] { if _color == valueAt(diag) { count++ } }
  count
}

/*
 * Check whether the sum is -3 or +3 and set the global "userWon" depending.
 */
define checkWinner(sum) = {
  userWon = (sum == userColor * 3)
  abs(sum) == 3
}

/*
 * Decide if any of the corners are filled with the given color.
 */
define cornerIsFilled(_color) = {
  board[0][0] == _color || board[0][2] == _color || board[2][0] == _color || board[2][2] == _color
}

/*
 * Decide whether someone won the game or not.
 * As a side-effect, the "userWon" variable will also be set.
 */
define gameIsOver() = {
  // Check the rows
  loop row within 3 { if checkWinner(sumRow(row)) { leave true } }
  // Check the columns
  loop col within 3 { if checkWinner(sumColumn(col)) { leave true } }
  // Check the two diagonals
  if checkWinner(sumDiagonal(0)) || checkWinner(sumDiagonal(1)) { leave true }
  // Lastly, check for a draw
  gameIsDrawn = (numberOfMoves == 9)
}

/*
 * Get a random "corner" value (either 0 or 2)
 */
define getRandomCorner() = { random >= 0.5 ? 2 : 0 }

/*
 * Fill a random cornder with the given color piece.
 */
define selectRandomCorner(_color) = {
  makeMove(toIndex(getRandomCorner(), getRandomCorner()), _color)
}

/*
 * Accept a user move.
 */
define acceptUserMove() = {
  move = EMPTY
  while true {
    // need "input" function to integer "move" (range 1-9)
    // input 'Which square do you want?', move:"integer"(1-9)
    if valueAt(move) != EMPTY {
      $echo `Position $move is already taken. Choose another.`
      $echo
    } else {
      makeMove(move, userColor)
    }
  }
}

/*
 * Find the column (0, 1, or 2) in the given row where there are two
 * of the given color and none of the other color. Or return -1 if not found.
 */
define findRowMove(row, _color, otherColor) = {
  if countInRow(row, _color) == 2 && countInRow(row, otherColor) == 0 {
    loop col within 3 { if board[row][col] == EMPTY { leave col } }
  }
  -1
}

/*
 * Find the row (0, 1, or 2) in the given column where there are two
 * of the given color and none of the other color. Or return -1 if not found.
 */
define findColMove(col, _color, otherColor) = {
  if countInCol(col, _color) == 2 && countInCol(col, otherColor) == 0 {
    loop row within 3 { if board[row][col] == EMPTY { leave row } }
  }
  -1
}

/*
 * Find a needed diagonal block and return the 1-9 index of the spot
 * or return 0 if not needed.
 */
define findDiagMove(which, _color, otherColor) = {
  if countInDiag(which, _color) == 2 && countInDiag(which, otherColor) == 0 {
    loop diag over diagonals[which] { if valueAt(diag) == EMPTY { leave diag } }
  }
  0
}

/*
 * Find a "necessary" move (that is, one where we have two of the one color
 * and none of the other). This could be a win for us, or a necessary block
 * so the user won't win.
 * Returns 0 for none.
 */
define findNecessaryMove(_color, otherColor) = {
  // Check rows
  loop row within 3 {
    col = findRowMove(row, _color, otherColor)
    if col >= 0 { leave toIndex(row, col) }
  }
  // Check columns
  loop col within 3 {
    row = findColMove(col, _color, otherColor)
    if row >= 0 { leave toIndex(row, col) }
  }
  // Check diagonals
  loop diag within 2 {
    ix = findDiagMove(diag, _color, otherColor)
    if ix > 0 { leave ix }
  }
  0
}

/*
 * Pick the best computer move.
 */
define pickComputerMove() = {
  // Method 1. 1. If we're starting first, then pick a random corner to guarantee win or draw
  if numberOfMoves == 0 { leave selectRandomCorner(ourColor) }

  // Method 2. 1. If user picked a corner on first move, force a draw by choosing center
  if userFirst {
    if numberOfMoves == 1 {
      if cornerIsFilled(userColor) {
        leave makeMove(5, ourColor)
      }
    }
  } else {
    // Method 1. 2a. Our first move (above) was a random corner,
    // and user picked the middle then pick the opposite diagonal
    if numberOfMoves == 2 && valueAt(5) == userColor {
      case ourColor of {
        valueAt(1): leave makeMove(9, ourColor),
        valueAt(3): leave makeMove(7, ourColor),
        valueAt(7): leave makeMove(3, ourColor),
           default: leave makeMove(1, ourColor)
      }
    }
  }
  // TODO: implement the rest of the winning logic

  winningMove = findNecessaryMove(ourColor, userColor)
  if winningMove > 0 {
    leave makeMove(winningMove, ourColor)
  }

  blockingMove = findNecessaryMove(ourColor, userColor)
  if blockingMove > 0 {
    leave makeMove(blockingMove, ourColor)
  }

  // Last-ditch attempt:  find the first available empty position
  loop slot in 9 {
    if valueAt(slot) == EMPTY {
      leave makeMove(slot, ourColor)
    }
  }

$echo 'No code for this situation!'

  displayBoard() @q
}

/*
 * Display game conclusion.
 */
define conclusion = {
  if userWon {
    'Congratulations! You won!'
  } else {
    if gameIsDrawn {
      'This game was a draw.' + EOL +\
      'Please play again soon!'
    } else {
      "So sorry, you've lost to a computer!" + EOL +\
      'Feel free to play again later ' + (ON_WINDOWS ? ":)" : "ðŸ˜„") + EOL +\
      join (FINAL, EOL)
    }
  }
}

$quiet pop
$resultsonly on
displayBoard()@q

/*
 * Demonstration - enable with "-define demo=true" or "-- demo --"
 */
if demo || ($0 != null && matches($0, '[dD][eE][mM][oO]')) {
  $echo '*** Start of Demo ***'
  $echo 'Set up two moves'
  $quiet on
  board[1][0] = X
  board[1][1] = O
  $quiet pop
  displayBoard()@q
  $echo 'Testing some of the support functions used for game play...'
  `Count of 'X' in column 0 = ${countInCol(0, X)}` @q
  `Count of 'O' in row 1 = ${countInRow(1, O)}` @q
  `Count of 'O' in top-left to bottom-right = ${countInDiag(0, O)}` @q
  `Game is over? ${gameIsOver()}` @q
  conclusion() @q
  $echo '*** End of Demo ***'
}
