/*
 * Tests of the expression engine in Calc.
 */
:echo "Starting expression tests (suite 1)."
:echo

# Various simple expressions
:decimal(50)
52+27
3.4 + 5
34 + 5;x
PI
sin(pi/3)
4 & 7
true && false
(1+2) * (3+4)
:Double
atan2(4, 5)
14/7;12/4;13/9
a = 1; b = 2; a+b;
a<=>b; a<=b; b<a; 1>2; 2>=1;
:DEFAULT
1.2+3.4
1/7
:decimal 18
e
a
:clear
a
a = b = c = 27; a+b; b+c
e

# Now some string tests
name = 'Roger'
"This isn't a number"
'This ' + "isn't" + " a number"
'This isn\'t either, ' + name

# Other operators and functions
:decimal 60
s = sqrt(17);
t = s * s;
t = 17**0.5
t * t
u = 12!
v = cbrt(u)
v*v*v-u
u**(1/3)


_This_is_a_very_long_variable_name_Which_not_surprisingly_is_not_worth_remembering_1_ = sqrt 42
++ _This_is_a_very_long_variable_name_Which_not_surprisingly_is_not_worth_remembering_1_

:clear [ _This_is_a_very_long_variable_name_Which_not_surprisingly_is_not_worth_remembering_1_ ]
_This_is_a_very_long_variable_name_Which_not_surprisingly_is_not_worth_remembering_1_

# Factorial tests
72!
-5!
-8!
1/7!

# Special tests of the "fib" function
fib 27
fib 0
fib 1
fib 2
fib 3
fib 5
fib -1
fib -2
fib -6
fib 200

# Trig and log functions
I = 1; ++I; I;
J = 2; J++; J;
:double
pi / 2
asin ( sin ( pi / 2 ) )
pi/4
acos(cos(pi/4))
pi/3
atan(tan(pi/3))
b = -27; c = 0; d = 153;
signum b; signum c; signum d;
length b; length c; length d;
scale b; scale c; scale d;
h = 23
i = ln(h)
e**i
m = 10000
n = log(m)
10**n
p = ln2(1000000)
2**p

:degrees
sin(45)
cos(60)
asin(sin(50))
acos(cos(30))
atan(tan(15))

:rad
:dec 60
π
a = sin(π/4)
b = a * 2
c = b*b
round c, 14
round(a, 10)
round a, -2
round c, 0

sin(2700)
sin -(4*pi)

# Min, max, and gcd tests
min 1, -1, 27, -300, 18.5, -300.5
max 'abc', 'ghi', "ABC", "012"

min(-27)
max(2.4)
min(-3,-5)
max(1,3,5,2,8,9,11,4,6)

gcd(25, 10)
gcd(27*2, 3*9*18)

max('123', 456, 789)
min(123, '-1', '14')

# Bit and logical operators
127 | 128
15 & 7
31 ^ 10

0b0011 ~& 0b0101;b
0b0011 ~| 0b0101;b
0b0011  ^ 0b0101;b
~0b0110;b
0b0011 ~^ 0b0101;b
0x3FF &~ 0xFF0;X

'abc' != "ABC" && 0 != 1

false ^^ false
false ^^ true
true ^^ false
true ^^ true

0xFFFF ^ 0xAAAA;X
012
10;o
0b1010101010;x
0x2aa;b
~ 0x7FFF;X
~ 0x7FFF;o
~ 0x7FFF;b
255;o
123;b
'def';o
'abc';b
'Hello';X

# The "join" operator
:clear this, hello, handsome, rude
this = join('This', 'is', 'a', 'test', ' ');
hello = join('Hello', "World!", ', ');
handsome = join("Hello ", "handsome.");
rude = join "RUDE!"
length this; length hello; length handsome; length rude;

'[' + join (1, 2, 3, 4, 5, ', ') + ']'

# Precedence of compare / equal operators
1 < 2 == 3 > 4
1 == '1' > 2 != '2'

# Special tests of the strict equality vs. equality operations
1 === '1'
1 == '1'

! true
a
! (a == null)

# Testing operations a various precisions
:decimal 200; 1/7
:decimal 30; 1/9
:decimal 50; pi
:decimal 10000; e

# The formatting operations
:binary
1024**2;k
:ten
1000**4;k
:mixed
1024**3;k

100MB
2EB
2EiB
900KB;k
300PB
450PiB

:echo

//
// Now, start on the array and object stuff
//
a = [1, 2, 3]
a[0] = 4
a[1] = 5
a
a[3] = 10
a
length a; scale a;

b = null
b[2] = 'abc'
b
b[0] = 'ABC'
b

c = null
c.d = true
c.f = 1.2
c.g = "Begin"
c."key" = 'end'
c
length c; scale c;

d = [ 1, { start:1, end: 2 }, { px:0, py:0}, "Area" ]
d
d[0] = 2; d[1].start = 3; d[2].py = 4; d[3] = "Bounding " + d[3];
d;j
length d; scale d;

f = { coords: [1, 1, 4, 5], name: "box" }
f;j

# The ternary operator
1 == 2 ? 'impossible' : 'correct'
2! < 2**2 ? 'true' : 'not likely'
x = 7; y = 8
_min = min_plus_1 = x < y ? x + 1 : y + 1
_min

y = x = 7 + 1
y; x;

:clear m
m[0] = m[1] = m[2] = 3;
m
:clear n
n.a = 'First'; n.b = 123; n.c = false;
n

# Interpolated strings
:clear a
a = 128
` a is $a, b isn't $a`
`a + 1 = ${a + 1}`
`5! = ${5!} !!`
`g$$`
`a = ${a;x}`
`a = ${a;%}`
`a = ${a;k}`

# The various assignment operators
:clr [g,h,i,j]
:dec(200)
g = 271; h = 385; i = 192; j = 120!
g+=h
i-=g
h*=g
i/=g
j %= 10**40;
j
g = 0377;o; g&=0177;o
h = 0x400;x; h|=0x080;o
i = 0xaaa;x; i^=0x554;x
g;o; h;x; i;x;
g = 0x4000;x
g >>>= 3;x
g >>= 2;x
g<<=2;x
g;x

# Operations on parts of arrays and objects
a = { b : [ 1, 2, 3 ], c : { d: 1, f: true, g: 'abcd' } } 
a
++a.b[1]
a.b
a.c.d++
a
a.c.d++
a
a.b[2] = a.b[0] + a.c.d
a
a.c.h = a.c.g + ": " + `a.b[2] = ${a.b[2]}`
a;j
length a; scale a.b;

str = 'abcdefg'
str[1] = 'z'
str[2] = 'y'
str[3] = 'xw'
str[8] = 'new'
str

b = [ [ [ 1,2], [3,4], [5, 6]]]
b[0][0][1] = 11
b[1] = [ [ 7,9], [0,1], [3,4] ]
b;j
length b; scale b; length b[1];

:def
p = {b:2, c: { d:true }, "e":e }
p;j
length p; scale p;
:echo "Elements of p:"
loop $p in p { $p }

:echo
:echo "End of expression tests (suite 1)."

