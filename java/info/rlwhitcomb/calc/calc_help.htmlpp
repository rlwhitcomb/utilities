<!DOCTYPE html>
<html>
  <head>
    <title>Calculator Help</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Fredericka+the+Great&amp;display=swap" rel="stylesheet">
    <style>
table {
  font-family: helvetica, arial, sans-serif;
  border-collapse: collapse;
  table-layout: fixed;
}

tr, th, td {
  border: 1px solid #dddddd;
  text-align: center;
  padding: 4px 10px;
}

th {
  background: cornflowerblue;
}

tr:nth-child(odd) {
  background-color: #f8f0f0;
}

table code {
   font-size: 120%;
   font-weight: bold;
}

code {
   font-size: 110%;
   font-weight: bold;
}

h2 {
   margin-left: 30px;
   margin-right: 30px;
}

.right-link {
   margin-right: 30px;
   text-align: right;
   float: right;
}

.toc_container  {
    margin: 25px;
    overflow: hidden;
    padding: 10px 10px;
    background-color: lightgreen;
    border: 1px solid cornflowerblue;
    -webkit-border-radius: 20px;
    border-radius: 20px;
    font-size: 130%;
}

.toc_title {
    font-size: 200%;
    font-weight: bold;
    text-align: center;
}

.toc_container ol li {
    list-style: decimal outside none !important;
}

.title-box {
    margin: 25px;
    overflow: hidden;
    text-align: center;
    padding: 10px 10px;
    background-color: lightgreen;
    border: 1px solid cornflowerblue;
    -webkit-border-radius: 20px;
    border-radius: 20px;
}

.cols {
    columns: 3;
    column-rule: 2px double cornflowerblue;
    column-gap: 40px;
    margin-left: 40px;
    margin-right: 40px;
}

.sectionsep {
    border: 0 none;
    background-color: cornflowerblue;
    height: 2px;
    margin-left: 40px;
    margin-right: 40px;
    margin-top: 30px;
}

.center {
    text-align: center;
}

.underline {
   text-decoration: underline;
}

.redbutton {
   font-family: Verdana, Helvetica, Arial, Sans-Serif;
   font-size: 24pt;
   font-weight: bold;
   color: red;
}

.bluebutton {
   font-family: Verdana, Helvetica, Arial, Sans-Serif;
   font-size: 24pt;
   font-weight: bold;
   color: blueviolet;
}

.orangebutton {
   font-family: Verdana, Helvetica, Arial, Sans-Serif;
   font-size: 24pt;
   font-weight: bold;
   color: darkorange;
}

.tablecap {
   font-size: 1.5em;
   margin-top: 0.83em;
   margin-bottom: 0.83em;
   margin-left: 0;
   margin-right: 0;
   font-weight: bold;
}

.indent {
   margin-left: 20px;
}
    </style>
</head>

<body>
  <div id="topofpage" class="title-box">
    <h1 style="font-family:'Fredericka the Great';font-size:400%;">Calculator</h1>
    <h2>Version ${Calc.version}, build ${build.number}</h2>
  </div>
<div class="toc_container">
  <p class="toc_title">Contents</p>
  <div class="cols">
  <ol type="1">
    <li><a href="#Introduction">Introduction</a>
    <li><a href="#Command_Line">Command Line</a>
    <li><a href="#Command_Line_Options">Command Line Options</a>
    <li><a href="#Notes_on_Command_Line_Options">Notes on Command Line Options</a>
    <li><a href="#Read_Eval_Print_loop_Commands">Read, Eval, Print Loop Commands</a>
    <li><a href="#Values_Constants_and_Variables">Values, Constants, and Variables</a>
    <li><a href="#Modes_and_Precision">Modes and Precision</a>
    <li><a href="#Formats">Formats</a>
    <li><a href="#Notes_on_Formats">Notes on Formats</a>
    <li><a href="#Available_Operators_and_Predefined_Functions">Available Operators and Predefined Functions</a>
    <li><a href="#Notes_on_Operators_and_Functions">Notes on Operators and Functions</a>
    <li><a href="#User_Defined_Functions">User-Defined Functions</a>
    <li><a href="#Statements">Statements</a>
    <li><a href="#Directives">Directives</a>
    <li><a href="#Notes_on_Directives">Notes on Directives</a>
    <li><a href="#Standard_Libraries_of_Functions">Standard Libraries of Functions</a>
    <li><a href="#GUI_Operations">GUI Operations</a>
    <li><a href="#TODO_Items_for_This_Document">TODO Items for This Document</a>
    <li><a href="../index.html">Main Documentation Page</a>
  </ol>
  </div>
</div>
<hr id="Introduction" class="sectionsep">
  <h2>Introduction</h2>
<div class="cols">
  The "Calc" program is a calculator of arithmetic "expressions" (such as <code style="color:blue;">1 + 1</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">2</code>)
  that combines (nearly) unlimited precision decimal arithmetic with a rich assortment of operators and functions to give the ability to calculate nearly any arithmetic expression. In addition,
  the language features looping, conditional statements, and user-defined functions, as well as the ability to read and write files, all of which make the language into a rich scripting engine
  suitable for a wide variety of applications.
  <p>As input, the calculator operates on either an expression given on the command line (may need to be
       quoted for certain operator characters), or in <a href="https://en.wikipedia.org/wiki/Read-eval-print_loop">REPL</a> mode
       (<span class="underline">R</span>ead, <span class="underline">E</span>val, <span class="underline">P</span>rint
        <span class="underline">L</span>oop, where a prompt is displayed, the input line is evaluated
       and the result displayed, then the prompt is repeated for the next calculation), from a file for predefined calculations, or from within a simple GUI frame.
  <h3>Why?</h3>
  <p><em><strong>Why would I want this calculator when there are so many already available (handheld, apps on your phone, default apps on your computer)?</strong></em>
      <ul>
        <li>All arithmetic is done to (essentially) unlimited precision (ignoring the fact that only around 38 digits is sufficient to calculate the diameter
            of the entire known universe accurate to the size of a hydrogen atom;
            see <a href="https://www.jpl.nasa.gov/edu/news/2016/3/16/how-many-decimals-of-pi-do-we-really-need/">How Many Decimals of Pi Do We Really Need?)</a></li>
        <li>More operators and functions are available than in almost all other calculators, and more are being added all the time.</li>
        <li>Custom function definitions for calculations beyond the list of predefined functions.</li>
        <li>Variables can be used for storage of values for later use.</li>
        <li>Object, array, and set structures for storage of multiple values.</li>
        <li>Therefore, JSON objects are a native part of the language.</li>
        <li>Built-in support for real fractions, complex numbers, and
            <a href="https://en.wikipedia.org/wiki/Quaternion">quaternions</a>, with matrix support planned.</li>
        <li>String functions for doing text manipulation, including <a href="https://en.wikipedia.org/wiki/String_interpolation">string interpolation</a>.</li>
        <li>Simple file reading and writing with powerful string matching functions make writing text transformation programs very easy.</li>
        <li>The ability to do calculations straight from the command line, from a text file, in a convenient REPL mode, or in a GUI window.</li>
        <li>Data or scripts can be read from the standard input channel, and values and results can be written to the standard output channel, so Calc can be used as a filter in a longer chain of batch processing.</li>
        <li>The ability to define libraries of functions available using the "<code>-library</code>" command line option or the "<code>$include</code>" directive.</li>
        <li>Calculations can be edited (using backspace, etc.) to reduce the chance of keyboard errors.</li>
        <li>Looping and conditional statements, including powerful pattern matching, to do pretty much any kind of calculation or programming task.</li>
        <li>Did I mention that this is an actual programming / scripting language?</li>
        <li>Therefore, this "calculator" is a <a href="https://en.wikipedia.org/wiki/Turing_completeness">&ldquo;Turing Complete&rdquo;</a> language.</li>
        <li>Currently (as of mid-2025 at least), it is being actively developed and maintained, meaning features and fixes are constantly being added.</li>
        <li>This is <a href="https://opensource.com/resources/what-open-source">Open-Source Software</a> released under the very permissive
            <a href="https://opensource.org/license/mit">MIT</a> license, so the code can be freely examined, and modified (if desired) for your own use.</li>
      </ul>
  <h3>History</h3>
  <p>"Calc" started out as an exercise in learning the <a href="https://www.antlr.org/">Antlr</a> parser generator, by combining the simple expression grammar from the introductory book
     with the JSON grammar in another chapter of the book. Once that was working, adding more operators and then built-in functions, and then user-defined functions, and on and on,
     was fairly easy. And now, almost five years later, with a lot of head-scratching and "dog-fooding" along the way, we have what we have here.
  <p>The language is built around the idea of an expression evaluator. So, everything in the language (with the exception of <a href="#Directives">Directives</a>) is basically an expression.
     And since each piece of data basically describes itself (by its Java class) we can get away with being dynamically typed, and doing "appropriate" conversions as needed.
     Even the <a href="#Statements">Statements</a> in the language actually return a value, so it is not a stretch for the result of anything to simply be the last expression value
     in the "anything". Et voil&aacute;, a "functional" language is born. Most pieces of data are immutable, although arrays, objects, and sets are meant to be updated.
     Many, if not most, of the features of the language have come about by actual need or desire to be able to accomplish something but lacking the tools. And it turns out that
     having JSON objects as "native" data types is pretty darn useful. And, of course, many features and ideas have come from JavaScript, the most (mis-)used dynamically typed
     language in general use today. Other features have come from the functional programming arena, with ideas from <a href="https://www.scala-lang.org/">Scala</a> and elsewhere.
  <p>Having a scripting language / calculation engine that can run as a command line filter, or as a REPL-based quick calculation tool (&agrave; la <a href="https://www.python.org/">Python</a>), or as a GUI calculator application, all in one package, is
     unprecedented (AFAIK) right now. Adding high-end features (planned) such as graphing of tables and equations, along with a popup operator and function "keyboard" will make this even
     more useful and unique. And the list of desired enhancements at <a href="https://github.com/rlwhitcomb/utilities/issues">Utilities Issues</a> continues to grow faster than
     they can be implemented.
  <h3>Unique Features</h3>
  <p>Many features are found nowhere else, or only at great cost in commercial applications:
     <ul><li>Arithmetic to thousands of digits of precision</li>
         <li>More powerful <code>case</code> statement selectors than I have seen</li>
         <li>The <code>case</code> statement is also an expression that can be used to assign one of any number of values, depending on these powerful selectors</li>
	 <li>All the latest operators from many other programming languages</li>
	 <li>Rational fractions, complex numbers, and quaternions as native data types, along with objects, arrays, and sets as standard data collections</li>
	 <li>Many Unicode symbols available for use as they were intended (that is, in the appropriate mathematical sense)</li>
	 <li>All the latest multi-line, raw, interpolated, and standard string constant forms available</li>
	 <li>Dynamic code generation and execution, via the <code>eval</code> function</li>
	 <li>Equally adept at string, numeric, and object manipulation (with matrices, file manipulation, and other enhancements still coming)</li>
         <li>JSON (<span class="underline">J</span>ava<span class="underline">S</span>cript <span class="underline">O</span>bject <span class="underline">N</span>otation) is supported natively, allowing efficient manipulation, querying, and editing</li>
         <li>Built-in functions to read and write "properties" files are available, allowing easy querying and editing (via "map" collections)
	 <li>Native support for delimited files is also coming soon, with virtually unlimited support for delimiters, quoting and escaping, etc.</li>
	 <li>Gosh, even Roman numerals are supported natively!</li>
     </ul>
  <h3>Possible Applications</h3>
  <p>What are some possible applications of this technology? Here are some of the uses I have found, and that are (mostly) demonstrated in files in the "java" and "java/test/files" directories of this repository.
  <ul><li>In combination with "curl" or "wget", efficiently processing the JSON output of web results to extract information (see "latest_push" and "latest_push.calc")</li>
      <li>Solving mathematical or programming problems, such as those at <a href="projecteuler.net">Project Euler</a> (see all the files in the "java/test/euler" directory)</li>
      <li>Efficiently doing text searches and reporting on files in a directory tree (see "constants.calc")</li>
      <li>Generating handy conversion tables (such as "java/test/files/frac_table.calc")</li>
      <li>As a desktop calculator (using GUI mode with the "-gui" command line option)</li>
      <li>As a teaching tool for learning fractions, Roman numerals, complex numbers, or even quaternions</li>
      <li>Doing statistical or other data-analysis tasks (see "mean_stddev" inside "library.calc")</li>
      <li>Developing and playing simple games (see "java/test/files/tictactoe.calc")</li>
      <li>Efficiently reformatting input data (see "versions.calc" along with "VersionRef.json")</li>
      <li>Dynamic generation of code (see "java/makeScripts.calc")</li>
      <li>Developing cross-platform scripts because the language is OS-independent, with a combination of "exec", "eval", and file-manipulation functions</li>
      <li>Quick manipulation of command-line values or results (see "java/latest_test" or "java/latest_test.bat")</li>
      <li>All kinds of date- or time-related calculations, such as intervals between dates or times, calendar generation, past or future dates (such as "what is 90 days from today?"), etc.</li>
      <li>All kinds of quick conversions, such as temperature, metric-to-English measurements, etc. (see "java/test/files/library.calc")</li>
      <li>Building a library of your own frequently-used calculations (again, "library.calc" is a good example)</li>
      <li>There are even library functions for calculating mortgage and loan payments</li>
      <li>As a teaching tool for mathematics; simple things like fractions and Roman numerals, to applications involving quaternions, or set operations.
      <li>And the ultimate application could be using "Calc" as an embedded calculation / scripting engine inside one of your own JVM-based programs</li>
  </ul>
  <h3>Notes</h3>
  <p>A note on syntax in the following pages: <b>Bold</b> values must be typed as given (except for allowed case differences) everywhere. <code>(</code> and <code>)</code> around values in the
     Command Line Options and Operators and Functions sections signify optional values / parameters, while in the Formats section, <code>[</code> and <code>]</code> are the "optional"
     markers. Items inside parentheses separated by <code>|</code> signifies one of the variations should be used.
  <p>Also note that although every effort is made to ensure this help document is up-to-date with the latest code, occasionally there will be code
     changes that are not reflected here. So, if there seems to be a difference, the code is always "right". You can also use the
     <code>c versions</code> command to check the latest revisions list to see if a change has been made that may not be reflected here (yet).
     There are also (usually) example code and tests in the <code>test/files</code> and <code>test/euler</code> directories that may shed light
     on the correct or recommended usage of the many functions and operators documented here.
  <p>And a further disclaimer: a few times, this document reflects what "ought" to be, and the code is actually wrong (this is known as a <b><i>bug</i></b> in the vernacular). That is what the <a href="https://github.com/rlwhitcomb/utilities/issues/">Issues</a> are for.
</div>
<a class="right-link" href="#topofpage">Top</a>
<hr id="Command_Line" class="sectionsep">
  <h2>Command Line</h2>
<div class="cols">
  The command line is assumed to have either the name of one or more files to process, or an expression to evaluate. There may also be options specified
  (see the next section). If there is a single value given and there exists a file by that name (possibly in another directory given by the
  <code>-inputdir</code> option), that file is read, the contents parsed, and all the expressions evaluated. That single argument can also be a
  list of file names separated by commas or semicolons, which are each treated as just described.
  <p>Otherwise, if there is more than one argument on the command line, or the single argument does not name one or more existing files,
     the command line is taken as a single expression to be parsed and evaluated.
  <p>If Calc is invoked by piping or redirecting input from somewhere, that input stream is immediately read and evaluated, and Calc will exit.
  <p>Giving a single <code>@</code> argument signals Calc to read from the console until <code>Ctrl-D</code> (or <code>Ctrl-Z</code> or <code>F6</code> on Windows) is entered.
  <p>Otherwise if there are no non-option arguments given, Calc will enter <a href="#Read_Eval_Print_loop_Commands">REPL</a> mode.
  <p>Also, if the input argument looks like <code>@<i>file_name</i></code> the <code>@</code> is discarded and the <i>file_name</i> is read.
  <p>Files are found by first trying to locate the file just as it is named. If not found, the latest input directory is used as a prefix
     (either the directory of the last file found, or the value of <code>-inputdir</code> if set). This same process is used anytime a file is read
     (such as with <code>$include</code>, or from the command line).
  <p>If a file name is given without any extension (such as <code>e_trig</code>) and the file cannot be found via the process just described, then a series
     of default file name extensions are appended to the bare name to try to find it. These extensions are: <code>".calc"</code>, <code>".expr"</code>,
     <code>".clc"</code>, <code>".xpr"</code>, <code>".ca"</code>, and <code>".ex"</code> (in that order). If no file is found using the input plus these
     extensions, and if a default input directory is given, then the search is repeated in that directory. Once all this searching fails to find any file
     the supposed file name(s) are treated as if they were a set of expressions to evaluate.
  <p>When Calc tries to evaluate an expression from a file or given on the command line and any kind of error is encountered, the
     process exit code will be set to a value from 95 to 99 depending on the type of error (99 = parsing error, 98 = execution
     error, 97 = index or state exception, 96 = I/O error, 95 = "$assert" failure). The <code>leave</code> <i>expr</i> statement can also be used
     outside of a loop or function to set a custom exit code if desired (in the range of 0 to 255).
</div>
<a class="right-link" href="#topofpage">Top</a>
<hr id="Command_Line_Options" class="sectionsep">
  <h2>Command Line Options</h2>
<div class="cols">
  Certain options can be given on the command line that affect the operation of the calculator. These options can also be set via the
  <code>CALC_OPTIONS</code> environment variable. Options specified directly on the command line will override the defaults set by
  <code>CALC_OPTIONS</code>, and options specified later on the command line override ones given earlier.
  <p>If there is a <code>"--"</code> (empty) option given, all the following values on the command line are assigned to the global variables
  <code>$0</code>, <code>$1</code>, etc. (in order) which can then be referenced from anywhere in the calculations, just as any other variables.
  There is also an array named <code>$*</code> that contains all these values (in order), and a count named <code>$#</code>, which are both
  always defined, even if there are no arguments given (in which case the array will be empty and the count set to zero).
  Any enclosing quotes on non-numeric values will be stripped off before being assigned to these values.
  If there are any of these arguments specified by <code>CALC_OPTIONS</code> they will be added in before any arguments specified on the
  actual command line. Use the <code>-clear</code> option on the command line to throw away any arguments specified by <code>CALC_OPTIONS</code> (must specify the option before the
  <code>--</code> needed to add more global variables).
  <p>This list of arguments can be terminated by another <code>"--"</code> option in order to specify other options or expressions. The <code>--</code> option can be specified multiple times to add further arguments to the script. Examples:
  <p class="indent"><code style="color:black;">&gt; </code><code style="color:blue;">c -- abc 1 2 -- -noc -quote -- 4 5 def --</code><br>
     <code style="color:grey;">&gt; </code><code style="color:blue;">$*</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">[ "abc", 1, 2, 4, 5, "def" ]</code>
  <p>Options are case-insensitive, and may be prefixed with either <code>-</code>, <code>--</code>, or on Windows <code>/</code>, as in: <code>--lightbg</code>, <code>-rational</code>,
     or <code>/quiet</code> <i>(Windows only)</i>. Almost all of the options have several aliases (mostly fewer characters) as shown in the table below. Some of these settings, in
     addition, can be set using Directives from within a script, by setting the element values of the built-in <code>"settings"</code> object, or from the Settings dialog in the GUI window. See the
     <a href="#Read_Eval_Print_loop_Commands">REPL Commands</a> and <a href="#Directives">Directives</a> sections below for additional discussion, including other aliases that can be used.
</div>
<a class="right-link" href="#Notes_on_Command_Line_Options">Notes</a>
  <div class="center">
  <table style="margin-left:auto;margin-right:auto;width:70%;">
    <caption class="tablecap">Command Line Options</caption>
    <thead>
    <tr>
      <th style="width:20%">Option</th>
      <th style="width:40%">Description</th>
      <th style="width:30%">Aliases</th>
      <th style="width:20%">Equivalent Directive</th>
    </tr>
    </thead>
    <tbody>
    <tr><td><code>-nointro</code></td><td>Do not print the introductory message in REPL mode</td><td><code>-noi</code></td><td></td></tr>
    <tr><td><code>-intro</code></td><td>Print the introductory message in REPL mode <i>(default)</i></td><td><code>-int</code>, <code>-i</code></td><td><code>$help</code> (in REPL mode)</td></tr>
    <tr><td><code>-gui</code></td><td>Start immediately in GUI mode</td><td><code>-g</code></td><td><code>$gui</code> (in REPL mode)</td></tr>
    <tr><td><code>-console</code></td><td>Start instead in console mode <i>(default)</i></td><td><code>-cons</code>, <code>-con</code>, <code>-c</code></td><td></td></tr>
    <tr><td><code>-noopt</code></td><td>Do not process the <code>CALC_OPTIONS</code> environment variable for default options on startup</td><td><code>-nooptions</code>, <code>-nooption</code></td><td></td></tr>
    <tr><td><code>-opt</code></td><td>Process <code>CALC_OPTIONS</code> from the environment <i>(default)</i></td><td><code>-options</code>, <code>-option</code></td><td></td></tr>
    <tr><td><code>-debug</code></td><td>Display a debug printout of the syntax tree for every input</td><td><code>-deb</code>, <code>-d</code></td><td><code>$debug on</code></td></tr>
    <tr><td><code>-nodebug</code></td><td>Don't display the syntax tree for debugging <i>(default)</i></td><td><code>-nodeb</code>, <code>-nod</code>, <code>-no</code></td><td><code>$debug off</code></td></tr>
    <tr><td><code>-colors</code></td><td>Use coloring (on the console) for results and messages <i>(default)</i></td><td><code>-color</code>, <code>-col</code></td><td><code>$colors on</code></td></tr>
    <tr><td><code>-nocolors</code></td><td>Do not use coloring in the console</td><td><code>-nocolor</code>, <code>-nocol</code>, <code>-noc</code>, <code>-nc</code></td><td><code>$colors off</code></td></tr>
    <tr><td><code>-darkbackgrounds</code></td><td>Use colors suitable for a dark console background<br><i>(default for Windows)</i></td><td><code>-darkbackground</code>, <code>-darkback</code>,<br><code>-darkbg</code>, <code>-dark</code>, <code>-dk</code></td><td></td></tr>
    <tr><td><code>-lightbackgrounds</code></td><td>Use colors suitable for a light (white) console background<br><i>(default for non-Windows platforms)</i></td><td><code>-lightbackground</code>,<br><code>-lightback</code>, <code>-lightbg</code>,<br><code>-light</code>, <code>-lt</code></td><td></td></tr>
    <tr><td><code>-timing</code></td><td>Display timing after each input</td><td><code>-time</code>, <code>-tm</code>, <code>-t</code></td><td><code>$timing on</code></td></tr>
    <tr><td><code>-notiming</code></td><td>Do not display timings <i>(default)</i></td><td><code>-notime</code>, <code>-not</code>, <code>-nt</code></td><td><code>$timing off</code></td></tr>
    <tr><td><code>-resultsonly</code></td><td>Do not display the input expression on output,<br>but only the results</td><td><code>-resultonly</code>, <code>-results</code>,<br><code>-result</code>, <code>-res</code>, <code>-rs</code>, <code>-r</code></td><td><code>$resultsonly on</code></td></tr>
    <tr><td><code>-expressions</code></td><td>Display both expressions and results <i>(default)</i></td><td><code>-expression</code>, <code>-express</code>,<br><code>-exprs</code>, <code>-expr</code>, <code>-exp</code>, or <code>-ex</code></td><td><code>$resultsonly off</code></td></tr>
    <tr><td><code>-quiet</code></td><td>Do not display anything<br>(suitable for behind-the-scenes calculations)</td><td><code>-q</code></td><td><code>$quiet on</code></td></tr>
    <tr><td><code>-noquiet</code></td><td>Display everything <i>(default)</i><br>(subject to other display options)</td><td><code>-nonquiet</code>, <code>-verbose</code>,<br><code>-noisy</code>, <code>-loud</code>, or <code>-nq</code></td><td><code>$quiet off</code></td></tr>
    <tr><td><code>-silence</code></td><td>Do not display directives</td><td><code>-silencedirectives</code>,<br><code>-silentdirectives</code>,<br><code>-silencedir</code>, <code>-silentdir</code>,<br><code>-silent</code></td><td><code>$silence on</code></td></tr>
    <tr><td><code>-display</code></td><td>Display results of directives <i>(default)</i></td><td><code>-displaydirectives</code>,<br><code>-displaydir</code></td><td><code>$silence off</code></td></tr>
    <tr><td><code>-rational</code></td><td>Do all possible calculations in fraction mode,<br>that is as a ratio of natural numbers<br>(as in <code>1/3</code> instead of <code>0.3333333333333333</code>)</td><td><code>-ration</code>, <code>-rat</code>,<br><code>-fractions</code>, <code>-fraction</code>, <code>-frac</code></td><td><code>$rational on</code></td></tr>
    <tr><td><code>-decimal</code></td><td>Do all calculations as decimal values <i>(default)</i></td><td><code>-dec</code></td><td><code>$rational off</code></td></tr>
    <tr><td><code>-separators</code></td><td>Display all numeric values with thousands separators</td><td><code>-separator</code>, <code>-seps</code>, <code>-sep</code>, <code>-s</code></td><td><code>$separators on</code></td></tr>
    <tr><td><code>-noseparators</code></td><td>Display all numeric values without thousands separators <i>(default)</i></td><td><code>-noseparator</code>,<br><code>-noseps</code>, <code>-nosep</code>, <code>-nos</code>, <code>-ns</code></td><td><code>$separators off</code></td></tr>
    <tr><td><code>-ignorecase</code></td><td>Ignore case of variable and member names</td><td><code>-caseinsensitive</code>,<br><code>-insensitive</code>, <code>-ignore</code>,<br><code>-case</code>, <code>-ign</code>, <code>-ins</code></td><td><code>$ignorecase on</code></td></tr>
    <tr><td><code>-casesense</code></td><td>Respect case of variable and member names <i>(default)</i></td><td><code>-casesensitive</code>, <code>-sensitive</code>,<br><code>-sense</code>, <code>-sens</code>, <code>-sen</code></td><td><code>$ignorecase off</code></td></tr>
    <tr><td><code>-quotestrings</code></td><td>Quote displayed strings in results <i>(default)</i></td><td><code>-quotestring</code>, <code>-quotes</code>,<br><code>-quote</code>, <code>-quo</code></td><td><code>$quotestrings on</code></td></tr>
    <tr><td><code>-noquotestrings</code></td><td>Do not quote displayed strings in results</td><td><code>-noquotestring</code>, <code>-noquotes</code>,<br><code>-noquote</code>, <code>-noq</code></td><td><code>$quotestrings off</code></td></tr>
    <tr><td><code>-properfractions</code></td><td>Display fractions in "proper" mode (same as <code>@F</code>)</td><td><code>-properfraction</code>, <code>-properfrac</code>,<br><code>-proper</code>, <code>-prop</code></td><td><code>$properfractions on</code></td></tr>
    <tr><td><code>-improperfractions</code></td><td>Display fractions just as fractions <i>(default)</i></td><td><code>-noproperfractions</code>,<br><code>-noproperfraction</code>,<br><code>-improperfraction</code>,<br><code>-noproperfrac</code>, <code>-improperfrac</code>,<br><code>-noproper</code>, <code>-improper</code>,<br><code>-noprop</code>, <code>-improp</code>, <code>-nopro</code>, <code>-impro</code></td><td><code>$properfractions off</code></td></tr>
    <tr><td><code>-sortobjects</code></td><td>Sort user objects by keys, instead of by order of declaration</td><td><code>-sortobject</code>, <code>-sortkeys</code>,<br><code>-sortkey</code></td><td><code>$sortobjects on</code></td></tr>
    <tr><td><code>-nosortobjects</code></td><td>Sort objects by order of declaration <i>(default)</i></td><td><code>-nosortobject</code>, <code>-nosortkeys</code>,<br><code>-nosortkey</code></td><td><code>$sortobjects off</code></td></tr>
    <tr><td><code>-locale</code> <i>locale_name</i></td><td>Specify the locale to use for messages</td><td><code>-loc</code>, <code>-l</code></td><td></td></tr>
    <tr><td><code>-inputdir</code> <i>directory</i></td><td>Specify a default directory location to find files to be processed</td><td><code>-input</code>, <code>-dir</code></td><td></td></tr>
    <tr><td><code>-library</code> <i>library_name(s)</i></td><td>Specify one or more libraries to load to begin with</td><td><code>-libraries</code>, <code>-libs</code>, <code>-lib</code>, <code>-lb</code></td><td><code>$include</code>, <code>$load</code>,<br> or <code>$open</code><br>(also see the <code>$save</code> directive)</td></tr>
    <tr><td><code>-ignorelibraries</code></td><td>Ignore previous libraries<br>(from <code>CALC_OPTIONS</code> for instance)</td><td><code>-nolibraries</code>, <code>-nolibrary</code>,<br><code>-nolibs</code>, <code>-nolib</code>, <code>-nolb</code>, <code>-nol</code>, <code>-nl</code>, <code>-n</code></td><td></td></tr>
    <tr><td><code>-requires</code>&nbsp;<i>version</i></td><td>Set a required program version</td><td><code>-requiresversion</code>,<br><code>-requireversion</code>,<br><code>-require</code>, <code>-req</code></td><td><code>$require</code> directive</td></tr>
    <tr><td><code>-base</code>&nbsp;<i>version</i></td><td>Set a required base version</td><td><code>-requiresbaseversion</code>,<br><code>-requirebaseversion</code>,<br><code>-baseversion</code></td><td><code>$require</code> ... <code>base</code> directive</td></tr>
    <tr><td><code>-noprefs</code></td><td>Don't use any saved preferences for the GUI</td><td><code>-nopreferences</code>,<br><code>-nopref</code>, <code>-nop</code></td><td></td></tr>
    <tr><td><code>-loadprefs</code></td><td>Load the saved GUI preferences <i>(default)</i></td><td><code>-loadpreferences</code>,<br><code>-loadpref</code>, <code>-ldp</code></td><td></td></tr>
    <tr><td><code>-clear</code></td><td>Clear any variables defined by <code>CALC_OPTIONS</code>.</td><td><code>-cleararguments</code>,<br><code>-clearargs</code>, <code>-clr</code></td><td></td></tr>
    <tr><td><code>-file</code>, <code>-text</code>,<br>or <code>-filetext</code></td><td>How to treat values on the command line:<br>as file names, as expression text,<br>or as files (if found) otherwise text <i>(default)</i></td><td><code>-files</code>, <code>-f</code>,<br><code>-txt</code>, <code>-tx</code>,<br><code>-ft</code></td><td></td></tr>
    <tr><td><code>-ctrlenter</code></td><td>Use <code>Ctrl+Enter</code> (or <code>&#x2318;Enter</code> on Mac)<br>to calculate in the GUI input field <i>(default)</i></td><td><code>-cmdenter</code>, <code>-ctrl</code>, <code>-cmd</code></td><td></td></tr>
    <tr><td><code>-enter</code></td><td>Use just <code>Enter</code> to calculate in GUI input field</td><td><code>-ent</code>, <code>-e</code></td><td></td></tr>
    <tr><td><code>-utf8</code></td><td>Decode all input files using the UTF-8 charset</td><td><code>-utf</code>, <code>-u</code></td><td></td></tr>
    <tr><td><code>-win1252</code></td><td>Use Windows-1252 as the input charset</td><td><code>-win</code>, <code>-w</code></td><td></td></tr>
    <tr><td><code>-charset</code> <i>charset_name</i></td><td>Use the given charset to decode input files</td><td><code>-char</code>, <code>-cs</code></td><td></td></tr>
    <tr><td><code>-default</code></td><td>Use the platform default charset <i>(default)</i></td><td><code>-def</code></td><td></td></tr>
    <tr><td><code>-output</code> <i>output_file</i></td><td>Redirect standard output to the given file</td><td><code>-out</code>, <code>-o</code></td><td></td></tr>
    <tr><td><code>-error</code> <i>error_file</i></td><td>Redirect standard error stream to file</td><td><code>-err</code></td><td></td></tr>
    <tr><td><code>-outputcs</code> <i>charset_name</i></td><td>Use the charset to encode output/error files</td><td><code>-outputcharset</code>,<br><code>-outchar</code>, <code>-outcs</code>, <code>-ocs</code></td><td></td></tr>
    <tr><td><code>-linefeed</code></td><td>Use only line feed as line separator on output</td><td><code>-lfonly</code>, <code>-lf</code></td><td></td></tr>
    <tr><td><code>-lineend</code></td><td>Use the system line separators on output <i>(default)</i></td><td><code>-lineending</code>, <code>-ln</code></td><td></td></tr>
    <tr><td><code>-variable</code><br><i>name</i><code>=</code><i>value</i><br>or <i>name</i><code>:</code><i>value</i></td><td>Set the value of a variable</td><td><code>-define</code>, <code>-var</code></td><td><i>name</i>&nbsp;<code>=</code>&nbsp;<i>value</i></td></tr>
    <tr><td><code>--</code> <i>parameter_values</i><br>( <code>--</code> )</td><td>Provide values for the <code>$0</code>, <code>$1</code>, etc. parameters<br>
            (every value between the <code>--</code> markers<br>is taken as a parameter value)</td><td></td><td></td></tr>
    <tr><td><code>-help</code></td><td>Display this help page</td><td><code>-h</code>, <code>-?</code></td><td><code>$help</code></td></tr>
    <tr><td><code>-version</code></td><td>Display the version information for the program on the console</td><td><code>-vers</code>, <code>-ver</code>, <code>-v</code></td><td><code>$version</code></td></tr>
  </tbody>
  </table>
  </div>
<a class="right-link" href="#topofpage">Top</a>
<hr id="Notes_on_Command_Line_Options" class="sectionsep">
  <h2>Notes on Command Line Options</h2>
  <div class="cols">
  <ul>
  <li>All the options are collected to begin with before processing any input files, or the input directory and library specifications. This ensures
      that any options affecting the output format, or any processing, are fully respected in the code from the very start.
  <li>The libraries are searched for beginning in the current directory, but then searching the <code>-inputdir</code> location if not found
      (same process as for regular input files).
  <li>The list of library names can be separated by commas (<code>,</code>), semicolons (<code>;</code>), or on non-Windows platforms by colons
      (<code>:</code>).
  <li>Input files (and this applies to command line, or via directives) are decoded using the charset name specified on the command line
      (via <code>-utf8</code>, or the other options) if given, or the platform default charset if none is specified. However, if there is a decoding
      error encountered, the UTF-8 charset is tried, which presumably will work better &mldr;
  <li>If there are errors in (say) the <i>locale_name</i>, <i>input directory</i>, or <i>library names</i>, these errors will (for the most part)
      be silently ignored.
  <li>Some errors (such as syntax errors within the library code) will be output as errors prior to the REPL prompt, however.
  <li>This help page (of course) is an HTML document, and so depends on a browser being installed to display it. Note that this help is also included
     as part of the Javadoc for the <code style="font-size:100%;">info.rlwhitcomb.calc</code> package.
  <li>The format for version strings for the <code>-requires</code> or <code>-baseversion</code> options is described in the <a href="#Notes_on_Directives">Notes on Directives</a> section.
  <li>Using the <code>--</code> option to set the parameter values (<code>$0</code>, <code>$1</code>, &mldr;) will append these values to any that are specified by the
      <code>CALC_OPTIONS</code> environment variable. The <code>-clear</code> option can be used to remove the environment values, to make sure (for instance) that the first
      value on the actual command line becomes <code>$0</code>.
  </ul>
  </div>
<a class="right-link" href="#topofpage">Top</a>
<hr id="Read_Eval_Print_loop_Commands" class="sectionsep">
  <h2><span class="underline">R</span>ead, <span class="underline">E</span>val, <span class="underline">P</span>rint
      <span class="underline">L</span>oop Commands</h2>
  <div class="cols">
  <p>For convenience in REPL mode, in addition to expressions and directives (as described below), there are a few commands available to do other
     things (all of which are alternatives to command-line options). Note that these commands are mostly for convenience in REPL mode, but are also available from a script or library file, as well as from the GUI input window.
     Note there are buttons in the GUI window for all but <code>$gui</code> (obviously).
  <p>Interestingly, although the Calculator can switch from console mode to GUI mode, the reverse is not possible. Also, the console application will
     not actually exit after switching modes until the GUI window is closed. This also applies to using the <code>-gui</code> option on the command line.
  <p>Also note that using the command line options (such as <code>c -version</code>) will do the operation and immediately exit, while using the
     equivalent REPL command will do the operation and return to the REPL prompt to accept further work.
  <p>Note: there is currently an open issue (<a href="https://github.com/rlwhitcomb/utilities/issues/450">#450</a>) trying to read input from the console (using <code>read('@')</code>)
     while in REPL mode, so this should only be used in a batch process until the issue is resolved.
  </div>
  <div class="center">
  <table style="margin-left:auto;margin-right:auto;">
    <caption class="tablecap">REPL Commands</caption>
    <thead>
    <tr>
      <th style="width:100">Command</th>
      <th style="width:300">Description</th>
      <th style="width:200">Aliases</th>
      <th style="width:200">Command-Line Equivalent</th>
    </tr>
    </thead>
    <tbody>
    <tr><td><code>$quit</code></td><td>Exit the program normally.</td><td><code>$exit</code>,<br><code>$q</code>, <code>$x</code></td><td></td></tr>
    <tr><td><code>$help</code></td><td>Display the HTML help page in the browser.</td><td><code>$?</code>, <code>$h</code></td><td><code>-help</code></td></tr>
    <tr><td><code>$version</code></td><td>Display program version information.</td><td><code>$vers</code>,<br><code>$ver</code>, <code>$v</code></td><td><code>-version</code></td></tr>
    <tr><td><code>$gui</code></td><td>Switch to GUI mode</td><td><code>$g</code></td><td><code>-gui</code></td></tr>
  </tbody>
  </table>
  </div>
<a class="right-link" href="#topofpage">Top</a>
<hr id="Values_Constants_and_Variables" class="sectionsep">
  <h2>Values, Constants, and Variables</h2>
<div class="cols">
  The basic building blocks of the expressions implemented here are the basic value types: numbers (either integer or real
     numbers with a fractional part), complex numbers, quaternions, strings, rational fractions, boolean values, and the <code>null</code> value.
     Numbers can be of arbitrary precision, up to a maximum of 2**32-1 (4,294,967,295) digits (although see the discussion under
     "Modes and Precision" below for further details). Strings can also be of any length up to the same number of characters (subject to
     system memory constraints of course).
  <p>Simple numeric constants follow the normal rules, and can be expressed as simple integers (as in <code>4129</code>),
     decimal numbers (as in <code>23.47</code>), or floating point constants in scientific notation (as in <code>1.2e-20</code>). Note that a number
     of the special Unicode number-like symbols are also interpreted as single numbers (see the "Operators, Functions, and Precedence" table below), such as:
     <code>&#x2473;</code> = <code>20</code>, <code>&#x247D;</code> = <code>10</code>, or <code>&#xFF19;</code> = <code>9</code>.
  <p>Complex numbers are specified by a <i>real</i> <code>,</code> <i>imaginary</i> pair as in <code>(</code> <i>real</i> <code>,</code> <i>imaginary</i> <code>)</code>, the <code><i>i</i></code> constant, or the result of the <code>complex</code> function. All the simple and some more complicated arithmetic functions are supported for complex numbers.
  <p>Quaternions are specified by the four <code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> coefficient values, or by using the built-in <code>quaternion(</code>...<code>)</code> function. The value of <code><i>i</i></code> can be promoted to a
     quaternion automatically, and <code><i>j</i></code> or <code><i>k</i></code> are also available.
     Support for basic arithmetic using quaternions and some basic conversions are available, and more is currently being developed.
  <p>Just as an aside, Calc does not support <code>NaN</code> or <code>Infinity</code> values. Operations that might result in such values generally cause errors instead.
  <p>The boolean (or "logical") constants are <code>true</code> and <code>false</code>.
  <p>The special null constant, which signifies no value, or a value that hasn't been assigned or defined yet, is simply <code>null</code>.
     Any regular variables, or array or object elements that are not (yet) defined will have the <code>null</code> value. Most operations will result
     in an error if one or more of the operands are null. There are special <code>isnull</code> and <code>notnull</code> functions that can be used to test for this to avoid
     errors if desired, as can simply using the equality / inequality operators with the <code>null</code> constant. Null values inserted into interpolated strings
     (see below) will simply insert nothing.
  <p>Values can be assigned names via the <code>const</code> declaration, and then the name used to refer to the value. Such values
     are fixed to their value at the time of the <code>const</code> declaration being evaluated. The syntax is:
  <p class="indent"><code>const</code>&nbsp;<i>id</i><code> = </code><i>expr</i>&nbsp;( <code>,</code> <i>id</i><code> = </code><i>expr</i> ) *
  <p>Such constants are typically (per convention) given UPPER case names, but this is not required. One <code>const</code> statement may be
     used to define one or many constant values, simply by listing their equivalences.
  <p>Sometimes, especially within loops or other code blocks, local variables are needed for intermediate calculations. In order to
     ensure that such values are local to the block they reside in (and aren't accidentally overriding or interfering with other
     variables of the same name), the <code>var</code> keyword can be used, as in:
  <p class="indent"><code>var</code>&nbsp;<i>id</i> (<code> = </code><i>expr</i> ) ?
  <p>Such a declaration has no other effect than to guarantee the variable is local to the closest enclosing block (indicated
     by <code>{</code> ... <code>}</code>).
     If the value expression is omitted the value is initially set to <code>null</code>, but (obviously) can be changed later.
     As with the <code>const</code> declaration, one <code>var</code> statement can also declare multiple variables, with or without their
     initial values, as in:
  <p class="indent"><code>var</code>&nbsp;<i>pos</i><code> = </code><i>27</i><code>, </code><i>start</i><code> = </code><i>0</i><code>,</code> <i>end</i><code>, </code><i>found</i>
  <p>Another way that symbolic names can be used is via the <code>enum</code> directive. This works exactly the same way as a <code>var</code> declaration, except that
     <i>a)</i> values for the names start at zero unless another expression is given,
     <i>b)</i> each successive name is given the value of the previous name plus one (in the absence of a value expression), and
     <i>c)</i> the values cannot be modified after the declaration (same as <code>const</code>).
     Such a construct is useful for declaring a meaningful name to use as a constant value where the numeric value is not important, or only marginally important.
     Perhaps some examples might help:
  <p class="indent"><code>enum</code>&nbsp;<i>north</i><code>, </code><i>south</i><code>, </code><i>east</i><code>, </code><i>west</i><br>
<code>Defining enum value north = 0<br>
Defining enum value south = 1<br>
Defining enum value east = 2<br>
Defining enum value west = 3</code>
  <p class="indent"><code>enum</code>&nbsp;<i>USER=1</i><code>, </code><i>SYSTEM</i><br>
<code>Defining enum value USER = 1<br>
Defining enum value SYSTEM = 2</code>
  <p>Like all other <code>var</code>, <code>const</code>, or <code>define</code> declarations, the <code>$clear</code> directive will erase one or more enum values.
  <p>Numeric values can also be specified using "kilobyte" notation in one of two forms: multipliers of 1000, or multipliers of 1024 (2**10).
     These multipliers are simply appended to the number to automatically multiply by the given amount. The allowed suffixes are:
     <code>Kb</code>, <code>Mb</code>, <code>Tb</code>, <code>Pb</code>, <code>Eb</code>, <code>Zb</code>, <code>Yb</code>, and <code>Bb</code>, which all multiply by their respective
     powers of 1000, while <code>Kib</code>, <code>Mib</code>, etc. multiply by the successive multiples of 1024. Note that these
     multiplier suffixes are case-insensitive.
  <p>For example:  <code>2Kb = 2000</code>, or <code>4Kib = 4096</code>. Any integer results can be formatted as these type of
     values using the <code>@k</code> or <code>@K</code> formats (the latter giving long name suffixes), and depending on the
     <code>$SI</code>, <code>$BINARY</code>, or <code>$MIXED</code> mode directives in effect. These modes function as illustrated here:<br>
<code><span style="color:grey;">&gt;</span> $mixed<br>
<span style="color:green;">Units in mixed form.</span><br>
<span style="color:grey;">&gt;</span> 2000@k<br>
<span style="color:blue;">2000 @k</span><span style="color:grey;"> &#x21E8; </span><span style="color:green;">1.95 Kbytes</span><br>
<span style="color:grey;">&gt;</span> $si<br>
<span style="color:green;">Units in SI (base ten) form.</span><br>
<span style="color:grey;">&gt;</span> 2000@k<br>
<span style="color:blue;">2000 @k</span><span style="color:grey;"> &#x21E8; </span><span style="color:green;">2.00 Kbytes</span><br>
<span style="color:grey;">&gt;</span> $bin<br>
<span style="color:green;">Units in binary.</span><br>
<span style="color:grey;">&gt;</span> 2000@K<br>
<span style="color:blue;">2000 @K</span><span style="color:grey;"> &#x21E8; </span><span style="color:green;">1.95 Kibibytes</span>
</code>
  <p>Note: the supported suffixes conform to the 2022 BIPM metric standards (<a href="https://en.wikipedia.org/wiki/Metric_prefix">Metric prefix</a>)
     for naming, up to "Ronnabytes" (10<sup>27</sup>) and "Quettabytes" (10<sup>30</sup>).
  <p>String constants are of four types: <i>simple</i> strings, constructed using either single- or double-quotes (or "smart"
     quotes: see below), <i>multiline</i> strings, constructed using a triple set of any quotes, as in
     <code>"""</code>...<code>"""</code> or <code>&#x201C;&#x201C;&#x201C;</code>...<code>&#x201D;&#x201D;&#x201D;</code>,
     which may span multiple lines (and which will contain the embedded line separators), <i>raw</i> strings, specified by
     <code>s"</code>...<code>"</code> (can be any set of the supported quote pairs) which cannot contain any escape
     sequences, but only the exact raw characters enclosed by the quotes, or <i>interpolated</i> strings,
     which allow the value of expressions (or simple variables) to be interpolated into the final string value. These are
     formed using the back-tick character: <code>`</code> ... <code>`</code>. Interpolation of values is done using either
     <code>$<i>variable</i></code> or <code>${<i>expression</i>}</code>. To embed a back-tick character in the string, use
     <code>\`</code>. Similarly, to embed a backslash, use <code>\\</code>. To embed a dollar sign in the string, use <code>$$</code>.
     The simple <code>$<i>variable</i></code> form can be used as long as the <i>variable</i> part can be unambiguously interpreted as a variable name.
     If the value is a member or array index, or any kind of expression, the <code>${...}</code> form must be used. Also note that the expression
     inside the <code>{ }</code> pair is interpreted exactly as typed (in other words, escape sequences don't have to be doubly escaped to work correctly).
     For example:
     <code>`pieces = ${split(trim(c9), '\\s+') @Q}`</code>.
  <p>Expression values inside <code>`${ ... }`</code> are evaluated recursively such that embedded <code>${ ... }</code> constructs are evaluated as needed.
     These enables such things as:<br>
     <code>a="3d";b=12.1;`&dollar;{b&commat;&dollar;{a}}` -&gt; "12.100"</code> (see "test/files/format.calc" for examples).
  <p>For any kind of string, except raw, the normal C/Java escapes such as <code>\t</code> or <code>\n</code> are also available.
     To embed any Unicode codepoint, use <code>\u<i>NNNN</i></code> where <code><i>N</i></code> is a hexadecimal digit, for values up
     to 0xFFFF, or <code>\u{<i>NNNNNN</i>}</code> for codepoints beyond the Unicode BMP (Basic Multilingual Plane) (that is, above
     65536 or 0xFFFF). Arbitrary byte values can be embedded in any strings using either octal or binary escapes, such as <code>\o345</code>
     or <code>\B00110010</code>, or "caret" notation, such as <code>\cZ</code>, as in:
   <p class="indent">
&gt;<code style="color:blue;">'\B01100001\B01100010\B01100011'</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"abc"</code><br>
&gt;<code style="color:blue;">'\o144\o145\o146'</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"def"</code><br>
&gt;<code style="color:blue;">'\u0048\u0065\u006C\u006C\u006F'</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"Hello"</code><br>
&gt;<code style="color:blue;">'\cA\cB' @x</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">'\u0001\u0002'</code>
   <p>Several types of "smart" quotes can also be used to delimit strings, such as <code>&#x00AB;This is a test&#x00BB;</code>,
     <code>&ldquo;Another test&rdquo;</code>, or <code>&lsaquo;Testing&rsaquo;</code>. The ending quote can be included in the string by escaping it.
     When interpolating values into an interpolated string, the string representation of the value is used. If the value to be interpolated is
     <code>null</code>, nothing will be added to the string.
  <p>For example, given this code:
<p class="indent"> <code>name="Jack"; `Hi, $name!`</code> </p>
 the result will be:
<p class="indent"> <code>"Hi, Jack!"</code> </p>
    For this code, however, assuming that the variable <code>junk</code> has not been given a value, we have:
<p class="indent"> <code>`Calling $junk...`</code> </p>
which gives:
<p class="indent"> <code>"Calling ..."</code> </p>
     since the value of <code>junk</code> will be <code>null</code>. Values are
     interpolated with the same value as would be displayed, including any format specifiers, except that string results will
     only be included without the quotes, and without embedded quotes being escaped. Arrays and objects will be inserted
     formatted in a canonical form, again just as they would be displayed. Using an interpolated string inside an expression
     construct inside an interpolated string is not allowed, sadly.
  <p>Note that string results are always finally displayed / returned using double quotes (and double quotes internally escaped),
     regardless of the quoting used to construct them, which includes interpolated strings &mdash; the result is always just a string
     with the values pieced into it. String values are stored in variables without any surrounding quotes, and the escaped
     characters are interpreted and stored as their actual codepoints. This means that string values inserted into interpolated
     strings will be inserted as they are stored (without quotes, etc.).
  <p>But, string results can be displayed without quotes using the <code>@q</code> format,
     or by using the <code>$quotestrings off</code> directive, or the <code>-noquotestrings</code> command line option. Also the <code>@Q</code> format can be
     used to force quoting of string results, regardless of the state of the <code>$quotestrings</code> mode.
  <p>Calc reserves the names <code>pi</code>, <code>e</code>, <code>phi</code>, and <code>i</code> for these four fundamental constants. All the various Unicode characters
     for <code>&#x1D6D1;</code> are supported, as well as Unicode alternatives for <code>e</code> and <code>i</code> (see the <a href="#Available_Operators_and_Predefined_Functions">"Operators, Functions, and Precedence"</a>
     table below). But note that these names CAN be used for local variables inside loops, and functions (and any other local code blocks), but which will override the predefined
     values in that local context (there are examples in the <code>test/files</code> directory of the source).
<p class="indent"> <code>&#x1D6D1;</code> = <code>3.14159265358979323846264338327950288...</code> <br> <code>e</code> = <code>2.71828182845904523536028747135266249...</code> <br> <code>i = ( 0, 1 )</code> </p>
  <p>The Unicode fraction characters also represent their respective values, as in:
<p class="indent"> <code>&#x00BC;</code> = <code>1/4</code> or <code>0.25</code> <br> <code>&#x215A;</code> = <code>5/6</code> or <code>0.8333...</code>
  <p>A fraction (rational) value can also be constructed using the <code>f'...'</code> syntax, where the string within the quotes can be one,
    two, or three integers (optional minus signs), separated by spaces or <code>,</code> or <code>;</code> or <code>/</code>, or one of the
    Unicode fraction characters optionally preceded by an integer. Some examples:
  <p class="indent"> <code>f'2&#x00BC;'</code> = <code>2.25</code> or <code>f'1 2/3'</code> = <code>1.66666...</code>
  <p>Complex numbers are constructed as such: <code>(</code>&nbsp;<i>real</i>&nbsp;<code>,</code>&nbsp;<i>imaginary</i>&nbsp;<code>)</code>. There is also the <code>complex</code> function that accepts one or two arguments:
     either the two value parts or a string convertible to these two parts, or an object with <code>r</code> and <code>i</code> keys, or <code>radius</code> and <code>theta</code> keys, or an array with two values.
  <p>The string syntax for <code>complex(...)</code> is either <code>"( <i>expr</i> )"</code>, <code>"( <i>n</i>, <i>n</i> )"</code>, or <code>"( <i>n</i> &pm; <i>n</i> i )"</code>, or <code>"{ r: <i>radius</i>, &#x03B8;: <i>theta</i> }"</code>.
  <p>A complex number can also be specified as a constant via the <code>c'...'</code> form where the quoted part is exactly the string syntax given above (without the enclosing parentheses), as in <code>c'3/4 - 2/3i'</code> or <code>c'17 + 3i'</code>. Note however that the polar syntax is not supported in this context.
  <p>There is also a constant type used to express values as Roman Numerals. The syntax is <code>R'<i>xxxx</i>'</code>, where the
     digits are the typical Roman values of <code>I</code> (one), <code>V</code> (five), <code>X</code> (ten), and so on (case-insensitive), but also including the Unicode
     values in the range of <code>'\u2160'</code> (<code>&#x2160;</code> or one) to <code>'\u2182'</code> (<code>&#x2182;</code> or ten thousand).
     You can use the <code>@r</code> or <code>@R</code> formats to display positive integer values in this form as well.
     Note that the range of possible values for these formats are the integers from 1 to 39,999.
  <p>Time and duration values (to nanosecond precision) can be entered as:
<p class="indent"> <code>h'<i>hh</i>:<i>mm</i>:<i>ss</i>.<i>nnnnnnnnn</i></code>&nbsp;[ <code>a</code> | <code>p</code> | <code>am</code> | <code>pm</code> ]<code>'</code> ("hour-minute-second" or time-of-day value)</p>
or
<p class="indent"> <code>t'<i>nn.nn</i>&nbsp;w</code> | <code>d</code> | <code>h</code> | <code>m</code> | <code>s'</code> ("time amount" or duration value)</p>
     These values are computed and stored as integer nanoseconds (so that 1,000,000,000 equals one second), with midnight (<code>12:00:00.0 am</code>) as zero for time-of-day. They can be used
     in any other kind of operation, or formatted again as an <i>hour:minute:second</i> time or a duration (in weeks, down to seconds) using the <code>@h</code> or <code>@t</code> formats. See the Formats section below for more details.
     For example:
<p class="indent"> <code><span style="color:blue;">t'27h' + t'13m' + t'27.9s' @h</span><span style="color:grey;"> &#x21E8; </span><span style="color:green;">h'27:13:27.9'</span></code> </p>
or
<p class="indent"> <code><span style="color:blue;">h'12:30 pm' - h'11:45 am' @mt</span><span style="color:grey;"> &#x21E8; </span><span style="color:green;">t'45m'</span></code> </p>
or yet
<p class="indent"> <code><span style="color:blue;">h'8:30 am' + t'1h' + t'37m' @h</span><span style="color:grey;"> &#x21E8; </span><span style="color:green;">h'10:07'</span></code> </p>
  <p>Date values can be entered as (basically the <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO-8601</a> format with more separators allowed):
<p class="indent"> <code>d'<i>yyyy</i>-<i>mm</i>-<i>dd</i>'</code>&nbsp;|&nbsp;<code>d'<i>yyyymmdd</i>'</code> </p>
or as U.S. format dates:
<p class="indent"> <code>D'<i>mm</i>/<i>dd</i>/<i>yyyy</i>'</code>&nbsp;|&nbsp;<code>D'<i>mmddyyyy</i>'</code> </p>
   Such values are computed as a positive or negative integer number of days from the "epoch" day (Jan. 1, 1970) (which is day zero, so that
   <code>D'12/31/1969'</code> is <code>-1</code> and <code>d'1970-01-02'</code> is <code>1</code>). Date arithmetic is supported, such as:
<p class="indent"> <code><span style="color:blue;">d'2001-09-11' + 1000@e</span><span style="color:grey;"> &#x21E8; </span><span style="color:green;">d'2004-06-07'</span></code> </p>
or
<p class="indent"> <code><span style="color:blue;">D'9/2/1945' - d'1941/12/7'</span><span style="color:grey;"> &#x21E8; </span><span style="color:green;">1365</span></code> </p>
  <p>Dates (either U.S. or ISO format) can be entered with two-digit years, which are interpreted as 21<sup>st</sup> century for values less than the
     current year plus 30, or 20<sup>th</sup> century otherwise. So, for instance, <code>D'9/1/50'</code> refers to Sept. 1, 2050, while <code>D'9/1/51'</code>
     is Sept. 1, 1951 (as of 2021).
  <p>Some operators and operations require integer values (such as factorial and the logical bit operations). If the value given is not integral an error will
     be displayed and the calculation aborted. Most of the basic arithmetic operators can operate on rational fractions. The trig,
     log, and power operations do not. Therefore, in rational mode, if an operation returns a decimal value, Calc will attempt
     to convert it to a rational fraction, which may look very strange. Also, in rational mode, fractions will also be maintained
     in canonical form, that is, with the least common denominator.
  <p>Calc has the capability to define and use variables, which are simply named representations of values. Variable names can be
     of any length, but must start with either an underscore (<code>"_"</code>) or a letter, and may contain any combination of
     underscores, letters, and digits. "Letters" mean basically any Latin alphabet character, but digits only means <code>"0"</code> to <code>"9"</code>.
     Note that loop variables (see <code>LOOP</code> statement below) follow the same rules.
     <em>Note that the predefined constant, function, and statement
     names may NOT be used as variable names.</em> The value of a variable is the value last assigned to it by
     one of the assignment operators.  If no value has been previously assigned the value will be <code>null</code>.
  <p>Normally variable names (and object member names (see below)) are case-sensitive (that is, <code>"f" != "F"</code>), but there is a command-line option and a directive
     to change this behavior. The predefined values are all defined as lower case (with the addition of <code>PHI</code> which is the reciprocal of <code>phi</code>.
     The predefined functions generally have three different case spellings in case-sensitive mode, and, of course,
     can be cased however you like in case-insensitive mode. Variables remain defined with the
     same casing as they were found in a script, but the "ignore case" mode simply changes how they are looked up in the variable dictionary. Therefore, changing
     the mode option will not "undefine" any variables from the way they were originally declared / used.
  <p>Values can be grouped into lists of values (an <i>array</i>), into sets of key/value pairs (an <i>object</i>), or into sets of unique values
     (a <i>set</i>). Arrays can be multi-dimensional. The inside dimensions do not have to be all the same length. The types of values in an array need not
     be homogeneous. And, in fact, the values in an array can be objects and sets as well as simple values. The keys in an object must be
     either identifiers (same rules as variable names), regular strings, or interpolated strings, but the values can be anything
     (even other objects, arrays, sets, or just simple values). Sets usually contain simple values, but can contain objects, or arrays as well.
     Attempting to add one set to another will simply combine the sets into one (set "union"). Similarly "adding" two arrays or objects will simply
     combine them into one collection of the same type.
  <p>To reference values in arrays or objects, or the individual characters in a string, the following syntax can be used:
     <i>variable</i><code>[</code> <i>expr</i> <code>]</code> where the expression must evaluate to an integer value (for any kind of value) or the name of a key (for objects).
     Normally the index is in the range of 0 to the length of the object - 1. However, for convenience, negative indices indicate an
     offset from the end of the list. For example, for an array of 4 values, such as <code>a = [ 1, 2, 3, 4 ]</code>, <code>a[0]</code>
     or <code>a[-4]</code> both reference the value <code>1</code>, and <code>a[3]</code> and <code>a[-1]</code> reference the value <code>4</code>
     Members of an object can also be referenced by <i>variable</i><code>.</code><i>member</i> (where <i>member</i> is the identifier or string referencing
     a key of one of the key/value pairs in the object).  All this is consistent with JavaScript, or JSON usage (with the slight
     enhancement that identifiers without quotes or interpolated strings can be used as keys here, while in pure JSON form only simple quoted
     strings are allowed as keys).
  <p>As another convenience for dynamically referencing member names, an interpolated string (in the form <code>`</code>...<code>`</code>) can be used to reference
     the member, and the current value of any expressions or variables referenced in the string will be used to construct the member name. Regular quoted
     strings will have their outer level of quotes removed before being used as member names, so that a name of <code>member</code> is the same as
     <code>"member"</code> or <code>'member'</code>. If a double set of quotes is used, the inner quotes will be retained as part of the member name, as in:
     <code>'"member"'</code> translates to an actual member name of <code>"member"</code>. So, the syntax for accessing a member using array or list
     notation (as in <code>['"member"']</code>) is actually the same as without the brackets. Any quotes can be used in either case.
     Here is an (extreme) example: <code>a.'"f"'."'h'"</code> can be referenced using <code>m1='"f"';m2="'h'";a.`$m1`.`$m2`</code>.
  <p>Array, object, or set constants can be expressed using this JSON notation. Note: the <i>set</i> is a Calc extension that does not exist in regular JSON,
     so be aware of this if data generated in Calc is to be shared with other applications. For example:
<p class="indent"> <code style="color:green;">{ a: 1, b:2, c:'abc', d:[ 1,3,4 ] }</code> </p>
<p class="indent"> <code style="color:green;">[ 1, 3, 5, { a:false, b:true }, 15, 17 ]</code> </p>
<p class="indent"> <code style="color:green;">[ [ 1, 3, 5 ], [ 2, 4, 6 ] ]</code> </p>
<p class="indent"> <code style="color:green;">{ first: { "flag": true, "message": 'Testing' }, second: { "flag":true, "message": 'Working' } }</code> </p>
<p class="indent"> <code style="color:green;">{ "Red", "Green", "Yellow", "Blue", "Gold" }</code> </p>
     Note that string object keys (as in <code>"key"</code>) do reference the same element as an identifier key (as in
     <code>key</code>). But, quoted keys are supported, as in:
<p class="indent"> <code style="color:green;">value = { '"flag"': true, flag: 'Red' }</code> </p>
   and the elements are accessed as <code>value.'"flag"' &#x21E8; true</code> and <code>value.flag &#x21E8; "Red"</code> or <code>value."flag" &#x21E8; "Red"</code>.
  <p>Objects, arrays, and sets can be combined (concatenated) using the <code>+</code> and <code>+=</code> operators.  If the first operand is an array, the result of
     the operation will also be an array. Similarly if the first operand is an object or set, the result will be also. If an array is added to an object
     the whole array will be added as one value, with the key generated in the same way (as in <code>#<i>n</i></code>) as using an index to set the value.
     Similarly for an object or set added to an array. This way, composite objects (arrays of sets, or sets of objects) can be easily build up.
     For example:
<p class="indent"> <code>&gt;</code><code style="color:blue;">a = [ 1, 2, 3 ]</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">[ 1, 2, 3 ]</code><br>
    <code>&gt;</code><code style="color:blue;">b = { c: 5, d: 'def' }</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">{ c: 5, d: 'def' }</code><br><br>
    <code>&gt;</code><code style="color:blue;">a + b</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">[ 1, 2, 3, { c: 5, d: 'def' } ]</code><br>
or<br>
    <code>&gt;</code><code style="color:blue;">b + a</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">{ c: 5, d: 'def', #2: [ 1, 2, 3 ] }</code><br>
or<br>
    <code>&gt;</code><code style="color:blue;">a + a</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">[ 1, 2, 3, 1, 2, 3 ]</code><br>
or<br>
    <code>&gt;</code><code style="color:blue;">a += 'abc'</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">[ 1, 2, 3, 'abc' ]</code><br><br>
    <code>&gt;</code><code style="color:blue;">s = { "sunny", "cloudy", "rain" }</code><br>
    <code>&gt;</code><code style="color:blue;">t = { 'snow', 'ice', 'rain' }</code><br>
    <code>&gt;</code><code style="color:blue;">s + t</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">{ "sunny", "cloudy", "rain", "snow", "ice" }</code>
    <p>Note that using <code>+=</code> to add values to an array is the equivalent of doing a "push" operation on a stack or queue.
</div>
<a class="right-link" href="#topofpage">Top</a>
<hr id="Modes_and_Precision" class="sectionsep">
  <h2>Modes and Precision</h2>
<div class="cols">
  Calc can do essentially arbitrary precision arithmetic. It can also do arithmetic on rational fractions (as in <code>1/4 + 1/2 = 3/4</code>).
      The default setting is to do decimal arithmetic, but this can be adjusted using either command line options (see
      <code>-rational</code> and <code>-decimal</code> above), or using directives during execution.  The default precision for
      all calculations is 128-bit arithmetic, or approximately 34 digits of decimal precision. The precision can be adjusted up to
      12,500 decimal digits (due to somewhat arbitrary restrictions on our calculation of the value of <code>&#x1D6D1;</code>) using any of
      several directives.
  <p>Unlimited (up to the plaform limit of 4 billion digit) precision is available, and many/most calculations will honor that,
      although some trig / log calculations are still (implementation-restriction) limited to "double" precision. Also, the precision of division
      operations will be automatically limited to our (arbitrary) 12,500 digits even in "unlimited" mode if the result is an infinitely repeating
      value (such as the result of <code>1/7 = 0.142857142857...</code>).
  <p>Some operators (such as factorial) do not respect the precision setting, and do their calculations to their exact value regardless of the setting
     (not sure if this is wise or not, but it seems weird to restrict the precision in such cases in a rather arbitrary and unintuitive way).
     In most division operations with a dividend of this size (that is, larger than the 12,500 limit), the precision for the result is the
     larger of the precision of the dividend or the preassigned limit.
     Also, in rational mode the precision setting does not apply to the numerator or denominator values of the fractions.
  <p>As another side note, the Bernoulli numbers are best calculated in rational mode, since they are defined as the ratio of integer values.
     Of course, in decimal mode the fractions will be divided and the results returned as a decimal value up the specified precision.
  <p>Trigonometric calculations are, by default, done in radians, but this can be changed to use degrees using the <code>$degrees</code> directive,
     changed to use gradians or grads using the <code>$grads</code> directive, or back using the <code>$radians</code> directive.
  <p>Dates have a valid range of <code>d'-9999/01/01'</code> to <code>d'9999/12/31'</code>, or a total range of 7,304,484 days. Significantly, dates
     use the <a href="https://www.dictionary.com/browse/proleptic">proleptic</a> values of the Gregorian calendar extended indefinitely to the past
     and future, such that date results prior to the adoption of the Gregorian calendar (in roughly 1582 AD) <strong>will not correspond</strong>
     to the actual calendar dates at that time. Also note that none of the other calendar systems that are or were used around the world (such as
     Julian, Hebrew, Iranian Muslim, Buddhist, Japanese, Chinese, Ethiopian, etc.) are supported.
  <p>Dates and times represent date/time values (such as birthdays, anniversaries, or wall clock times), and have no reference to time zones, although
     using time arithmetic can be a convenient way to do conversion of times between time zones.
</div>
<a class="right-link" href="#topofpage">Top</a>
<hr id="Formats" class="sectionsep">
  <h2>Formats</h2>
<div class="cols">
  The results of most operations can be displayed using alternative formats for better comprehension. To specify an alternative
     format, append <code>@<i>format</i></code> to the expression. In some cases, the uppercase equivalent can be given, which will
     do the same formatting, except mapping the result to UPPER case as well. The exceptions are <code>@e</code> which formats the
     value as a date in ISO-8601 form (<code><i>yyyy</i>-<i>mm</i>-<i>dd</i></code>), while <code>@E</code> puts the value in U.S.
     format (<code><i>mm</i>/<i>dd</i>/<i>yyyy</i></code>), <code>@f</code> which formats the
     result as a fraction (even if "improper"), such as <code>15/8@f = 15 / 8</code>, while <code>@F</code> formats the result as a 
     proper fraction (as in <code>15/8@F = 1 7/8</code>),
     <code>@O</code> or <code>@D</code> which would make no difference in the outputs, <code>@J</code> which doesn't make sense
     given the output could have strings which shouldn't be case-shifted, and <code>@K</code> which uses the long-format names instead of the short form.
</div>
<a class="right-link" href="#Notes_on_Formats">Notes</a>
  <div class="center">
    <table style="margin-left:auto;margin-right:auto;">
      <caption class="tablecap">Formats</caption>
      <thead>
      <tr>
        <th style="width:100">Format</th>
        <th style="width:460">Description</th>
      </tr>
      </thead>
      <tbody>
      <tr><td><code>@</code>[<code>-</code>]<code>h</code></td><td>Display as a time value (hours:minutes:seconds.nanos)<br>as in <code style="color:blue;">98007900000000 @h</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">h'27:13:27.9'</code></td></tr>
      <tr><td><code>@</code>[<code>-</code>][<i>nn</i>][<code>w</code>|<code>d</code>|<code>h</code>|<code>m</code>|<code>s</code>]<code>t</code></td><td>Format as a time (duration), optional rounding<br>as in <code style="color:blue;">98007900000000 @2ht</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">t'27.22h'</code></td></tr>
      <tr><td><code>@l</code></td><td>Format result string in lower case<br>as in <code style="color:blue;">'Hello, World!' @l</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"hello, world!"</code></td></tr>
      <tr><td><code>@u</code></td><td>Format result string in UPPER case<br>as in <code style="color:blue;">'Hello, Everyone!' @u</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"HELLO, EVERYONE!"</code></td></tr>
      <tr><td><code>@q</code></td><td>Remove quotes from the result<br>as in <code style="color:blue;">"abc" @q</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">abc</code></td></tr>
      <tr><td><code>@Q</code></td><td>Add extra quotes around the result<br>as in <code style="color:blue;">"abc" @Q</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"\"abc\""</code></td></tr>
      <tr><td><code>@</code>[[<code>+</code>|<code>-</code>]<i>n</i>[<code>.</code><i>m</i>]][<code>,</code>|<code>_</code>]<code>d</code></td>
          <td>Primarily for rational mode: format the result as a decimal value,<br>with optional separators, and optionally rounding to scale of <code>+</code>|<code>-</code> <i>n</i> digits<br>and where <i>m</i> is 0 padding width<br><code>,</code> adds thousands separators regardless of settings<br>and <code>_</code> removes them always<br>as in <code style="color:blue;">1234.567 @2,d</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">1,234.57</code><br>and <code style="color:blue;">2.345e9 @.12_d</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">002345000000</code><br>(prints codepoint for single character<br>as in <code style="color:blue;">"&#x1D6D1;" @d</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">120529</code>)</td></tr>
      <tr><td><code>@</code>[<code>-</code>]<code>e</code></td><td>Format an integer as a date (yyyy-mm-dd) (ISO-8601 format)<br>as in <code style="color:blue;">18908 @e</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">d'2021-10-08'</code><br><code>-</code> strips the decoration, as in <code style="color:green">"2020-10-08"</code></td></tr>
<tr><td><code>@</code>[<code>-</code>]<code>E</code></td><td>Format an integer as a date (mm/dd/yyyy) (U.S. format)<br> as in <code style="color:blue;">-10252 @E</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">D'12/07/1941'</code><br><code>-</code> strips the decoration, as in <code style="color:green">"12/07/1941"</code></td></tr>
      <tr><td><code>@</code>[<code>-</code>]<code>f</code></td><td>For decimal mode, format the result as a rational fraction<br>as in <code style="color:blue;">5.125 @f</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">41 / 8</code><br>using <code>-</code> will not use spaces around the <code>/</code></td></tr>
      <tr><td><code>@</code>[<code>+</code>]<code>F</code></td><td>Format as a proper fraction (with possible integer portion)<br>as in <code style="color:blue;">3.75 @F</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">3 3/4</code><br>using <code>+</code> will add spaces around the <code>/</code></td></tr>
      <tr><td><code>@c</code></td><td>Format an integer (range of 0 .. 0x10FFFF) as a Unicode character<br>as in <code style="color:blue;">120529 @c</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"&#x1D6D1;"</code></td></tr>
      <tr><td><code>@i</code></td><td>Format the result as a complex number, as in<br><code style="color:blue;">(1,1)**3 @i</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">-2 + 2&#x2148;</code></td></tr>
      <tr><td><code>@p</code></td><td>Format the result as a complex number<br>in polar form, as in<br><code style="color:blue;">(3,4) @p</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">{ r: 5, &#x03B8;: 0.9272952180016122 }</code></td></tr>
      <tr><td><code>@</code>[[<code>-</code>]<i>n</i>[<code>.</code><i>m</i>[<code>.</code><i>p</i>]]][<code>,</code>|<code>_</code>]<code>j</code></td><td>Format the result as a "pretty printed" JSON result<br>(multiple lines with indents) with<br><code>-</code> to remove initial newline, <i>n</i> to set initial indent,<br><code>.</code><i>m</i> to set indent increments,<br><code>.</code><i>p</i> to skip outer levels, and<br>with optional separators in numeric values</td></tr>
      <tr><td><code>@</code>[<code>-</code>]<code>r</code></td><td>Format the result as a Roman Numeral value<br>as in <code style="color:blue;">2021 @R</code><code style="color:gray;"> &#x21E8; </code><code style="color:green;">R'MMXXI'</code></td></tr>
      <tr><td><code>@</code>[<code>-</code>]<code>x</code></td><td>For integers and strings, format in hexadecimal form<br>as in <code style="color:blue;">456 @x</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">0x1c8</code><br>or <code style="color:blue;">'abc' @x</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">'\u0061\u0062\u0063'</code><br>using <code>-</code> will remove the leading modifier</td></tr>
      <tr><td><code>@</code>[<code>-</code>]<code>o</code></td><td>For integers and strings, format in octal form<br>as in <code style="color:blue;">345 @o</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">0531</code><br>or <code style="color:blue;">'abc' @o</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">'\o141\o142\o143'</code><br>using <code>-</code> will remove the leading modifier</td></tr>
      <tr><td><code>@</code>[<code>-</code>]<code>b</code></td><td>For integers and strings, format in binary form<br>as in <code style="color:blue;">231 @b</code><code style="grey;"> &#x21E8; </code><code style="color:green;">0b11100111</code><br>or <code style="color:blue;">'abc' @b</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">'\B01100001\B01100010\B01100011'</code><br>using <code>-</code> will remove the leading modifier</td></tr>
      <tr><td><code>@k</code></td><td>Use kilobyte, megabyte, etc. notation for the value<br>(depending on the SI / BINARY mode)<br>as in <code style="color:blue;">2000 @k</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">1.95 Kibytes</code> (binary)<br>or <code style="color:blue;">2000 @k</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">2.00 Kbytes</code> (SI)<br>or <code style="color:blue;">2000 @K</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">2.00 Kilobytes</code> (SI)</td></tr>
      <tr><td><code>@</code>[<code>+</code>|<code>,</code>|<code>_</code>]w</code></td><td>Convert the (integer) value to words<br>with optional separators, as in<br><code style="color:blue;">235 @w</code><code style="color:gray;"> &#x21E8; </code><code style="color:green;">two hundred thirty-five</code><br>or <code style="color:blue;">235 @+w</code><code style="color:gray;"> &#x21E8; </code><code style="color:green;">two hundred and thirty-five</code></td></tr>
      <tr><td><code>@</code>[[<code>+</code>|<code>-</code>]<i>nn</i>][<code>,</code>|<code>_</code>]<code>%</code></td><td>Format as a percentage, with optional separators, and<br>optionally rounding to <i>nn</i> digits<br>as in <code style="color:blue;">10.08745 @2,%</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">1,008.75%</code></td></tr>
      <tr><td><code>@</code>[[<code>+</code>|<code>-</code>]<i>nn</i>][<code>,</code>|<code>_</code>]<code>$</code></td><td>Format as a currency value with the locale-specific currency symbol,<br>optionally setting separators and number of fraction digits<br>as in <code style="color:blue;">1500 @3,$</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">$1,500.000</code></td></tr>
      <tr><td><code>@</code>[[<code>+</code>|<code>-</code>]<i>nn</i>]<code>s</code></td><td>Left/right/center justify the string value inside the <i>nn</i> width<br>as in <code style="color:blue;">'abc' @+10s</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"&nbsp;&nbsp;&nbsp;&nbsp;abc&nbsp;&nbsp;&nbsp;"</code>,<br><code style="color:blue;">'abc' @-10s</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;abc"</code>,<br><code style="color:blue;">'abc' @10s</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"abc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"</code><br>for objects, arrays, and sets, simply convert to a string<br><i>nn</i> is ignored, but use <code>-</code> to not add extra space, as in<br><code style="color:blue;">[ 1, 2, 3 ] @-s</code><code style="color:grey;"> &#x21e8; </code><code style="color:green;">"[1,2,3]"</code></td></tr>
    </tbody>
    </table>
  </div>
<a class="right-link" href="#topofpage">Top</a>
<hr id="Notes_on_Formats" class="sectionsep">
  <h2>Notes on Formats</h2>
<div class="cols">
  <p>The <code>@w</code> (and <code>@W</code>) formats use the Conway-Guy-Wechsler (from "The Book of Numbers" [1996]) proposal,
     as explained here: <a href="https://en.wikipedia.org/wiki/Names_of_large_numbers">Names of large numbers</a>. We always use
     the US, Canada, and modern British (short scale) form, regardless of the locale used.
  <p>The Conway-Guy system conflicts with two dictionary words "sexdecillion" and "novemdecillion" (producing instead "sedecillion" and "novendecillion"). So we use the system but translate "sedeci" to "sexdeci" everywhere and similarly "novendeci" to "novemdeci" (also affecting "novemdecicentillion" and " and "sexdecicentillion", for instance, as suggested in the Wikipedia article in the middle of the "Extensions of the standard dictionary numbers" section).
  <p>The implementation here will work up to a
     value of around 10<sup>3,000,000,000</sup>. The optional <code>+</code> modifier will modify the formatting of a value like 312 from <code>312@w -> three hundred twelve</code> to <code>312@+w -> three hundred <i>and</i> twelve</code>. The <code>@,w</code> or <code>@_w</code> formats will add or omit thousands separators to the results, as in: <code>12345678 @,w -> twelve million, three hundred forty-five thousand, six hundred seventy-eight</code>.
  <p>While thousands separators are supported on output (the <code>d</code>, <code>j</code>, <code>%</code>, and <code>$</code> formats), they are not supported on input. For this reason, the separators setting is ignored for <code>$save</code>, and should be avoided if the output is meant to be read as input by Calc.
  <p>The optional <code>-</code> modifier for <code>@h</code>, <code>@t</code>, <code>@e</code>, and <code>@r</code> will remove the constant formatting
     and treat the value as a simple quoted string. This simplifies using these values inside interpolated strings (for instance), as in:&nbsp;
  <code style="color:blue;">today@-e</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"2022-10-17"</code> while
  <code style="color:blue;">today@e</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">d'2022-10-17'</code>
  <p>For strings that contain the standard color codes (such as <code style="color:blue;">BLUE_BOLD</code> from <code>library.calc</code>) the
     <code>@Q</code> format will expose those codes instead of using them to color the result.
</div>
<a class="right-link" href="#topofpage">Top</a>
<hr id="Available_Operators_and_Predefined_Functions" class="sectionsep">
  <h2>Available Operators and Predefined Functions</h2>
<div class="cols">
  <p>There are a wide variety of arithmetic and logical operators available, as well as a number of common arithmetic functions supported by Calc.
     For the most part, automatic coercions are applied to the operands of functions if necessary (and possible), and the results of operations are
     automatically widened to support the results. The only exceptions to this are some of the lesser-used trig and log functions which can only be
     done to "double" precision (currently &mdash; this may change in subsequent versions).
  <p>Names of predefined functions are available in 3 or more forms: all lower case, all UPPER case, one or more MixedCase forms, and/or a Unicode symbol.
     For example: <code>sin</code>, <code>SIN</code>, or <code>Sin</code>, and <code>sumof</code>, <code>SUMOF</code>, <code>Sumof</code>,
     <code>SumOf</code>, <code>sumOf</code>, or <code>&#x2211;</code>.
</div>
<a class="right-link" href="#Notes_on_Operators_and_Functions">Notes</a>
  <div class="center">
  <table style="margin-left:auto;margin-right:auto;">
    <caption class="tablecap">Operators, Functions, and Precedence</caption>
    <thead>
    <tr>
      <th style="width:8%">Level</th>
      <th style="width:40%">Operator</th>
      <th style="width:40%">Description</th>
      <th style="12%">Associativity</th>
    </tr>
    </thead>
    <tbody>
    <tr><td>41</td>
      <td><code>pi</code>, <code>&#x1D6D1;</code>, <code>e</code>, <code>&#x2107;</code>, <code>&#x2147;</code>, or <code>&#x212f;</code><br>
          <code>phi</code>, <code>&#x03C6;</code>, <code>&#x03D5;</code><br>
          <code>PHI</code>, <code>&#x03A6;</code><br>
	  <code>i</code>, <code>&#x0131;</code>, <code>&#x0399;</code>, <code>&#x03B9;</code>, or <code>&#x2148;</code><br>
          <code>j</code>, <code>J</code><br>
          <code>k</code>, <code>K</code><br>
          <code>true</code> or <code>false</code><br>
          <code>null</code> or <code>nil</code> or <code>&#x2400;</code><br>
          <code>&#x2205;</code> or <code>&#x29B0;</code><br>
          <code>&#x00BC;</code>, <code>&#x00BD;</code>, <code>&#x00BE;</code>, <code>&#x2150;</code>, <code>&#x215E;</code>, etc.<br>
          <code>&#x2460;</code> .. <code>&#x2473;</code>, <code>&#x2474;</code> .. <code>&#x2487;</code>, <code>&#xFF10;</code> .. <code>&#xFF19;</code>, etc.<br>
          <code>today</code><br>
          <code>now</code><br>
          <code>info</code><br>
          <code>env</code><br>
          <code>settings</code><br>
          any string, binary, octal, hex, fraction, etc. constant</td>
      <td>the fundamental constants <code>&#x1D6D1;</code> and <code>e</code><br>
          the fundamental Golden Ratio constant <code>&#x03C6;</code> or <code>phi</code><br>
          <code>(1 / &#x03C6;)</code> which is also <code>(&#x03C6; - 1)</code><br>
          <code><i>i</i></code>, <code>&#x221A;-1</code>, or <code>(0,1)</code> (root of imaginary numbers)<br>
          <code><i>j</i></code> or <code>(0,0,1,0)</code> (third quaternion axis root)<br>
          <code><i>k</i></code> or <code>(0,0,0,1)</code> (fourth quaternion axis root)<br>
          the <code>boolean</code> values<br>
          the <code>null</code> (empty) value<br>
          the empty object / set (same as <code>{ }</code>)<br>
          any of the Unicode fraction values, where <code>&#x215E; = 7/8</code><br>
          other Unicode digit / number symbols, where <code>&#x2487; = 20</code><br>
          the current date, comparable to <code>d'2021/11/19'</code><br>
          the current time, comparable to <code>h'11:10 am'</code><br>
          current Calc information (<code>version</code>, <code>os</code>, etc.)<br>
          all the current environment variables (such as <code>PATH</code>)<br>
          the current Calc settings (<code>trigMode</code>, <code>silent</code>, etc.)<br>
          that constant value, as in <code>"Hello"</code>, <code>127</code>, or <code>0xA8</code></td><td>N/A</td></tr>
    <tr><td>40</td><td><code>{</code> (&nbsp;<i>key:value pairs</i>&nbsp;) <code>}</code></td><td>define an object</td><td>left to right</td></tr>
    <tr><td>39</td><td><code>[</code> (&nbsp;<i>expr list</i>&nbsp;) <code>]</code><br><i>var</i> <code>[</code> <i>expr</i> <code>]</code> or <i>var</i>&nbsp;<code>&#x2080;</code> .. <code>&#x2089;</code>
         or <code>&#x23e8;</code></td><td>define an array,<br>or access elements of an array, string, or object</td><td>left to right</td></tr>
    <tr><td>38</td><td><code>{</code> (&nbsp;<i>expr list</i>&nbsp;) <code>}</code></td><td>define a set</td><td>left to right</td></tr>
    <tr><td>37</td><td><code>(</code> <i>expr</i> <code>,</code> <i>expr</i> <code>)</code></td><td>define a complex number</td><td>left to right</td></tr>
    <tr><td>36</td><td><i>object</i> <code>.</code> <i>member</i></td><td>access an object member</td><td>left to right</td></tr>
    <tr><td>35</td><td><i>expr</i> <code>HAS</code> ( <i>id</i> | <i>string</i> | <code>[</code> <i>expr</i> <code>]</code> )</td><td>safely check for member or index</td><td>left to right</td></tr>
    <tr><td>34</td><td><i>expr</i> <code>IS</code> ( <i>string</i> | <i>type_id</i> )</td><td>check if expression is the given type (same as <code>typeof</code>)</td><td>left to right</td></tr>
    <tr><td>33</td><td><i>expr</i> <code>[</code> <i>expr</i> ? <code>:</code> <i>expr</i> ? <code>]</code></td><td>produce a slice of an object or string</td><td>left to right</td></tr>
    <tr><td>32</td><td><code>( </code><i>expr</i><code> )</code></td><td>group an expression</td><td>N/A</td></tr>
    <tr><td rowspan="101">31</td>
            <td><code>ABS</code>&nbsp;<i>expr</i></td><td>absolute value</td><td rowspan="101">left to right</td></tr>
            <tr><td><code>SIN</code>&nbsp;<i>expr</i></td><td>sine</td></tr>
            <tr><td><code>COS</code>&nbsp;<i>expr</i></td><td>cosine</td></tr>
            <tr><td><code>TAN</code>&nbsp;<i>expr</i></td><td>tangent</td></tr>
            <tr><td><code>ASIN</code>&nbsp;<i>expr</i></td><td>sine<sup>-1</sup></td></tr>
            <tr><td><code>ACOS</code>&nbsp;<i>expr</i></td><td>cosine<sup>-1</sup></td></tr>
            <tr><td><code>ATAN</code>&nbsp;<i>expr</i></td><td>tangent<sup>-1</sup></td></tr>
            <tr><td><code>ATAN2</code>&nbsp;<i>expr<sub>y</sub></i><code>,</code>&nbsp;<i>expr<sub>x</sub></i></td><td>the angle &theta; from converting<br>rectangular (x,y) to polar (r,&theta;) coordinates</td></tr>
            <tr><td><code>SINH</code>&nbsp;<i>expr</i></td><td>hyperbolic sine</td></tr>
            <tr><td><code>COSH</code>&nbsp;<i>expr</i></td><td>hyperbolic cosine</td></tr>
            <tr><td><code>TANH</code>&nbsp;<i>expr</i></td><td>hyperbolic tangent</td></tr>
            <tr><td><code>SQRT</code> or <code>&radic;</code>&nbsp;<i>expr</i></td><td>square root</td></tr>
            <tr><td><code>CBRT</code> or <code>&#x221B;</code>&nbsp;<i>expr</i></td><td>cube root</td></tr>
            <tr><td><code>FORT</code> or <code>&#x221C;</code>&nbsp;<i>expr</i></td><td>fourth root</td></tr>
            <tr><td><code>HYPOT</code>&nbsp;<i>expr<sub>x</sub></i><code>,</code>&nbsp;<i>expr<sub>y</sub></i></td><td>hypotenuse of right triangle<br><code>&radic; x&#x00B2; + y&#x00b2;</code></td></tr>
            <tr><td><code>LN</code>&nbsp;<i>expr</i></td><td>natural log (base e)</td></tr>
            <tr><td><code>LOG</code>&nbsp;<i>expr</i></td><td>log base 10</td></tr>
            <tr><td><code>LN2</code>&nbsp;<i>expr</i></td><td>log base 2</td></tr>
            <tr><td><code>EPOW</code>&nbsp;<i>expr</i></td><td>anti-log (e ** <i>expr</i>)</td></tr>
            <tr><td><code>TENPOW</code>&nbsp;<i>expr</i></td><td>10 ** <i>expr</i> (anti-log base ten)</td></tr>
            <tr><td><code>TWOPOW</code>&nbsp;<i>expr</i></td><td>2 ** <i>expr</i> (anti-log base two)</td></tr>
            <tr><td><code>RANDOM</code>&nbsp;( <i>expr</i> ? )&nbsp;</td><td>random number with optional seed value</td></tr>
            <tr><td><code>SIGNUM</code> or <code>SGN</code>&nbsp;<i>expr</i></td><td>sign (&lt; 0 = -1, 0 = 0, &gt; 0 = +1)</td></tr>
            <tr><td><code>ISNULL</code> or <code>NOTNULL</code>&nbsp;<i>expr</i></td><td>is the value null / not null?</td></tr>
            <tr><td><code>TYPEOF</code>&nbsp;<i>expr</i></td><td>the type of the result<br>as in <code>"string"</code>, <code>"integer"</code>, <code>"boolean"</code>, etc.</td></tr>
            <tr><td><code>CAST</code>&nbsp;<i>expr</i>&nbsp;( <code>,</code> <i>type_expr</i> )</td><td>convert the value to the given type<br>(default type is <code>"string"</code>)</td></tr>
            <tr><td><code>LENGTH</code>&nbsp;<i>expr</i><br>or <i>expr</i> ( <code>..</code> or <code>&#x2026;</code> <i>expr</i> ( <code>,</code> <i>expr</i> ) )</td><td>length of string, array, object, or range</td></tr>
            <tr><td><code>SCALE</code>&nbsp;<i>expr</i></td><td>scale of number, total size of object or array</td></tr>
            <tr><td><code>ROUND</code>&nbsp;<i>expr</i><code>,</code>&nbsp;<i>places_expr</i></td><td>round value to given places</td></tr>
            <tr><td><code>FLOOR</code>&nbsp;<i>expr</i></td><td>the "floor" of a numeric value</td></tr>
            <tr><td><code>CEIL</code>&nbsp;<i>expr</i></td><td>the "ceil" of a numeric value</td></tr>
            <tr><td><code>ISPRIME</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>are all the values prime numbers?</td></tr>
            <tr><td><code>ISINT</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>are all the values numeric integers?</td></tr>
            <tr><td><code>GCD</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>greatest common divisor</td></tr>
            <tr><td><code>LCM</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>least common multiple</td></tr>
            <tr><td><code>MAX</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>maximum value</td></tr>
            <tr><td><code>MIN</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>minimum value</td></tr>
            <tr><td><code>LSB</code>&nbsp;<i>expr</i></td><td>index of least-significant set bit</td></tr>
            <tr><td><code>MSB</code>&nbsp;<i>expr</i></td><td>index of most-significant set bit (without sign)</td></tr>
            <tr><td><code>SUMOF</code> or <code>&#x2211;</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *<br>or <i>expr</i> ( <code>..</code> or <code>&#x2026;</code> <i>expr</i> ( <code>,</code> <i>expr</i> ) )</td><td>sum of all the values</td></tr>
            <tr><td><code>PRODUCTOF</code> or <code>&#x220F;</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *<br>or <i>expr</i> ( <code>..</code> or <code>&#x2026;</code> <i>expr</i> ( <code>,</code> <i>expr</i> ) )</td><td>product of all the values</td></tr>
            <tr><td><code>ARRAYOF</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *<br>or <i>expr</i> ( <code>..</code> or <code>&#x2026;</code> <i>expr</i> ( <code>,</code> <i>expr</i> ) )</td><td>make a single array of all the values</td></tr>
            <tr><td><code>EXPMOD</code>&nbsp;<i>expr<sub>1</sub></i><code>,</code>&nbsp;<i>expr<sub>2</sub></i><code>,</code>&nbsp;<i>expr<sub>3</sub></i></td><td>value of <i>expr<sub>1</sub></i>&nbsp;<code>&#x2B61;</code>&nbsp;<i>expr<sub>2</sub></i><code>&nbsp;mod&nbsp;</code><i>expr<sub>3</sub></i></td></tr>
            <tr><td><code>POLYMOD</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) +</td><td>calculate successive modulus values</td></tr>
            <tr><td><code>JOIN</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>join strings</td></tr>
            <tr><td><code>FLATMAP</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>map any dimensional array to a single "flat" array</td></tr>
            <tr><td><code>SPLIT</code>&nbsp;<i>expr</i> <code>,</code> <i>regexpr</i> (&nbsp;<code>,</code> <i>limit_expr</i>&nbsp;)</td><td>split string into parts</td></tr>
	    <tr><td><code>REVERSE</code>&nbsp;<i>expr</i></td><td>reverse the order of an array or string</td></tr>
            <tr><td><code>UNIQUE</code>&nbsp;<i>expr</i></td><td>produce the unique values in an array or string</td></tr>
            <tr><td><code>INDEX</code>&nbsp;<i>expr</i> <code>,</code> <i>search_expr</i> (&nbsp;<code>,</code> <i>start_expr</i>&nbsp;)</td><td>find value within a string</td></tr>
            <tr><td><code>SEARCH</code>&nbsp;<i>expr</i> <code>,</code> <i>search_expr</i> (&nbsp;<code>,</code> ( <i>start_expr</i> ) <code>,</code> ( <i>end_expr</i> ) )</td><td>binary search for a value in the given array/map/set</td></tr>
            <tr><td><code>SUBSTR</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>start_expr</i> (&nbsp;<code>,</code> <i>length_expr</i>&nbsp;)&nbsp;)</td><td>extract a substring</td></tr>
            <tr><td><code>REPLACE</code>&nbsp;<i>expr</i> <code>,</code> <i>expr</i> <code>,</code> ( <i>expr</i> ) (&nbsp;<code>,</code> <i>mode</i>&nbsp;)<br>or <i>expr</i> <code>,</code> <i>expr</i></td><td>replace substrings within a string</td></tr>
            <tr><td><code>SPLICE</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>modify an array by deleting and/or adding elements</td></tr>
            <tr><td><code>SPLICE</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <code>[</code> <i>id or string list</i> <code>]</code>&nbsp;)<br>(&nbsp;<code>,</code> <code>{</code> <i>key:value pairs</i> <code>}</code>&nbsp;)</td><td>modify an object by deleting and/or adding elements</td></tr>
            <tr><td><code>FILL</code>&nbsp;<i>var</i>&nbsp;( <code>,</code> <i>expr</i>&nbsp;( <code>,</code> <i>expr</i>&nbsp;( <code>,</code><i>expr</i> ) ) )</td><td>fill an array or string</td></tr>
            <tr><td><code>FORMATSTRING</code>&nbsp;<i>format_expr</i>&nbsp;( <code>,</code> <i>expr</i> ) *</td><td>use the expressions to replace<br>the parameter args in the format string</td></tr>
            <tr><td><code>SCAN</code>&nbsp;<i>source</i> <code>,</code> <i>format</i> <code>,</code> ( <i>var</i> ) +</td><td>parse the source according to the format<br>into the corresponding variables</td></tr>
            <tr><td><code>SORT</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>flags_expr</i>&nbsp;)</td><td>sort the object, array, or set, optionally ignoring case,<br>or sorting objects by key instead of value,<br>returning a new sorted object</td></tr>
            <tr><td><code>TRIM</code> or <code>LTRIM</code> or <code>RTRIM</code> <i>expr</i></td><td>trim all, leading, or trailing whitespace</td></tr>
            <tr><td><code>PAD</code> or <code>LPAD</code> or <code>RPAD</code>&nbsp;<i>var</i>&nbsp;<code>,</code> <i>expr</i>&nbsp;( <code>,</code><i>expr</i> )</td><td>pad an array or string to the given width<br>with 0 or space <i>(default)</i> or the given value/character</td></tr>
            <tr><td><code>FIB</code>, <code>&#x1D439;</code>, or <code>&#x2131;</code>&nbsp;<i>expr</i></td><td>Fibonacci number</td></tr>
            <tr><td><code>Bn</code>, <code>&#x1D435;</code>, or <code>&#x212C;</code>&nbsp;<i>expr</i></td><td>Bernoulli number</td></tr>
            <tr><td><code>Hn</code>, <code>&#x1D43B;</code>, or <code>&#x210B;</code>&nbsp;<i>expr</i></td><td>Harmonic number</td></tr>
            <tr><td><code>DEC</code>&nbsp;<i>expr</i></td><td>convert string or fraction to decimal number</td></tr>
            <tr><td><code>FRAC</code>&nbsp;<i>num</i><code>,</code>&nbsp;<i>den</i><br>or <i>int</i><code>,</code><i>num</i><code>,</code><i>den</i><br>or <i>string</i></td><td>construct a rational fraction</td></tr>
            <tr><td><code>COMPLEX</code>&nbsp;<i>r</i><code>,</code>&nbsp;<i>i</i><br>or <i>expr</i></td><td>construct a complex number</td></tr>
            <tr><td><code>QUATERNION</code>&nbsp;<i>a</i><code>,</code>&nbsp;<i>b</i><code>,</code>&nbsp;<i>c</i><code>,</code>&nbsp;<i>d</i></td><td>construct a quaternion value</td></tr>
            <tr><td><code>ROMAN</code>&nbsp;<i>expr</i></td><td>interpret <i>expr</i> as a Roman Numeral</td></tr>
            <tr><td><code>TODATE</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;)&nbsp;)</td><td>convert expression(s) to a date value</td></tr>
            <tr><td><code>TOBASE</code>&nbsp;<i>expr</i> <code>,</code> <i>base_expr</i></td><td>convert number to the given base (radix)</td></tr>
            <tr><td><code>FROMBASE</code>&nbsp;<i>expr</i> <code>,</code> <i>base_expr</i></td><td>convert value in given base back to a number</td></tr>
            <tr><td><code>LOWER</code>&nbsp;<i>expr</i></td><td>convert <i>expr</i> to lower case</td></tr>
            <tr><td><code>UPPER</code>&nbsp;<i>expr</i></td><td>convert <i>expr</i> to UPPER case</td></tr>
            <tr><td><code>EVAL</code>&nbsp;<i>expr</i></td><td>evaluate the string result of <i>expr</i></td></tr>
            <tr><td><code>EXEC</code>&nbsp;<i>expr</i>&nbsp;( <code>,</code>&nbsp;<i>expr</i>&nbsp;) *</td><td>execute the given O/S command<br>(with arguments)<br>and return the output as a string</td></tr>
            <tr><td><code>COLOR</code>&nbsp;<i>expr</i></td><td>translate color tags to escape codes or remove (depending on mode)</td></tr>
            <tr><td><code>DECODE</code>&nbsp;<i>expr</i></td><td>decode a base64 string into the original string value</td></tr>
            <tr><td><code>ENCODE</code>&nbsp;<i>expr</i></td><td>encode a string into its base64 form</td></tr>
            <tr><td><code>EXISTS</code>&nbsp;<i>expr</i>&nbsp;( <code>,</code>&nbsp;<i>flags_expr</i>&nbsp;)</td><td>check the existence/permissions of file or directory</td></tr>
            <tr><td><code>FILEINFO</code>&nbsp;<i>expr</i></td><td>get information about a given file</td></tr>
            <tr><td><code>FINDFILES</code>&nbsp;<i>dir</i><code>,</code> <i>pattern_expr</i> ( <code>,</code> <i>flags_expr</i> )</td><td>list files in the given directory<br>matching the pattern(s) and optional flags</td></tr>
            <tr><td><code>READ</code>&nbsp;<i>file_name_expr</i>&nbsp;( <code>:</code>&nbsp;<i>charset_expr</i>&nbsp;)</td><td>read the file (or files) using the optional charset</td></tr>
            <tr><td><code>WRITE</code>&nbsp;<i>expr</i> <code>,</code>&nbsp;<i>file_name_expr</i>&nbsp;( <code>:</code>&nbsp;<i>charset_expr</i>&nbsp;)</td><td>write the value to the file using the optional charset</td></tr>
            <tr><td><code>READPROPERTIES</code>&nbsp;<i>file_name_expr</i>&nbsp;( <code>:</code>&nbsp;<i>charset_expr</i>&nbsp;)</td><td>read the properties file using the optional charset</td></tr>
            <tr><td><code>WRITEPROPERTIES</code>&nbsp;<i>expr</i> <code>,</code>&nbsp;<i>file_name_expr</i>&nbsp;( <code>:</code>&nbsp;<i>charset_expr</i>&nbsp;)</td><td>write the value to the properties file using the optional charset</td></tr>
            <tr><td><code>DELETE</code>&nbsp;<i>expr</i>&nbsp;( <code>,</code>&nbsp;<i>expr</i> ) *</td><td>delete one or more files</td></tr>
            <tr><td><code>RENAME</code>&nbsp;<i>expr<sub>1</sub></i> <code>,</code> <i>expr<sub>2</sub></i></td><td>rename or move file<sub>1</sub> to file<sub>2</sub></td></tr>
            <tr><td><code>MATCHES</code>&nbsp;<i>expr</i>&nbsp;<code>,</code>&nbsp;<i>pattern_expr</i>&nbsp;( <code>,</code> <i>flags_expr</i> )</td><td>match the expression string against<br>the regular expression pattern with possible flags</td></tr>
            <tr><td><code>CALLERS</code>&nbsp;<i>expr</i> ?</td><td>get all or one of the callers of the current function</td></tr>
            <tr><td><code>DEFINED</code>&nbsp;( <i>id</i> | <i>string</i> ) ( <code>,</code> <i>id</i> | <i>string</i> ) *</td><td>return whether the given variable(s), function(s), or constant(s)<br>are already defined</td></tr>
            <tr><td><code>FACTORS</code>&nbsp;<i>expr</i></td><td>calculate all the factors of the number</td></tr>
            <tr><td><code>PFACTORS</code>&nbsp;<i>expr</i></td><td>calculate the prime factors of the number</td></tr>
            <tr><td><code>CHARS</code>&nbsp;<i>expr</i></td><td>break apart a string or an array of strings into separate characters<br>or convert a number to a single character</td></tr>
            <tr><td><code>CODES</code>&nbsp;<i>expr</i></td><td>convert a single character to its codepoint value<br>or break apart numbers or strings into an array of codepoints</td></tr>
            <tr><td><code>RMASK</code> | <code>LMASK</code>&nbsp;<i>expr</i></td><td>construct a bit mask of <i>expr</i> <code>1</code> bits,<br>in rightmost bits, or left-justified within the precision</td></tr>
            <tr><td><code>DOW</code>&nbsp;<i>expr</i></td><td>day of the week of a date (integer)<br>(0=Sunday to 6=Saturday)</td></tr>
            <tr><td><code>DOM</code>&nbsp;<i>expr</i></td><td>day of the month of a date (integer)<br>(1 .. 31)</td></tr>
            <tr><td><code>DOY</code>&nbsp;<i>expr</i></td><td>day of the year of a date (integer)<br>(1 .. 365/366)</td></tr>
            <tr><td><code>MOY</code>&nbsp;<i>expr</i></td><td>month of the year of a date (integer)<br>(1 .. 12)</td></tr>
            <tr><td><code>YOD</code>&nbsp;<i>expr</i></td><td>year of the date (integer)</td></tr>
    <tr><td>30</td><td><i>expr</i>&nbsp;<code>++</code> or <code>&#x2795;&#x2795;</code><br><i>expr</i>&nbsp;<code>--</code> or <code>&#x2212;&#x2212;</code> or <code>&#x2796;&#x2796;</code></td><td>post increment/decrement</td><td>N/A</td></tr>
    <tr><td>29</td><td><code>++</code> or <code>&#x2795;&#x2795;</code>&nbsp;<i>expr</i><br><code>--</code> or <code>&#x2212;&#x2212;</code> or <code>&#x2796;&#x2796;</code>&nbsp;<i>expr</i></td><td>pre increment/decrement</td><td>right to left</td></tr>
    <tr><td>28</td><td><code>+</code> or <code>&#x2795;</code>&nbsp;<i>expr</i><br><code>-</code> or <code>&#x2212;</code> or <code>&#x2796;</code>&nbsp;<i>expr</i></td><td>posate/negate a value</td><td>right to left</td></tr>
    <tr><td>27</td><td><code>@@</code>&nbsp;<i>expr</i></td><td>convert any value to a string</td><td>right to left</td></tr>
    <tr><td>26</td><td><code>!!</code>&nbsp;<i>expr</i></td><td>convert any value to a <i>true</i> boolean<br><code>true</code> if set, non-empty, or non-zero,<br> or <code>false</code> if null, empty, or zero</td><td>right to left</td></tr>
    <tr><td>25</td><td><code>!</code> or <code>&#x00AC;</code> or <code>NOT</code>&nbsp;<i>expr</i></td><td>boolean NOT</td><td>right to left</td></tr>
    <tr><td>24</td><td><i>expr</i>&nbsp;<code>&#x2217;</code></td><td>conjugate (complex or quaternion)</td><td>left to right</td></tr>
    <tr><td>23</td><td><code>~~</code>&nbsp;<i>expr</i></td><td>convert to number</td><td>right to left</td></tr>
    <tr><td>22</td><td><code>~</code>&nbsp;<i>expr</i></td><td>bitwise NOT</td><td>right to left</td></tr>
    <tr><td>21</td><td><i>expr</i>&nbsp;<code>!</code></td><td>factorial</td><td>left to right</td></tr>
    <tr><td>20</td><td><i>expr<sub>1</sub></i>&nbsp;&nbsp;<code>**</code>, <code>&times;&times;</code>, <code>&#x2715;&#x2715;</code>, <code>&#x2716;&#x2716;</code>,
        <code>&#x2303;</code>, <code>&#x2B61;</code>, or <code>&#x2191;</code>&nbsp;&nbsp;<i>expr<sub>2</sub></i><br>or&nbsp;<i>expr</i>&nbsp;&#x2070; .. &#x2079;</td><td><i>expr<sub>1</sub></i> to <i>expr<sub>2</sub></i> power<br>or <i>expr</i> to given power</td><td>right to left</td></tr>
    <tr><td>19</td><td>
        <i>expr</i>&nbsp;&nbsp;<code>*</code>, <code>&times;</code>, <code>&#x2715;</code>, or <code>&#x2716;</code>&nbsp;&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;&nbsp;<code>/</code>, <code>&divide;</code>, <code>&#x2215;</code>, or <code>&#x2797;</code>&nbsp;&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;&nbsp;<code>\</code> or <code>&#x2216;</code>&nbsp;&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;&nbsp;<code>%</code>&nbsp;&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;&nbsp;<code>\%</code> or <code>&#x2216;%</code>&nbsp;&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;&nbsp;<code>mod</code>&nbsp;&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;&nbsp;<code>&#x00B7;</code> or <code>&#x22C5;</code>&nbsp;&nbsp;<i>expr</i></td>
        <td>multiply<br>divide<br>integer divide or set difference<br>remainder<br>quotient, remainder<br>modulus<br>dot product (or multiply for scalars)</td><td>left to right</td></tr>
    <tr><td>18</td><td>
        <i>expr</i>&nbsp;&nbsp;<code>+</code> or <code>&#x2795;</code>&nbsp;&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;&nbsp;<code>-</code>,  <code>&#x2212;</code>, or <code>&#x2796;</code>&nbsp;&nbsp;<i>expr</i></td>
        <td>add<br>subtract or set difference</td><td>left to right</td></tr>
    <tr><td>17</td><td>
        <i>expr</i>&nbsp;<code> &gt;&gt;&gt; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &gt;&gt; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &lt;&lt; </code>&nbsp;<i>expr</i></td>
        <td>bit shift operations</td><td>left to right</td></tr>
    <tr><td>16</td><td>
        <i>expr</i>&nbsp;<code> &amp; </code>or<code> &#x2229; </code>or<code> &#x22C2; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> ~&amp; </code>or<code> &#x22BC; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &amp;~ </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> ^ </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> ~^ </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> ^~ </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> | </code>or<code> &#x222A; </code>or<code> &#x22C3; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> ~| </code>or<code> &#x22BD; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> |~ </code>&nbsp;<i>expr</i></td>
        <td>bitwise AND or set INTERSECTION<br>NOT AND (or NAND)<br>AND NOT<br>exclusive OR or set SYMMETRIC DIFFERENCE<br>NOT exclusive OR<br>exclusive OR NOT<br>bitwise OR or set UNION<br>NOT OR (or NOR)<br>OR NOT</td><td>left to right</td></tr>
    <tr><td>15</td><td><i>expr</i>&nbsp;<code> &lt;=&gt; </code>&nbsp;<i>expr</i><td>returns <code>-1</code> if <i>expr</i> &lt; 0<br><code>0</code> if <i>expr</i> = 0<br><code>+1</code> if <i>expr</i> &gt; 0</td><td>left to right</td></tr>
    <tr><td>14</td><td>
        <i>expr</i>&nbsp;<code> &lt;= </code>or<code> &#x2264; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &lt; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &gt;= </code>or<code> &#x2265; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &gt; </code>&nbsp;<i>expr</i></td>
        <td>comparison</td><td>left to right</td></tr>
    <tr><td>13</td><td>
        <i>expr</i>&nbsp;<code>OF</code>, <code>IN</code>, <code>WITHIN</code>, <code>&#x2208;</code>, or <code>&#x220A;</code><br>
        <i>expr</i> ( <code>...</code>,&nbsp;<code>..</code>,&nbsp;or&nbsp;<code>&#x2026;</code>&nbsp;<i>expr</i> ) ( <code>,</code> <i>expr</i> )</td>
        <td>test set membership, or match a value within a range</td><td>left to right</td></tr>
    <tr><td>12</td><td>
        <i>expr</i>&nbsp;<code> === </code>or<code> &#x2A76; </code>or<code> &#x2261; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> !== </code>or<code> &#x2262; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> == </code>or<code> &#x2A75; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> != </code>or<code> &lt;&gt; </code>or<code> &#x2260; </code>&nbsp;<i>expr</i></td>
        <td>strict equality<br>strict inequality<br>equality<br>inequality</td><td>left to right</td></tr>
    <tr><td>11</td><td>
        <i>expr</i>&nbsp;<code> &amp;&amp; </code>or<code> &#x2227; </code>or<code> AND </code>&nbsp;<i>expr</i></td><td>logical AND</td><td>left to right</td></tr>
    <tr><td>10</td><td>
        <i>expr</i>&nbsp;<code> || </code>or<code> &#x2228; </code>or<code> OR </code>&nbsp;<i>expr</i></td><td>logical OR</td><td>left to right</td></tr>
    <tr><td>9</td><td>
        <i>expr</i>&nbsp;<code> ^^ </code>or<code> &#x22BB; </code>or<code> XOR </code>&nbsp;<i>expr</i></td><td>logical exclusive OR</td><td>left to right</td></tr>
    <tr><td>8</td><td><i>expr</i>&nbsp;<code> ?: </code>&nbsp;<i>expr</i><br><i>expr</i>&nbsp;<code> ?! </code><i>expr</i></td><td>select alternate for <code><i>false</i></code> value<br>or select an alternate for <code><i>true</i></code> value</td><td>left to right</td></tr>
    <tr><td>7</td><td><i>expr</i>&nbsp;<code> ? </code>&nbsp;<i>expr</i>&nbsp;<code> : </code>&nbsp;<i>expr</i></td><td>select one or the other value</td><td>right to left</td></tr>
    <tr><td>6</td><td><i>var<sub>1</sub></i>&nbsp;(<code> , </code> <i>var<sub>n</sub></i>&nbsp;) *<code> = </code>&nbsp;<i>expr<sub>1</sub></i>&nbsp;(<code> , </code> <i>expr<sub>n</sub></i>&nbsp;) *</td><td>assign <i>expr(s)</i> values to variable(s)</td><td>right to left</td></tr>
    <tr><td>5</td><td><i>var</i>&nbsp;<code> **=</code>,<code> &times;&times;=</code>,<code> &#x2715;&#x2715;=</code>,<code> &#x2716;&#x2716;=</code>,<code> &#x2303;=</code>,<code> &#x2B61;=</code>,
        or<code> &#x2191;=</code>&nbsp;<i>expr</i></td><td><i>var</i> to <i>expr</i> power, assign to <i>var</i></td><td>right to left</td></tr>
    <tr><td>4</td><td>
        <i>var</i>&nbsp;<code> *=</code>,<code> &times;=</code>,<code> &#x2715;=</code>, or<code> &#x2716;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> /=</code>,<code> &divide;=</code>,<code> &#x2215;=</code>, or<code> &#x2797;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> \= </code> or<code> &#x2216;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> %= </code>&nbsp;<i>expr</i></td>
        <td>perform the operation, reassign to variable</td><td>right to left</td></tr>
    <tr><td>3</td><td>
        <i>var</i>&nbsp;<code> += </code>or<code> &#x2795;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> -= </code>,<code> &#x2212;=</code>, or<code> &#x2796;= </code>&nbsp;<i>expr</i></td>
        <td>result assigned to variable again</td><td>right to left</td></tr>
    <tr><td>2</td><td>
        <i>var</i>&nbsp;<code> &gt;&gt;&gt;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> &gt;&gt;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> &lt;&lt;= </code>&nbsp;<i>expr</i></td>
        <td>perform the shift, reassign to variable</td><td>right to left</td></tr>
    <tr><td>1</td><td>
        <i>var</i>&nbsp;<code> &amp;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> ~&amp;= </code>or<code> &#x22BC;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> &amp;~= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> ^= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> ~^= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> ^~= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> |= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> ~|= </code>or<code> &#x22BD;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> |~= </code>&nbsp;<i>expr</i></td>
        <td>perform the bit op, reassign to variable</td><td>right to left</td></tr>
    </tbody>
  </table>
  </div>
<a class="right-link" href="#topofpage">Top</a>
<hr id="Notes_on_Operators_and_Functions" class="sectionsep">
  <h2>Notes on Operators and Functions</h2>
<div class="cols">
  <p>Some of the operators and functions might require a bit of explanation as to how they work.
  <p>The set union and intersection operators work on any collections, but also on integers (operating as bit sets). The other bit operators
     also work with pure boolean values, doing the appropriate boolean operations.
  <p>The multiple assignment operation assigns the values of the corresponding expressions to the respective variables. The normal
     case is one variable and one expression (normal assignment), as in <code>a = 7</code>. In addition, this construct can be used
     to swap the values of two variables as in: <code>a,b = b,a</code>. It is an error if the number of variables does not equal
     the number of expressions. Multiple variables can be rearranged or "swapped" in this fashion, as in: <code>a,b,c = b,c,a</code>.
     Another feature of the assignment operator automatically constructs a list / array object from a list of values assigned to a single
     variable, such as: <code>a = 1,2,3 &#x21E8; [ 1, 2, 3 ]</code>.
  <p>The <code>length</code> function takes any one of a number, an array, an object, a string, or a range expression and returns the "size"
     of the value. For strings, this is the number of codepoints in the string, for arrays it is the number of items in the array (first-level size),
     for objects it is the number of elements in the object (again, not recursive for nested objects). A string embedded
     inside an array or object counts as one object, however. Also, inside arrays or objects a null entry counts as one
     object. For integer numbers the length is the number of digits in the absolute value, and for decimal numbers it is the
     "precision" or number of digits in the unscaled value. For a range expression the length is the number of elements in
     the range. So, for instance, a range of <code>49..300,21</code> gives a length of 12, corresponding to the values of
     <code>49, 70, 91, 112, ..., 280</code>. For fractions, the length is the same as the length of its decimal representation.
  <p>The <code>scale</code> function returns the total (recursive) size of arrays or objects, for strings the value is 0, for
     decimal numbers or fractions the value is the "scale" of the decimal representation of the number, which is complicated
     but basically means where the decimal point is placed relative to the raw digits: zero or positive is the number of digits
     to the right of the decimal point, negative is the number of extra zeros after the significant digits and to the left of
     the decimal point.  Some examples: <code>scale(1.2) &#x21E8; 1</code>, while <code>scale 10000 &#x21E8; -4</code>.
  <p>The <code>random</code> function will generate a random value, of the current decimal precision, with a value between 0 and 1 (exclusive).
     If a seed expression is given, the bytes of that value will be used to seed the random number generator, which will produce a predictable
     value every time the same seed is used (useful for testing purposes), otherwise a different value will be returned every time (without the seed value).
  <p>The <i>type</i> value returned from <code>typeof</code>, which can be the optional second parameter to <code>cast</code>, or the second value
     for the <code>IS</code> operator can be one of the following (string) values (or without quotes for <code>IS</code>):
  <p class="indent"><code>"null"</code>, <code>"string</code>, <code>"integer"</code>, <code>"float"</code>,
     <code>"fraction"</code>, <code>"complex"</code>, <code>"quaternion"</code>, <code>"boolean"</code>, <code>"array"</code>, <code>"object"</code>,
     <code>"set"</code>, <code>"collection"</code>, <code>"function"</code>, or <code>"unknown"</code>.
  <p>The <code>round</code> function rounds to the number of places after the decimal, with a negative value rounding to the
     left of the decimal point.  For example: <code>round(1.335577,2) &#x21E8; 1.34</code>, and
     <code>round(1234567.890,-3) &#x21E8; 1235000</code>.
  <p>The <code>min</code> and <code>max</code> functions do either numeric or string comparisons, depending on the type of the
     first value in the list. While the <code>sumof</code> and <code>productof</code> functions try to convert all their
     values to the (numeric) type of their first operand (decimals by default, or fractions in rational mode).
  <p>The <code>lsb</code> and <code>msb</code> functions return a zero-based index into the bits of a simple integer value, denoting either the
     least-significant set bit (a "1") or the most-significant bit set (excluding the sign bit). Yeah, this gets a bit weird with negative values,
     as the <code>MSB</code> will be the index of the first "0" bit from the left. Example: <code>-14@x &#x21e8; 0xf2</code> and <code>msb -14 &#x21e8; 3</code>
     but <code>msb -1 &#x21e8; -1</code>. So, the MSB operation for negative numbers will first take the ones-complement value and return the index of the
     most-significant "1" bit there. Capisce?
  <p>The <code>join</code> function is a little complicated, but still intuitive once you figure it out. With one simple value argument
     the result is the string representation of the value. With one array or object value, the result is the concatenation of the values
     within the object (the flat map of the values, that is). With one array/object value and one other value, the flat map of the values
     in the array or object are concatenated with the second argument as the join string. With any two other objects, the result is
     simply the concatenation of the two values. With three or more arguments, the join (or "glue") value is the last argument in the
     list, and the flat map of all the other values is joined together by that string.<br>
     Some examples:  <code>join 1 &#x21E8; "1"</code>, while <code>join 1, 2 &#x21E8; "12"</code>.
     The complicated ones look like this:  <code>join 'a','b','c','-' &#x21E8; "a-b-c"</code>.
     While <code>arr=[1,2,3];join arr,'-' &#x21E8; 1-2-3</code>.
  <p>The <code>flatmap</code> function simply does the flat mapping of any kind or dimension of array or arrays into a single list. Objects included in the list
     or as array elements have their values (not the keys) included in the final array. Individual values are also included as-is in the result.
  <p>The <code>split</code> function takes one string argument, a second regular expression string, and an optional limit
     value that determines how many splits are returned. See the documentation for the Java <code>String.split</code> method
     for further details on how this parameter works.
  <p>The arguments to <code>index</code> are the string, object, or list to search, the value to search for, and the optional starting index.
     If the starting index is given, and is negative, the search starts from the end of the object, and the return value will be
     negative if the search value is found (an offset from the end of the string or object). Otherwise the search starts from the
     beginning and returns a non-negative value. If the search value is not found, the function returns <code>null</code>.
     In addition, the starting index value can also be null, which starts the search at the beginning of the object. When searching
     an object, the search object is one of the object keys, while searching a list, the search object is matched against the any
     of the list values. Since the keys of an object are preserved in the order they are declared, or added to the object, the starting
     and returned indices are relative to this key list.
  <p>For a <i>set</i> passed to the <code>index</code> function, the starting index value is ignored, and the return value is either <code>1</code>
     if the search object is a member of the set, or <code>null</code> if the object is not a member.
  <p>The <code>search</code> function is a faster (that is, "binary") search where the input list is known to be pre-sorted. Unlike <code>index</code>,
     even though the input arguments can be negative, meaning relative to the end of the list, the result value will always be positive if the
     search term is actually found, but negative <b><i>iff</i></b> the term is not found, and indicates the negative index of the insertion point for the
     search term in the sorted list. Just like <code>index</code>, but unlike some other operators and functions, nested objects are not flattened
     before doing the search. If the target is not a list, map, or set, the object is converted to its string representation, and the search is
     conducted on the array of code points in that string. In this case, the search object should be a string consisting of a single code point also.
     The main advantage of <code>search</code> over <code>index</code>, or <code>in</code>, is that the maximum number of comparisons needed for <code>search</code>
     is <code>log<sub>2</sub>(<i>n</i>)</code> due to the binary search algorithm being used (thus the need for sorting beforehand), which vastly
     improves the search speed, especially with large input data sets.
     Missing or null <i>start</i> or <i>end</i> values will default to the start (index 0) or end (index "length") of the input list, map, or set.
  <p>The arguments to <code>substr</code> are the value (converted to a string), and optional starting index, and optional length
     for the extraction. If the start is negative, it refers to an offset from the end of the string (same as returned
     by <code>index</code>), otherwise it is a zero-based index from the beginning. If the length value is not given or is null, it refers
     to the end of the string. Calling <code>substr</code> with just one argument is one of several ways to convert a non-string value
     to a string as in: <code>substr 1 &#x21E8; "1"</code> (same as using <code>@@1 &#x21E8; "1"</code>).
  <p>The <code>replace</code> function allows replacement of substrings within a string by exact matches, or using regular expressions. This is chosen
     using the various modes. If no mode is given, or a variable is used whose value is null or an empty string, then the replacement is done
     exactly, as in <code>replace('tell', 'l', 'b') &#x21E8; 'tebb'</code>. If the option value is <code>all</code>, <code>first</code>, or
     <code>last</code>, the second string is a regular expression and either all, the first, or the last substring(s) that match the regular
     expression are replaced with the 3<sup>rd</sup> string value. Group substitutions are allowed in the replacement string, as in
     <code>replace ('tell teal tail teel toil tool toll', 't(..)l', 't$1b', all) &#x21E8; "telb teab taib teeb toib toob tolb"</code>.
  <p>If the first argument to <code>replace</code> is an object or array, the replace operation is performed on each of the values in that object recursively.
  <p>If the replacement value is missing or empty the search value is deleted in the result according to the option value used,
     as in <code>replace 'abcabc', 'b' &#x21E8; "acac"</code>.
  <p>The "slice" notation is an alternative way to extract part of a string (same as <code>substr</code>, but with different arguments),
     and both operations can be used on lists, maps, and sets as well. The arguments in brackets for the slice notation are the beginning
     (inclusive) and ending (exclusive) indices of the values to
     be returned. If either or both are negative, they refer to offsets from the end of the object / string. If the actual value
     of the expression is anything other than an object, set, or array, it is converted to a string and the result is the same as
     the <code>substr</code> function. A missing or null first value refers to the beginning of the object or string, and a missing
     or null second index refers to the end of the object or string. One or the other or both index values can be given.
     The result for an object, set, or array will always be a new array with the selected elements; for a string a new string is returned.
  <p>By contrast, the <code>splice</code> function DOES modify the original array or object by potentially removing elements and
     adding new ones.
     If only the array/object argument is given, the entire contents are removed and returned. This is a convenient way to
     clear out the source. For arrays, the optional arguments are the starting index (which can be negative, meaning relative to
     the end of the array, the count of elements to delete, and then a series of arguments to add into the array at the given
     start position.  For objects, the optional arguments are a list of member ids (which can be straight ids, strings, or
     interpolated strings), and an optional object with the new members (key:value pairs) to add to the original object.
     The returned value for an array source is another (possibly empty) array containing the elements removed from the source.
     For an object source, the return is a possibly empty object containing the key:value pairs removed from the original.
     Also, for an object, if the drop list is omitted, the object is cleared of all values, but specifying an empty list
     will not clear any values, so be careful. For an array, specifying a start value and a count of zero will clear nothing.
     Note: inserting an array, object, or set into an array will insert each individual element from the source into the result.
  <p>The <code>fill</code> function requires a variable as the first argument. The contents of the variable are replaced or
     set to the second argument value (or <code>null</code> or <code>'\0'</code> if missing), depending on the optional
     3<sup>rd</sup> and 4<sup>th</sup> parameters. If only the 3<sup>rd</sup> argument is
     given this is taken as the length, and the array or string is filled to that length with the value. If both the
     3<sup>rd</sup> and 4<sup>th</sup> arguments are given, these are taken as the starting offset and a length.
     If a string is filled and the starting offset is past the end of the existing string, the intervening characters are
     set to the <code>nul</code> character. The fill value for a string can only be one character, or an integer
     (in the range of 0..65535) that is converted to a char value (NOT a codepoint value!). If the 3<sup>rd</sup> value is missing,
     the existing array or string's length is used (that is, the entire existing value is overwritten).
  <p>The <code>chars</code> and <code>codes</code> functions perform similarly, depending on their input arguments.
     For single character (for <code>codes</code>) or single integer (<code>chars</code>) values, the output will be the obverse value.
     For array inputs the outputs will be the corresponding array results. <code>Codes</code> always produces code points
     (values from 0 to 0x10FFFF). For multi-character string inputs, the outputs will be arrays of characters or integer codepoints.
     If any character is outside the Unicode BMP, the resulting string will have a length of 2, consisting of the two 16-bit codes
     (a surrogate pair). For <code>CODES</code> the same element in the returned array will have the single integer value of that
     codepoint. So, for the same input value, the length of the returned arrays will be the same, regardless of the individual
     character values of the input. Does that make sense? If not, please read up on
     how Java deals with Unicode characters starting here: <a href="https://docs.oracle.com/javase/tutorial/i18n/text/unicode.html">Unicode and Java</a>.
  <p>The <code>formatstring</code> function works exactly like <code>String.format</code> in Java, or <code>sprintf</code> in C/C++, meaning the format string
     will (optionally) have replaceable parameters, which are replaced by the values of the respective arguments in the expression list. The completed
     string with all the values replaced will be the result. For example:
  <p class="indent"><code style="color:blue;">formatstring("%1$s, %2$s!", "Hello", "World")</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"Hello, World!"</code>
  <p>The <code>scan</code> function takes a source string, a formatting specification, and a list of variables to parse into. The available formats
     are: <code>%i</code> (for integers), <code>%d</code> (for decimal values), <code>%b</code> (for <i>true/false</i> [boolean] values), <code>%c</code> (chararacters), <code>%s</code> (for strings), and <code>%n</code> (for line separators). Any other characters are taken as literal character
     sequences to be matched against the source. For examples, see the "test/files/e1" test code.
  <p>The <code>sort</code> function will do a single-level sort of the given object, array, or set, returning a new sorted object of the same type.
     The original object is left as-is. So in order to sort a list in place, you must reassign
     the result of the sort back to the original variable, as in <code>arr = sort arr</code>. This also allows you to create
     a sorted list from an unsorted array constant in one step, by doing <code>arr = sort [ 3,2,5,0,4 ] &#x21E8; [ 0, 2, 3, 4, 5 ]</code>.
     Note that (as of version 2.3.6 or higher) the sort is done in a "natural ordering" that sorts numeric values within strings
     as in "1", "2", "3", ... "10", "11", .... Future versions may include an option for this. The optional second argument to <code>sort</code>
     actually can hold two flags:  a value of <code>1</code> (or <code>true</code>) will do the sort in a case-insensitive way for strings,
     while a value of <code>2</code> will sort objects by key instead of value.  Using <code>3</code> (or <code>2|1</code> or <code>2+1</code>)
     will sort by the keys, ignoring case differences. Sorting arrays or sets ignores the <code>2</code> flag value. The other combining flag is a value
     of <code>4</code>, which will do the sort in reverse (that is, highest to lowest). This value can be combined with either of the other flags as desired.
     The standard library (<code>"library.calc"</code>) has constants for these flag values as follows: <code>SORT_CASE_INSENSITIVE = 0x0001</code>,
     <code>SORT_SORT_KEYS = 0x0002</code>, and <code>SORT_DESCENDING = 0x0004</code>.
  <p>The <code>FRAC</code> function constructs a fraction value from a numerator and denominator, from an integer along with
     a numerator and denominator, or a single expression which is converted to a string and parsed in the same manner as
     a fractional constant, such as <code>frac('1 &#x215c;')</code>, except that any of the Unicode fraction values can
     be expressed for this function as Unicode escape sequences in the string, as in <code>frac('2 \u215c')</code>
     while for an <code>f'...'</code> constant the real fraction character(s) must be used.
  <p>In addition to date constants, the <code>ToDate</code> function can be used to convert many kinds of expressions to dates. Internally,
     dates are simply signed integer values, so calling <code>todate</code> with a single integer value will produce a date value. Similarly
     any string value in the same format as a date constant (without the leading <code>d</code> or <code>D</code> character) can be passed
     as the single expression input. Using two values, the first should be a valid date constant string, while the second should be a date
     format string, such as <code>"YYYY-MM-DD"</code>. If three values are given to <code>toDate</code>, they shoud be integer values of
     month, day, and year (in that order), such as:
     <code style="color:blue;">todate(9,8,2020)@e</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">d'2020-09-08'</code>.
     If a single string is given, or one string with a null or empty format, the default ISO 8601 format ("YYYY-MM-DD")
     is assumed. Not all invalid formats will produce an error, nor all mismatches of input and format. There should
     always be either two or four <code>Y</code> values in the format. Single <code>M</code> or <code>D</code> values
     in the format can only be used with delimiters. Pretty much any delimiters (non-digit characters) will be matched
     by a <code>"-"</code> in the format string.
  <p>For most values the <code>upper</code> and <code>lower</code> functions simply convert the value to a string and do the case conversion on that string.
     But, for objects and lists the results are more subtle. For a list, the result is another list with all the values suitably
     case shifted. For an object, if <code>$ignorecase</code> is on the resulting object has only the values converted, while for
     <code>$ignorecase off</code> (the default) BOTH the keys and the values are case-converted. For example:
<p class="indent"><code style="color:blue;">g3 = {b: 'This', c: 'is', d: 'crazy' }</code><br>
     <code style="color:blue;">upper g3</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">{ B: 'THIS', C: 'IS', D: 'CRAZY' }</code><br>
     <code style="color:blue;">$ignorecase on { upper g3 }</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">{ b: 'THIS', c: 'IS', d: 'CRAZY' }</code>
  <p>The <code>FACTORS</code> and <code>PFACTORS</code> functions only accept integer values, and produce arrays of the
     desired values.<br>Examples: <code>factors(123) &#x21E8; [ 1, 3, 41, 123 ]</code>, while <code>pfactors 123 &#x21E8; [ 3, 41 ]</code>.
  <p>Both the <code>expmod</code> and <code>polymod</code> functions work exactly as they do in the Raku (Python 6) language, documented here:
     <a href="https://docs.raku.org/type/Int">Raku Int class</a>, <i>except</i> that here the calculations are done on fractions, quaternions,
     complex numbers, or decimals, depending on the type of the operands.
  <p>The <code>EXEC</code> function will execute the operating system program given by the first (string) expression, using the remaining
     expression values as parameters, and return the merged stdout and stderr streams as a string result. On Windows operating systems
     if the command to execute is a batch file (<code>.bat</code> or <code>.cmd</code> extension) then <code>cmd /c</code> is automatically
     prepended to the command. For instance, one of our standard build tests involves this expression:
     <p class="indent"><code>split(exec('wc', 'calc.txt'), '\\s+')</code></p>
     which will invoke the <code>wc</code> executable on Linux or MacOS, but will also run <code>cmd /c wc.bat</code> on Windows.
  <p>When using the color tag values from <code>"library.calc"</code> inside a string, it may be necessary (such as for writing to a file)
     when the tags need translation to the real console escape codes. The <code>COLOR</code> function does this, but according to the <code>$colors</code>
     setting currently in effect.
  <p>For now, the <code>encode</code> and <code>decode</code> functions only work on string objects (or other values / objects converted
     to their string representations). So, in order to reconstruct an array (for instance) from its encoded form you would need to do:
     <code>eval(decode '</code>...<code>')</code>.
     <p class="indent">
&gt;<code style="color:blue;">arr1 = [1, 2, 3] </code><code style="color:grey;">&#x21E8;</code><code style="color:green;"> [ 1, 2, 3 ]</code><br>
&gt;<code style="color:blue;">enc1 = encode arr1 </code><code style="color:grey;">&#x21E8;</code><code style="color:green;"> "WyAxLCAyLCAzIF0="</code><br>
&gt;<code style="color:blue;">arr2 = eval (decode enc1) </code><code style="color:grey;">&#x21E8;</code><code style="color:green;"> [ 1, 2, 3 ]</code><br>
&gt;<code style="color:blue;">arr1 === arr2 </code><code style="color:grey;">&#x21E8;</code><code style="color:green;"> true</code></p>
  <p>The <code>exists</code> function takes a potential file or directory path and optional flags. Valid flag values are:<br>
     <code>"d"</code> (directory exists), <code>"dr"</code> (directory for read),<br>
     <code>"f"</code> (file exists), <code>"fr"</code> (file for read, default if not given),<br>
     <code>"fw"</code> (file for write), or <code>"fx"</code> (file for execute).<br>
     An optional <code>"+"</code> can be added to any other flag value which will also test the file name for exact case (for use with file systems that
     support case-insensitive file searching).
  <p><code>FileInfo</code> takes a single file name / path parameter and returns an object containing various pieces of information about the file:
  <p class="indent"><code style="color:blue;">fileinfo "doc" </code><code style="color:grey;">&#x21E8;</code> <code style="color:green;">{ name: "doc", file: false, directory: true, link: false, other: false, size: 0, &mldr; }</code>
  <p>If the named file does not exist the return value is an empty object (<code style="color:green;">{ }</code>).
  <p>For <code>findfiles</code> the pattern spec is one or more normal file-system wildcard patterns, separated by either <code>';'</code> or <code>':'</code>, and the flags
     (if given) are the same as for <code>exists</code> with some additions.
     If the flags contains <code>'*'</code> then the search will continue down subdirectories of the parent directory. If <code>'!'</code> is added to the flags,
     full paths are returned in the list instead of just the file names. And if <code>'~'</code> is included, the file name matching will ignore the case of the name.
     If the flags are omitted, the files are found regardless of type (only matching the name pattern, with case-sensitive compare).
     The array of files will always come back in sorted order, with the names matching the case on the file system.
  <p>The first expression for <code>read</code> is a single file path, which can be <code>"@"</code> or <code>"-"</code> to read the standard input.
     The second (optional) expression is the name of the charset to use (system default if not given, or empty/null). The entire contents of the file
     is returned, unchanged, including end-of-line sequences. The value returned can be assigned to a variable or used in some other way.
  <p>Also, unlike scripts read from a file, the <code>read</code> function will only use the charset specified or the platform default if none is given: there is no fallback attempt to
     read using "UTF-8" if the original charset returns a decoding error.
  <p>The complementary <code>write</code> function will write to a file, or to the standard output stream (with <code>"@"</code>
     or <code>"-"</code>). For a regular file the charset can also be specified, although standard output will always use the system default. If the first expression result for <code>write</code> is an array, the output will be a series of lines using the system
     default line separator, with each array value written to a separate line. For an object the output will be in JSON format, and for all other values
     the result will be written as the string equivalent. Immediately writing the result of a read will produce an identical file.
  <p>The <code>readProperties</code> and <code>writeProperties</code> functions have the same parameters as <code>read</code> and <code>write</code> (except reading from <code>stdin</code> is not supported), but the files read and written are in the ".properties" format with each line being <code><i>key</i> = <i>value</i></code>. The object returned by <code>ReadProperties</code> will always have the keys in sorted order.
  <p>The return value from <code>delete</code> will be <code>true</code> if all the files are successfully deleted, <code>false</code>
     otherwise. While the return value from <code>rename</code> will be the full path of the destination file (that is, the new file name
     after the move).
     For <code>delete</code>, if the file does not exist the return will be <code>false</code> but no error is thrown. Other obvious problems,
     such as trying to delete a non-empty directory, will throw errors. Likewise <code>rename</code> will throw any errors that prevent the
     move or rename from happening.
  <p>The pattern expression for <code>matches</code> follows Java regular expression conventions. For objects the return value is
     another object containing only those keys that match the regex. For arrays, the returned array contains only those elements
     that match. For all other values, the input expression is converted to a string and matched against the regex,
     returning a <code>true</code> / <code>false</code> value.
     The optional 3<sup>rd</sup>flags value can be one or more of the following:
     <ul><li><code>0x0001</code> = case insensitive</li>
         <li><code>0x0002</code> = dotall (the <code>'.'</code> pattern matches line endings)</li>
         <li><code>0x0004</code> = Unicode case folding</li>
         <li><code>0x0008</code> = patterns are all literal</li>
         <li><code>0x0010</code> = match multiline patterns</li>
         <li><code>0x0020</code> = only Unix line endings recognized</li>
     </ul>
  <p>The <code>callers()</code> function returns either the name of the specified function caller (with a numeric parameter), or a list
     of all callers (no parameter). The "name" is the full function name (including the parameter names). When called with a single
     integer parameter to retrieve the caller at the specified level, <code>0</code> means the current function (so, the return is
     equivalent to the <code>_funcname</code> predefined value), while any higher number is the full function name of the next outer
     calling function. If there are not that many nested function calls, the value returned is <code>null</code>.
  <p>The <code>info</code> object contains seven read-only subobjects:  <code>version</code>, <code>libversion</code>,
     <code>cpu</code>, <code>os</code>, <code>java</code>, <code>locale</code>, and <code>timezone</code>.
     The contents of each are objects (<i>key</i>:<i>value</i> pairs) similar to this:
  <p class="indent">
    <code style="color:blue;">info.version</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">{ major: 2, minor: 3, patch: 0, prerelease: "-debug", build: "+9cce83e" }</code>
  <p>and the standard <code>"library.calc"</code> contains several examples of the use of these fields. Note that the memory values of the <code>info.cpu</code> object are dynamic
     in that they are the current values from the Java system at the time the expression is evaluated. All the other values, however, are set statically at startup.
  <p>The <code>settings</code> object contains the settable values of many of the directives, such
     as: <code>trigMode</code>, <code>separatorMode</code>, <code>precision</code>, etc. The values
     can be queried, or set, which has exactly the same effect as using the directives, as in:
  <p class="indent"><code style="color:blue;">$decimal 60</code> is the same as
    <code style="color:blue;">settings.precision = 60</code>.
  <p>See the <a href="#Directives">Directives</a> section below for the complete list of equivalents.
  <p>The <code>env</code> object contains entries for all the current variables defined in the process environment. If any of the variable names do not conform to the syntax
     for an <i>id</i> they name will be enclosed in double quotes (as in <code>"=C:"</code> on Windows, for instance).
  <p>The values of <code>phi</code> and <code>PHI</code> (or <code>&#x03C6;</code> and <code>&#x03A6;</code>) (the <a href="https://en.wikipedia.org/wiki/Golden_ratio">&ldquo;Golden Ratio&rdquo;</a> and its inverse) are constructed (due to precision and rounding) such that <code>1 / phi == PHI</code> and also <code>1 / PHI == phi</code>.
     But even though mathematically <code>phi - 1 == PHI</code> and <code>PHI + 1 == phi</code> the values computed here will not match exactly
     ("PHI" will have one more fractional digit of precision than "phi"):
  <p class="indent">
     <code style="color:blue;">phi </code><code style="color:grey;">&#x21E8;</code><code style="color:green;"> 1.618033988749894848204586834365638</code><br>
     <code style="color:blue;">PHI </code><code style="color:grey;">&#x21E8;</code><code style="color:green;"> 0.6180339887498948482045868343656382</code><br>
  <p>This value is also available from the standard <code>library.calc</code> (as the first solution to the quadratic equation &xscr;&sup2; - &xscr; - 1 = 0) via:
  <p class="indent">
     <code style="color:blue;">quad(1, -1, -1)[0] </code><code style="color:grey;">&#x21E8;</code><code style="color:green;"> 1.618033988749894848204586834365638</code>
  <p>The result of the "spaceship" operator (<code>&lt;=&gt;</code>) (for instance <code>a &lt;=&gt; b</code>) is the same as <code>signum(a - b)</code>, in other words,
     <code>-1</code> if <code>a &lt; b</code>, <code>0</code> if <code>a == b</code>, or <code>+1</code> if <code>a &gt; b</code>.
  <p>Both the <code>IN</code> operator and the <code>HAS</code> operator will search for a member within an object, but <code>has</code> will search recursively to find
     the member. For instance (and notice how member names must be quoted for <code>IN</code> but not for <code>HAS</code>):
  <p class="indent">
    <code style="color:blue;">info has maxmemory </code><code style="color:grey;">&#x21E8;</code><code style="color:green;"> true</code><br>
    <code style="color:blue;">"maxmemory" in info </code><code style="color:grey;">&#x21E8;</code><code style="color:green;"> false</code><br>
  <p>Note: the dot product operator (<code>&nbsp;&#x00B7;&nbsp;</code>) (unlike the other "multiplication" operators) does not appear as an "operator-assign" version since the result is a scalar while the operands are vectors (or vector-like as in complex numbers and quaternions) and thus is inappropriate to reassign to the source operand.
</div>
<a class="right-link" href="#topofpage">Top</a>
<hr id="User_Defined_Functions" class="sectionsep">
  <h2>User-Defined Functions</h2>
<div class="cols">
  In addition to the predefined functions above, Calc allows new functions to be defined that can be used repeatedly without having to
  retype the same expression.
  <p>The syntax for a function definition is:
  <p class="indent">
     <code>def</code> | <code>define</code>&nbsp;<i>name</i> <i>optional parameter list</i> <code>=</code> | <code>&#x21A6;</code>&nbsp;<code>{</code> <i>expressions or statements</i> <code>}</code>
  </p>
  <p>The optional formal parameter list looks like:
  <p class="indent">
    <code>( </code> <i>name</i> ( <code> = </code> <i>expr</i> ) ( <code>,</code> ... ) <code> )</code>
  </p>
  <p>Note that the <code>{</code> and <code>}</code> are optional if there is only one expression/statement in the definition.
  <p>The parameter values are assigned when the function is called, and there can be fewer actual values given than are declared; the remaining values
     will be assigned <code>null</code> unless there is a default expression given in the declaration, in which case that expression is evaluated.
     The parentheses are optional on the function call if there are no parameters being sent.
  <p>Actual parameters can be assigned positionally, and are assigned to the local parameter variables in the order they are defined in the formal
     parameter list, or a <code><i>id = </i></code> prefix to the actual value means the correspondingly named parameter is assigned this value,
     regardless of the order of this parameter in the formal list. Any unnamed actual parameters are assigned positionally. 
     Named parameters will override any positional parameters that might have otherwise been assigned by the call.
     Perhaps some examples are in order:
  <p class="indent">
    <code>define call(m, n=0, r=1, p=-1, ...) = { ... ; _* }</code><br>
    <code style="color:blue;">call(2, 3, 4, 5, 6, 7) </code><code style="color:grey;"> &#x21E8; </code><code style="color:green;"> [ 2, 3, 4, 5, 6, 7 ]</code><br>
    <code style="color:blue;">call(m = 23) </code><code style="color:grey;"> &#x21E8; </code><code style="color:green;"> [ 23, 0, 1, -1 ]</code><br>
    <code style="color:blue;">call(p = 14) </code><code style="color:grey;"> &#x21E8; </code><code style="color:green;"> [ &lt;null&gt;, 0, 1, 14 ]</code><br>
    <code style="color:blue;">call(r = 87, n = 6) </code><code style="color:grey;"> &#x21E8; </code><code style="color:green;"> [ &lt;null&gt;, 6, 87, -1 ]</code><br>
    <code style="color:blue;">call(n = 3, 17, 9, 8, 10) </code><code style="color:grey;"> &#x21E8; </code><code style="color:green;"> [ 17, 3, 8, 10 ]</code><br>
    <code style="color:blue;">call(n = 3, 17, , 42, 99) </code><code style="color:grey;"> &#x21E8; </code><code style="color:green;"> [ 17, 3, 42, 99 ]</code>
  <p>So, parameter values are assigned first by a named value assignment if present, second by a value in the same position in the parameter list
     (lacking an explicit named assignment), and third (lacking the others) by an expression given as part of the formal parameter declaration.
     Incidentally, variables referenced in the formal parameter expressions will first be resolved within the formal parameter list, and then by outer
     contexts if needed.
  <p>Similarly to the <code>$#</code> and <code>$*</code> variables maintained for the command line arguments, local variables named <code>_#</code> and <code>_*</code>
     are maintained for each function call. Thus the number of actual parameters passed to the function is available as
     <code>_#</code> inside the function, the first parameter is available through <code>_*[0]</code> or <code>_0</code>, etc. and the whole array of
     parameters is available via <code>_*</code>.
  <p>Inside a function, the function name can be accessed via the <code>_funcname</code> constant value.
  <p>A function can declare any number (including zero) of fixed parameters, and use <code>...</code> or <code>..</code> or <code>&#x2026;</code>
     at the end of the parameter list to signify any number of variable parameters after the fixed ones. These variable parameters can be
     accessed using the <code>_*[</code><i>nn</i><code>]</code> parameter array, or using <code>_</code><i>nn</i> where <i>nn</i> is the
     parameter index, starting from zero. For instance, <code>def g(a, ...) = { a + _1 }</code> and calling with <code>g(1, 2)</code>
     will assign <code>a = 1</code> and <code>_1 = 2</code>, and therefore  <code>a == _*[0]</code>, <code>_*[1] == _1</code>, and etc.
  <p>Any variables referenced inside the function, including the parameters, are local to the function, unless they had been defined outside the function previously. But defining the variable using <code>var</code> <i>id</i> guarantees the variable will be defined locally, regardless of
whether it has previously been used/defined.
  <p class="indent">
    <code>def win_pct(wins, losses, ties = 0) = { wins / (wins + ties + losses) @2% }</code>
  </p>
  <p>The value of a function is the value of the last expression evaluated inside it (note that the other statements have the same
     semantics). Functions are referenced by simply invoking their name.  For example: <code>def a = { 1 }</code> gives <code>a = 1</code>, and <code>def b = { a }</code> gives <code>b = 1</code>. Redefining the underlying function will also change the value of
     any functions that use it. So, without changing the definition of <code>b</code>, we can redefine <code>def a={2}</code>
     which will give <code>b = 2</code>.
     <p>A function can be used anywhere a variable can be used (which is pretty much everywhere).
     Functions can also reference loop variables, which are normally not allowed outside loops, and will work properly as long
     as they are only invoked inside a <code>LOOP</code> for which the loop variable is declared. In other words, functions are
     parsed along with all other expressions, but they are stored as parse trees, and are not evaluated until they are invoked.
  <p>One side-effect of the way functions are implemented in combination with the <code>eval</code> function is that objects can be created
     as follows:
  <p class="indent"><code>def stack={ size: 0, array:[] }</code>
  <p>and then
  <p class="indent"><code>t = eval stack</code>
  <p>gives
  <p class="indent"><code>t = { size : 0, array : [ ] }</code>
  <p>as it should. So, you can setup the data structure with <code>def</code>, and make instances of that structure with just
     <code><i>var</i> = eval <i>struct</i></code>.
</div>
<a class="right-link" href="#topofpage">Top</a>
<hr id="Statements" class="sectionsep">
  <h2>Statements</h2>
<div class="cols">
  In addition to the functions and operators listed above, Calc has eight different statements which can be used to do
     iterative or repeated calculations, to select between actions based on the value of an expression, and to display text or values.
     These are the: <code>LOOP</code>, <code>WHILE</code>, <code>IF</code>, <code>CASE</code>, <code>LEAVE</code>, <code>NEXT</code>,
     <code>TIMETHIS</code>, and the <code>PRINT</code> or <code>DISPLAY</code> statements.
     All keywords in these statements have three differently-cased forms: all lower case, all UPPER case, and MixedCase.  For example: <code>loop</code>, <code>LOOP</code>, and <code>Loop</code>.
  <p>The syntax for each is as follows:
  <p class="indent">
     [ <i>id</i> <code>:</code> ] <code>LOOP</code>&nbsp;[ [ <i>loopvar</i> ] ( <code>IN</code> | <code>WITHIN</code> | <code>OVER</code> | <code>&#x2208;</code> | <code>&#x220A;</code>) ] <i>expr</i> [ <code>...</code>,&nbsp;<code>..</code>,&nbsp;or&nbsp;<code>&#x2026;</code>&nbsp;<i>expr</i> ] [ <code>,</code> <i>expr</i> ] <code>{</code> <i>statements or expressions</i> <code>}</code> [ <code>ELSE</code>&nbsp; <code>{</code> <i>statements or expressions</i> <code>}</code> ]
  </p>
  <p class="indent">
     [ <i>id</i> <code>:</code> ] <code>WHILE</code>&nbsp;<i>expr</i> <code>{</code> <i>statements or expressions</i> <code>}</code> [ <code>ELSE</code>&nbsp; <code>{</code> <i>statements or expressions</i> <code>}</code> ]
  </p>
  <p class="indent">
     <code>IF</code>&nbsp;<i>expr</i>&nbsp;<code>{</code> <i>statements or expressions</i> <code>}</code> [ <code>ELSE {</code> <i>statements or expressions</i> <code>}</code> ]
  </p>
  <p class="indent">
     <code>CASE</code>&nbsp;<i>expr</i> (&nbsp;<code>OF</code> | <code>IN</code> | <code>&#x2208;</code> | <code>&#x220A;</code>&nbsp;) <i>selector</i> <code>: {</code> <i>statements or expressions</i> <code>}</code> ( <code>,</code> ) ? ) *
  </p>
  <p>where <i>selector</i> can be any one of the following:
  <ul class="indent">
    <li><i>expr</i> ( <code>,</code> expr ) *</li>
    <li><i>expr</i> <code>...</code>,&nbsp;<code>..</code>,&nbsp;or&nbsp;<code>&#x2026;</code>&nbsp;<i>expr</i> [ <code>,</code> <i>expr</i> ]</li>
    <li><code>MATCHES</code> <i>pattern</i> ( ',' <i>flags</i> )</li>
    <li><code>&gt;</code> or <code>&lt;</code>, <code>==</code>, etc. <i>expr</i> (any of the comparison operators)</li>
    <li><code>&gt;</code>, etc. <i>expr</i> ( <code>&amp;&amp;</code> or <code>||</code> or <code>^^</code> ) <code>&gt;</code>, etc. <i>expr</i></li>
    <li><code>DEFAULT</code>
  </ul>
  <p class="indent">
    <code>LEAVE</code> [ <i>id</i> <code>:</code> ] [ <i>expr</i> ]
  </p>
  <p class="indent">
    <code>NEXT</code>
  </p>
  <p class="indent">
    <code>TIMETHIS</code>&nbsp;[ <i>expr</i> ] <code>{</code> <i>statements or expressions</i> <code>}</code>
  </p>
  <p class="indent">
    <code>PRINT</code> (or <code>DISPLAY</code>) [ <i>output</i> <code>:</code> ] [ <i>expr</i> [ <i>format</i> ] ( <code>,</code> <i>expr</i> [ <i>format</i> ] ) * ]
  </p>
  <p>In any of these statements the <code>{</code> and <code>}</code> are not needed if there is only one statement or expression in the block. But for <code>timethis</code>, if the brackets are omitted a comma must separate the name expression from the timed expression.
  <p>The <code>LOOP</code> statement will repeatedly execute the block of statements based on several conditions:
     <ul><li>if only one expression is listed, the loop will be repeated that number of times, starting from one</li>
         <li>but if the <code>WITHIN</code> keyword is used then the starting value will be zero (and, of course) the end will be that value <code>- 1</code></li>
         <li>if the <i>expr</i> <code>..</code> <i>expr</i> form is used the loop will be repeated starting from the
             first value, until the second value is reached (inclusive), incrementing by one each time</li>
         <li>if the <code>,</code> <i>expr</i> is given, the loop is repeated starting from either one, or the first expression value, incrementing by this <i>step</i> expression until the value reaches the maximum.
         <li>and if only the end value and step are given, and if the step is negative, the starting value is <code>-1</code>, and the loop value is decremented each time.</li>
         <li>and if <code>WITHIN</code> is used, the starting value will be zero and the end will be one smaller (or less negative for a negative step)</li>
         <li>Note that using <code>within</code> does not change the behavior if the loop control is an object, list, or string.</li>
         <li>Use of <code>Within</code> does not make sense and gives an error if both a start and end value (with or without a step value) are given.</li>
     </ul>
     In any case, the optional loop variable will be set to the value of the indexing expression for each time through the loop.
     If no loop variable is given, the default variable <code>__</code> (double underscore) will be used (except this is an error for nested loops without explicit variables).
     The loop variable can be referenced inside the statement block, but nowhere else.  A loop variable has the same naming
     rules as a regular variable. Note that inside an interpolated string (inside the loop
     block) the value of a loop variable can be accessed via <code>$<i>var</i></code> or alternatively (and more verbosely) as
     <code>${<i>var</i>}</code>.
     Note that the loop can go in reverse if the step value is negative. Note that either of the start or end values can be negative, but it must be that
     <i>start</i> <code>&lt;=</code> <i>end</i> if the step value is positive, or <i>start</i> <code>&gt;=</code> <i>end</i> if the step value is negative,
     or else the statement block will never be executed. Note that it is an error if the step value is zero.
  <p>The <code>WHILE</code> statement will execute the block of statements as long as the <i>expr</i> evaluates to
     <code>true</code> (or the result can be converted to a boolean <code>true</code> value).
     This means the block might not be executed at all if the expression evaluates initially to <code>false</code>.
     If the code inside the statement block requires knowledge of which iteration is currently being executed a regular variable
     should be used (that is, there is no concept of a <i>loopvar</i> as in the <code>LOOP</code> statement).
     The resulting value of a <code>WHILE</code> statement is the final value of the last iteration of the statement block that was
     completed (that is, without a <code>NEXT</code> statement doing a short-circuit). The value of the controlling expression that
     continues or terminates the loop is never saved, except in any variables that are used.
  <p>Both <code>LOOP</code> and <code>WHILE</code> statements can have an optional label, which can be referenced from the
     <code>LEAVE</code> statement. Without the label on <code>leave</code>, the innermost loop will be exited. Using a label
     means the corresponding labeled loop is exited, which can be the outermost loop. Or <code>leave</code> can be used to exit
     the enclosing function early by referencing the function name as the label. For Java aficionados, this means <code>LEAVE</code>
     can function either as a labeled "break" statement, or as a "return", depending on the context and the label name, but also with
     the option to return the expression value, if given.
  <p>As in Python, if the <code>ELSE</code> clause is added to either <code>WHILE</code> or <code>LOOP</code> and the loop terminates normally (without a <code>LEAVE</code> being executed) the <code>else</code> block will execute. The <code>ELSE</code> will be skipped if the loop terminates abnormally (via <code>LEAVE</code>).
  <p>The <code>IF</code> statement evaluates the expression and executes the code block only if the expression evaluates to a
     boolean <code>true</code> value. If the optional <code>ELSE</code> block is given and the expression evaluates to
     <code>false</code> that block will be executed instead.
  <p>The <code>CASE</code> statement evaluates the expression (only once), then proceeds to obtain a match against the values or expressions in the order they are declared.
     The first time a match is made, the corresponding statement block is executed and the value of the whole <code>case</code> statement is the last value of that statement block.
     Note that the only selector expressions that are evaluated are those up until the point that a match is made, hence none after that point are evaluated. If the <code>default</code> block is executed, all the other expressions will have been evaluated prior to that point.
     If no match is made and there is a <code>default</code> block specified, that block is executed. Note: the expression match is made as if by <code>'=='</code> (that is, not a strict comparison),
     but the individual block values can be any kind of expression or object (including lists, objects, strings, functions, etc.). If a <code>...</code> selector is used, the set of values
     (with optional step value) will be tested in succession to see if any value matches the case expression. When the <code>matches</code> selector is used, the expression is a regular
     expression pattern (just like the <code>MATCHES</code> standalone function) against which the case expression is tested. The optional flags are identical to the optional flags in the <code>matches(...)</code> function. Using a comparison operator with an expression will test the
     case value against that expression, according to the operator. If the comparison succeeds, the corresponding block will be executed. If the selector has two comparison operators joined by one of
     the boolean operators, the comparisons must succeed according to the boolean operator for the block to be executed. An example of a proper comparison would be: <code>&gt; 2.0 &amp;&amp; &lt; 3.0</code> which would be true for
     any value between 2.0 and 3.0 (exclusive).
     Note that the idea of <i>"fall-through"</i> between statement blocks does not happen automatically (as in many other languages); in order to "fall through" the <code>next</code> statement
     must be coded as the last statement inside the block. 
  <p>The <code>LEAVE</code> statement will cause early termination of a <code>LOOP</code> or <code>WHILE</code> statement, or a function, with the final value of the statement being the
     (optional) expression on the <code>LEAVE</code> statement itself, or <code>null</code> if none is given. If a <code>LEAVE</code> statement is executed inside any other block (such as
     <code>IF</code> or <code>CASE</code>) that containing block is terminated, but the closest containing loop or function (or the labeled loop or function, if one is given here) is also terminated. If the <code>LEAVE</code> is executed
     outside any loop or function, the entire script is exited with the optional expression as the final value (and therefore as the process exit code).
     Note that it is an error to reference a label from <code>LEAVE</code> if that label does not exist in the enclosing context of the statement (particularly at the global code level).
  <p>The <code>NEXT</code> statement is only available inside a <code>LOOP</code>, <code>WHILE</code>, or <code>CASE</code> statement, where it transfers control to the next
     iteration of the loop or while, or to the next block in the case statement (without regard to the selector). This will obviously affect the final value of the statement.
     Note that in the absence of a <code>next</code> statement, execution does NOT fall through from one code block to the next inside a <code>CASE</code> statement.
     Also note that if control is transferred via the <code>next</code> statement to the next loop/while iteration, any expressions placed after the <code>next</code> are not executed on that iteration of the loop or while.
  <p>In the normal case, the value of any of these compound statements is the value of the last expression evaluated, inside whatever block is selected, and from the last iteration of that
     block inside a loop. But the only time this value can be used is for the return value of a function, or for
     <code>"case"</code> inside any other expression. For instance, consider the following code:
  <p class="indent">
      <code>define strings = { case upper(value) of "ONE": { 1 }, "TWO": { 2 }, "THREE" : { 3.14 }, default: { "many" } }</code><br>
      <code>value='one'; strings</code>
  </p>
    The final value of this function invocation will be the value of whichever block inside the <code>CASE</code> statement is executed, which in this example will be the value <code>1</code>.
  <p class="indent">
      <code style="color:blue;">value = 'one'</code><code style="color:gray;"> &#x21E8; </code><code style="color:green;">"one"</code><br>
      <code style="color:blue;">strings</code><code style="color:gray;"> &#x21E8; </code><code style="color:green;">1</code>
  </p>
  Also consider this code:
  <p class="indent">
      <code>define a={loop _i in 10 {_i}}</code><br>
      <code>a</code>
  </p>
  Which will evaluate as follows:
  <p class="indent">
      <code>Defining function '</code><code style="color:green;">a</code><code>' = </code><code style="color:blue;">{loop _i in 10 {_i}}</code><br>
      <code style="color:blue;">a</code><code style="color:gray;"> &#x21E8; </code><code style="color:green;">10</code>
  </p>
  <p>The <code>timethis</code> statement is a bit different than the others in that it doesn't affect the order of execution
     or change the result, but it can be used for debugging to evaluate the execution time of a piece of code. The optional first expression will be evaluated to a string and used to annotate the timing message. Note: the timing message is not
     affected by the <code>$quiet</code> or <code>$resultsonly</code> settings &mdash; it will always be displayed.
  <p class="indent">
    <code>timethis 'atan' { atan(pi/4) }</code><br>
    <code style="color:blue;">atan (pi / 4)</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">0.6657737500283538</code><br>
    <code>Elapsed time of "atan" was 0.003862 secs.</code>
  <p>The <code>Print</code> or <code>Display</code> statements will unconditionally display the optionally formatted expression results to the
     standard output channel, the error channel, or both. If a string constant of any kind is given as the argument to <code>print</code> the
     surrounding quotes will be removed, and any embedded quotes will be unescaped before the message is displayed. This is the equivalent of
     using the <code>@q</code> format.
  <p>There are many ways to produce good-looking output using <code>print</code>, including: specifying multiple expressions, which are
     displayed and concatenated "intelligently", according to English punctuation conventions; using interpolated strings to embed expression
     results along with text; using string concatenation; using the <code>formatstring</code> function to precisely format values; and using
     the color constants in the standard "library.calc" file to display nicely colored output. 
  <p>The optional output expression to the <code>print</code> statement tells where the output should go: default, <code>0</code> or
     <code>"output"</code> goes to <code>stdout</code>, <code>1</code> or <code>'ERROR'</code> (case does not matter) for <code>stderr</code>,
     or <code>2</code> or <code>"Both"</code> does, well... both.
  <p>If no arguments are given to <code>PRINT</code>, an empty line is displayed. Multiple arguments are displayed separated by a single space,
     except in certain cases where the surrounding punctuation shouldn't have it. In the GUI frame, the <code>stdout</code> and
     <code>stderr</code> streams are merged into the "Results" text area, so the output value is essentially meaningless. Specifying
     <code>"both"</code>, however, will display the message twice.
  <p>There are many more code examples in the <code>test/files</code> directory of the source distribution.
</div>
<a class="right-link" href="#topofpage">Top</a>
<hr id="Directives" class="sectionsep">
  <h2>Directives</h2>
<div class="cols">
  Various directives can be given within a script or on a separate input line in REPL mode that will affect the operation of the calculator. Some of them allow you to change the options given on the command line, while others are only available from within the script. All the mode-setting directives are also available in the Settings dialog (the <span class="orangebutton">&#x2261;</span> button or <code>F2</code> key) in GUI mode.
  <p>Note that directives do not themselves have values. This means that directives can be nested around expressions in functions (for instance)
     and the function value will be the same as if the directives were not present (well, unless the directives directly affect the calculation,
     as in <code>$rational on</code>).
  <p>The directives can be spelled in several ways (same as for predefined functions): all lower case, all UPPER case, and one or two MixedCase forms. For example: <code>$resultsonly</code>, <code>$RESULTSONLY</code>, <code>$Resultsonly</code>, or <code>$ResultsOnly</code>.
</div>
<a class="right-link" href="#Notes_on_Directives">Notes</a>
  <div class="center">
  <table style="margin-left:auto;margin-right:auto;">
    <caption class="tablecap">Available Directives</caption>
    <thead>
    <tr>
      <th style="width:250">Directive</th>
      <th style="width:400">Description</th>
      <th style="width:150">Aliases</th>
    </tr>
    </thead>
    <tbody>
    <tr><td><code>$decimal</code> <i>number_option</i> [ <i>statements</i> ]</td><td>Set the precision of all decimal calculations,<br>where <i>number_option</i> can be <code>(</code><i>number</i><code>)</code>, or <i>number</i>, or <i>variable</i><br>to specify the number of decimal digits of precision</td><td><code>$dec</code>, <code>$precision</code>, <code>$prec</code><br>or <code>settings.precision=</code><i>expr</i></td></tr>
    <tr><td><code>$default</code> [ <i>statements</i> ]</td><td>Set the default decimal precision (~34 digits) <i>(default)</i></td><td><code>$def</code><br>or <code>settings.precision=34</code></td></tr>
    <tr><td><code>$double</code> [ <i>statements</i> ]</td><td>Select the "double" decimal precision (~16 digits)</td><td><code>$dbl</code><br>or <code>settings.precision=16</code></td></tr>
    <tr><td><code>$float</code> [ <i>statements</i> ]</td><td>Select "float" decimal precision (~7 digits)</td><td><code>$flt</code><br>or <code>settings.precision=7</code></td></tr>
    <tr><td><code>$unlimited</code> [ <i>statements</i> ]</td><td>Set to unlimited decimal precision<br>(some calculations will still limit the precision to avoid<br>"non-terminating decimal expansion" errors)</td><td><code>$unl</code><br>or <code>settings.precision=0</code></td></tr>
    <tr><td><code>$degrees</code> [ <i>statements</i> ]</td><td>Do all trigonometric calculations assuming the inputs<br>are in <b>degrees</b> (360&#x00B0; in a circle)</td><td><code>$deg</code><br>or <code>settings.trigMode='degrees'</code></td></tr>
    <tr><td><code>$radians</code> [ <i>statements</i> ]</td><td>Do trig calculations assuming inputs are <b>radians</b> <i>(default)</i><br>(2&#x1D6D1; radians in a circle)</td><td><code>$rad</code><br>or <code>settings.trigMode="RADIANS"</code></td></tr>
    <tr><td><code>$grads</code> [ <i>statements</i> ]</td><td>Do trig calculations assuming values are <b>gradians</b> or <b>grads</b><br>(400&#x1d4d; in a full circle)</td><td><code>$gradians</code><br>or <code>settings.trigMode="GRADS"</code></td></tr>
    <tr><td><code>$binary</code> [ <i>statements</i> ]</td><td>Display units in terms of multiples of 1024</td><td><code>$bin</code><br>or <code>settings.units='binary'</code></td></tr>
    <tr><td><code>$si</code> [ <i>statements</i> ]</td><td>Display units in terms of multiples of 1000</td><td><code>$ten</code><br>or <code>settings.units='DECIMAL'</code></td></tr>
    <tr><td><code>$mixed</code> [ <i>statements</i> ]</td><td>Unit multiplier based on powers of 2 (same as <code>$binary</code>),<br>but with SI suffix instead <i>(default)</i></td><td><code>$mix</code><br>or <code>settings.units="Mixed"</code></tr>
    <tr><td><code>$clear</code> [ <i>wild_id</i> ( <code>,</code> <i>wild_id</i> ) * ]</td><td>Clear all or only the specified variables (set values to <code>null</code>)</td><td><code>$clr</code></td></tr>
    <tr><td><code>$variables</code> [ <i>wild_id</i> ( <code>,</code> <i>wild_id</i> ) * ]</td><td>Display the values of all or only the specified variables<br>(for a function the definition will be displayed, not the current value)</td><td><code>$variable</code>, <code>$vars</code>, <code>$var</code></td></tr>
    <tr><td><code>$predefined</code> [ <i>wild_id</i> ( <code>,</code> <i>wild_id</i> ) * ]</td><td>Display the current values of all or some of<br>the predefined variables</td><td><code>$predefs</code>, <code>$predef</code></td></tr>
    <tr><td><code>$include</code> <i>name_expr</i> ( <code>,</code> <i>charset_expr</i> )</td><td>Include the contents of the file(s) named by <i>name_expr</i>,<br>using the optional <i>charset_expr</i> as the charset</td><td><code>$inc</code>, <code>$load</code>, <code>$open</code>, <code>$lib</code>, <code>$library</code><br><code>$libs</code>, <code>$libraries</code></td></tr>
    <tr><td><code>$save</code> <i>name_expr</i> ( <code>,</code> <i>charset_expr</i> )</td><td>Save all variable values and function definitions in the file,<br>using the optional charset</td><td>&nbsp;</td></tr>
    <tr><td><code>$rational</code> <i>mode_option</i> [ <i>statements</i> ]</td><td>Set the rational calculation mode where <i>mode_option</i> is one of:<br><code>on</code>, <code>off</code>, <code>true</code>, <code>false</code>, <code>yes</code>, <code>no</code>, <code>pop</code>, <code>previous</code>, <code>prev</code>, or <i>variable</i><br><i>(default is <code>off</code>, or the value set on the command line)</i></td><td><code>$ration</code>, <code>$fraction</code>, <code>$frac</code>, <code>$fr</code><br>or <code>settings.rationalMode=</code><i>expr</i></td></tr>
    <tr><td><code>$separators</code> <i>mode_option</i> [ <i>statements</i> ]</td><td>Set whether to display thousands separators always<br><i>(default is <code>off</code> or value on command line)</i></td><td><code>$separator</code>, <code>$seps</code>, <code>$sep</code><br>or <code>settings.separatorMode=</code><i>expr</i></td></tr>
    <tr><td><code>$ignorecase</code> <i>mode_option</i> [ <i>statements</i> ]</td><td>Set whether to ignore case of variable and member names<br><i>(default is <code>off</code> or value on command line)</i></td><td><code>$caseinsensitive</code>, <code>$insensitive</code>,<br><code>$ignore</code>, <code>$case</code>, <code>$ign</code>, <code>$ins</code><br>or <code>settings.ignoreNameCase=</code><i>expr</i></td></tr>
    <tr><td><code>$quotestrings</code> <i>mode_option</i> [ <i>statements</i> ]</td><td>Set whether to quote string results<br>(default is <code>on</code> or value on command line)</td><td><code>$quotestring</code>, <code>$quotes</code>, <code>$quote</code><br>or <code>settings.quoteStrings=</code><i>expr</i></td></tr>
    <tr><td><code>$properfractions</code> <i>mode_option</i> [ <i>statements</i> ]</td><td>Display rational results (fractions) as proper fractions<br>(default is <code>off</code> or value on command line)</td><td><code>$properfraction</code>, <code>$proper</code><br>or <code>settings.properFractions=</code><i>expr</i></td></tr>
    <tr><td><code>$sortobjects</code> <i>mode_option</i> [ <i>statements</i> ]</td><td>Whether object keys are sorted<br>(default is <code>off</code> or value on command line)</td><td><code>$sortobject</code>, <code>$sortkeys</code>, <code>$sortkey</code><br>or <code>settings.sortKeys=</code><i>expr</i></td></tr>
    <tr><td><code>$colors</code> <i>mode_option</i> [ <i>statements</i> ]</td><td>Whether to use colors for subsequent output<br>(default is <code>on</code> or the command line value)</td><td><code>$color</code></td></tr>
    <tr><td><code>$require</code> [ <i>version</i> ] [<code>,</code>] [ <code>base</code> <i>version</i> ]</td><td>Establish minimum program and/or base versions<br>required for the script to run</td><td><code>$requires</code></td></tr>
    <tr><td><code>$assert</code> <i>expr</i> [ <code>,</code> <i>message</i> ]</td><td>Assert that a certain value is <code>true</code>,<br>otherwise halt and display message</td><td></td></tr>
    <tr><td><code>$timing</code> <i>mode_option</i> [ <i>statements</i> ]</td><td>Set the timing mode (same <i>mode_option</i> choices as for <code>$rational</code>)<br><i>(default is <code>off</code> or the value set on the command line)</i></td><td><code>$time</code></td></tr>
    <tr><td><code>$debug</code> <i>mode_option</i> [ <i>statements</i> ]</td><td>Set the debug mode (same <i>mode_option</i> choices as for <code>$rational</code>)<br><i>(default is <code>off</code> or the value set on the command line)</i></td><td><code>$deb</code>, <code>$dbg</code></td></tr>
    <tr><td><code>$resultsonly</code> <i>mode_option</i> [ <i>statements</i> ]</td><td>Set the results-only mode<br><i>(default is <code>off</code> or value on command line)</i></td><td><code>$resultonly</code>, <code>$results</code>, <code>$result</code>, <code>$res</code></td></tr>
    <tr><td><code>$quiet</code> <i>mode_option</i> [ <i>statements</i> ]</td><td>Set quiet mode<br><i>(default is <code>off</code> or the value on command line)</i></td><td><code>settings.silent=</code><i>expr</i></td></tr>
    <tr><td><code>$silence</code> <i>mode_option</i> [ <i>statements</i> ]</td><td>Set "silence directives" mode<br><i>(default is <code>off</code> or the value on the command line)</i></td><td><code>$silencedirectives</code>,<br><code>$silentdirectives</code>,<br><code>$silencedir</code>, <code>$silentdir</code>,<br><code>$silent</code><br>or <code>settings.silenceDirectives=</code><i>expr</i></td></tr>
  </tbody>
  </table>
  </div>
<a class="right-link" href="#topofpage">Top</a>
<hr id="Notes_on_Directives" class="sectionsep">
  <h2>Notes on Directives</h2>
<div class="cols">
  The <i>string</i> argument for the <code>$include</code> directive can be a comma-separated list of file names, with or without
     paths. If a file cannot be read and there is a previous input directory available (set either by a previous file with a path
     given, or by the <code>-inputDir</code> command-line option), that directory is searched for the file. If not found there,
     the string is presumed not to be a file name, and the value of the string itself is processed as an expression. Note: this is
     the same process as used for strings given on the command line.
  <p>For directives which use a <i>mode_option</i>, the available values are as follows:
  <ul><li><code>on</code>, <code>true</code>, or <code>yes</code> = set the mode <code><i>on</i></code>, and save the previous value in the stack</li>
      <li><code>off</code>, <code>false</code>, or <code>no</code> = set the mode <code><i>off</i></code>, and save the previous value</li>
      <li><code>pop</code>, <code>previous</code>, or <code>prev</code> = pop the previous value off the stack and set the mode to
          that previous value</li>
  </ul>
  <p>The initial value is as specified in the table above (always <code><i>off</i></code>, actually), or the value given by
     the corresponding command-line option. If there are no more entries in the stack when the <code>pop</code> option is given
     the value will be set to <code><i>off</i></code>.
  <p>If the optional statement block is given, the mode is set to the given value, the statements are executed, then the mode is
     "popped" back to the original value, as if the statement block was ended by <code>$<i>directive</i> pop</code> (or the equivalent setting
     for the "non-mode-option" directives such as <code>$mixed</code>). For example:
  <p class="indent"><code style="color:black;">&gt; </code><code style="color:blue;">$results on { "This is true." }</code><br>
     <code style="color:green;">"This is true."</code>
  <p class="indent"><code style="color:black;">&gt; </code><code style="color:blue;">$binary { settings.units }</code><br>
     <code style="color:blue;">Units in </code><code style="color:green;">binary</code><code>.</code><br>
     <code style="color:blue;">settings.units</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"BINARY"</code><br>
     <code style="color:blue;">Units in </code><code style="color:green;">mixed</code><code style="color:blue;"> form.</code>
  <p>The <i>statements</i> can be a single statement, or multiple statements, but must be enclosed by brackets, as in <code>{ ... }</code> in any case.
  <p>The <code>wild_id</code> values for <code>$clear</code>, <code>$variables</code>, and <code>$predefined</code> can be wild-card values, such as
     <code>t*</code> or <code>?a?</code>. A <code>?</code> matches any one character, and <code>*</code> matches any string (including empty) of characters up until the trailing sequence. Only values matching these patterns will be displayed or cleared.
  <p>The only effect of debug mode is to display the parse tree (in LISP format) before the expression(s) is/are evaluated.
  <p>The <i>version</i> values for the <code>$require</code> directive, or <code>-requires</code> command line option, can be strings (in the <a href="https://semver.org">Semantic Version</a> format, including a possible pre-release string),
     or one, two, or three integers separated by periods. The current version numbers are available by running <code>c -version</code> (from the command line) or using the
     <code>$version</code> command in REPL mode, or from the <code>info.version</code> predefined variable. There is also a standard library function named <code>"version"</code> that
     formats a "long" version string out of the bare values. Examples of valid version values (note: the quotes are significant):
     <ul><li><code style="color:blue;">15</code></li>
         <li><code style="color:blue;">0.9</code></li>
         <li><code style="color:blue;">1.2</code></li>
         <li><code style="color:blue;">2.12.15</code></li>
         <li><code style="color:blue;">"3.4.5-debug"</code></li>
         <li><code style="color:blue;">"1.9.22-debug+5e7f77e"</code></li>
    </ul>
  <p>Timing mode displays the total parsing and execution time (to nanosecond precision on some systems) after the results are displayed.
  <p>The effect of <code>$sortobjects on</code> is to override the way <i>key</i><code>:</code><i>value</i> pairs are added to objects.
     By default they are added and kept in the order of declaration. With this option <code>on</code>, the keys are sorted alphabetically and kept
     sorted that way as elements are added and removed.
  <p>Gradian mode is used to do trignometric calculations using a measure of 400 <em>grads</em> (also called "gons" &mdash;
     see <a href="https://en.wikipedia.org/wiki/Gradian">"Gradian"</a> for further explanation) for the full circle (vs. 360 degrees or
     2&#x1D6D1; radians).
  <p>The <code>$assert</code> directive is used to guarantee that certain conditions are met before proceeding. The required expression is evaluated, and if it does not evaluate to <code>true</code> an error is thrown, execution stops, and either the message (if given), or the text of the failing expression, is displayed. If the expression does evaluate <code>true</code> execution continues to the next expression.
</div>
<a class="right-link" href="#topofpage">Top</a>
<hr id="Standard_Libraries_of_Functions" class="sectionsep">
  <h2>Standard Libraries of Functions</h2>
<div class="cols">
  <p>There is currently a "standard" library available in the <code>test/files</code> directory of the source code:  <code>"library.calc"</code>.
     Since the contents of this library changes frequently, you should open the current version in the GUI window
     or your favorite text editor to examine the contents before using any of the functions.  There is also a "help_mort" function defined
     that explains the finance-related code.
  <p>At a minimum, the "library" has code to convert to/from our date values and the standard Excel&trade; date values, and do other date-related manipulation.
     There are also some mortgage-related (or "time value of money") functions defined.
  <p>The "library.calc" file is version-stamped at the beginning, using the <code>$require</code> directive, so that this library must match the current version of Calc in order to be loaded. The <code>$save</code> directive also places a <code>$require</code> directive with the current version strings into the saved file. This mechanism ensures that an older version of Calc will
     not be able to load a new library (since it might depend on features not present in the older version). Also, a saved file will ignore the <code>$separators</code> mode while writing, since numbers with separators are not (yet) supported on input.
  <p>Any file of compatible expressions and directives can be used as a "library". In order to use such a library, list its name with a <code>-library</code> option on the command line, or use the <code>$include</code> directive inside any other script.
  <p>The standard library (as of version 2.12.15) contains the following functions (partial listing):
</div>
<div class="center">
  <table style="margin-left:auto;margin-right:auto;width:65%;">
    <caption class="tablecap">Standard Library Contents</caption>
    <thead>
    <tr>
      <th style="width:20%;">Name</th>
      <th style="width:20%;">Parameters</th>
      <th style="width:60%;">Description</th>
    </tr>
    </thead>
    <tbody>
    <tr><td><code>EOL</code></td><td></td><td>Alias for <code>info.os.linesep</code> (platform-specific line separator)</td></tr>
    <tr><td><code>ON_WINDOWS</code></td><td></td><td>Alias for <code>info.os.id == 'windows'</code></td></tr>
    <tr><td><code>excel_date</code></td><td><code>date</code></td><td>Convert one of our date values to an Excel&trade; date</td></tr>
    <tr><td><code>excel_date_1904</code></td><td><code>date</code></td><td>Convert one of our date values to an Excel&trade; "1904" date<br>(where 1/1/1904 is day 0)</td></tr>
    <tr><td><code>to_excel_col</code></td><td><code>idx</code></td><td>Translate a numeric column index (1-based) to an Excel column name ("A" to "XFD")</td></tr>
    <tr><td><code>from_excel_col</code></td><td><code>col</code></td><td>Translate an Excel column name ("A" to "XFD") to a numeric column index (1-based)</td></tr>
    <tr><td><code>rad_to_deg</code></td><td><code>rad</code></td><td>Convert from numeric degrees to radians</td></tr>
    <tr><td><code>deg_to_rad</code></td><td><code>deg</code></td><td>Convert from radians to numeric degrees</td></tr>
    <tr><td><code>rad_to_grad</code></td><td><code>rad</code></td><td>Convert from radians to centesimal degrees or gradians</td></tr>
    <tr><td><code>grad_to_rad</code></td><td><code>grad</code></td><td>Convert gradians/grads to radians</td></tr>
    <tr><td><code>deg_to_grad</code></td><td><code>deg</code></td><td>Convert numeric degrees to gradians/grads</td></tr>
    <tr><td><code>grad_to_deg</code></td><td><code>grad</code></td><td>Convert grads to numeric degress</td></tr>
    <tr><td><code>FtoC</code></td><td><code>f</code></td><td>Convert temperature in Fahrenheit to Celsius</td></tr>
    <tr><td><code>CtoF</code></td><td><code>c</code></td><td>Convert temperature in Celsius to Fahrenheit</td></tr>
    <tr><td><code>dow_name</code></td><td><code>date</code></td><td>Get the day of week name for a given date</td></tr>
    <tr><td><code>moy_name</code></td><td><code>date</code></td><td>Get the month name for a given date</td></tr>
    <tr><td><code>long_date</code></td><td><code>date</code> (default <i>today</i>)</td><td>Get the long form of a date</td></tr>
    <tr><td><code>surr_pair_to_cp</code></td><td><code>h</code>, <code>l</code></td><td>Convert a surrogate pair to Unicode codepoint</td></tr>
    <tr><td><code>cp_to_low_surr</code></td><td><code>cp</code></td><td>Extract the high surrogate from a codepoint</td></tr>
    <tr><td><code>cp_to_high_surr</code></td><td><code>cp</code></td><td>Extract the low surrogate from a codepoint</td></tr>
    <tr><td><code>TICKS_PER_SECOND</code></td><td></td><td>Number of time value ticks in a second</td></tr>
    <tr><td><code>TICKS_PER_MINUTE</code></td><td></td><td>Number of time value ticks in a minute</td></tr>
    <tr><td><code>TICKS_PER_HOUR</code></td><td></td><td>Number of time value ticks in an hour</td></tr>
    <tr><td><code>hot</code></td><td><code>time</code></td><td>Number of hours in a time value</td></tr>
    <tr><td><code>mot</code></td><td><code>time</code></td><td>Number of minutes in a time value</td></tr>
    <tr><td><code>sot</code></td><td><code>time</code></td><td>Number of seconds in a time value</td></tr>
    <tr><td><code>timestamp</code></td><td><code>date</code> (default <i>today</i>),<br><code>time</code> (default <i>now</i>)</td><td>Timestamp from given date, time in Linux "date" format</td></tr>
    <tr><td><code>dateformat</code></td><td><code>d</code>,<br><code>f</code> (default <code>"mm/dd/yyyy"</code>)</td><td>Format the date according to the custom format string</td></tr>
    <tr><td><code>gmtnow</code></td><td></td><td>Current time in the GMT time zone</td></tr>
    <tr><td><code>is_perfect</code></td><td><code>n</code></td><td>Determine if the given number is a "perfect" number</td></tr>
    <tr><td><code>version</code></td><td></td><td>Complete current version information</td></tr>
    <tr><td><code>quad</code></td><td><code>a</code>, <code>b</code>, <code>c</code></td><td>Solve the quadratic formula for the equation <code>a<i>x</i><sup>2</sup> + b<i>x</i> + c = 0</code></td></tr>
    <tr><td><code>quad_exp</code></td><td><code>a</code>, <code>b</code>, <code>c</code>, <code>x</code></td><td>Find the <i>y</i> value of the quadratic equation <code>a<i>x</i><sup>2</sup> + b<i>x</i> + c</code></td></tr>
    <tr><td><code>zeta_2n</code></td><td><code>_2n</code></td><td>The Euler-Riemann "zeta" function for positive even integers</td></tr>
    <tr><td><code>Tn</code></td><td><code>k</code></td><td>Tangent number for <code>2k + 1</code></td></tr>
    <tr><td><code>PMT</code></td><td><code>P</code>, <code>R</code>, <code>N</code></td><td>Calculate the monthly payment for<br>a present value of <code>P</code>, yearly percentage <code>R</code>, and number of years <code>N</code></td></tr>
    <tr><td><code>monthly</code></td><td><code>P</code>, <code>R</code>, <code>N</code></td><td>Display a nice message with the monthly payment on a mortgage<br>(see <code>PMT(P,R,N)</code></td></tr>
    <tr><td><code>help_mort</code></td><td></td><td>Usage message for the mortgage functions</td></tr>
    <tr><td><code>stack</code></td><td></td><td>Definition of a <i>stack</i> data structure<br>use <code>s = eval(stack)</code></td></tr>
    <tr><td><code>push</code></td><td><code>s</code>, <code>value</code></td><td>Push the value onto an existing stack</td></tr>
    <tr><td><code>pop</code></td><td><code>s</code></td><td>Pop the last value off the given stack</td></tr>
    <tr><td><code>peek</code></td><td><code>s</code></td><td>Examine the top stack value without popping it</td></tr>
    <tr><td><code>isempty</code></td><td><code>s</code></td><td>Is the stack empty?</td></tr>
    <tr><td><code>mean_stddev</code></td><td><code>values</code></td><td>Compute the mean and standard deviation of a list of values<br>returns <code>{ mean: <i>xxx</i>, stddev: <i>yyy</i> }</code></td></tr>
    <tr><td><code>uuid</code></td><td></td><td>Get a unique identifier (string)</td></tr>
    <tr><td>More TBD</td><td></td><td>Consult the source code of <code>library.calc</code> to see the complete list</td></tr>
    </tbody>
  </table>
</div>
<a class="right-link" href="#topofpage">Top</a>
<hr id="GUI_Operations" class="sectionsep">
  <h2>GUI Operations</h2>
<div class="cols">
  <p>The GUI window can be opened initially using the "<code>cg</code>" command (or on Windows only, the <code>``</code> command),
     or by entering the <code>gui</code> command in REPL mode. Note that although you can switch from REPL mode to GUI mode, the reverse is not possible. The GUI window looks like this with the focus initially in the "Expressions" field:
</div>
  <div class="center">
  <br><img src="calc_initial.png" alt="Initial GUI screen" width="50%">
  </div>
<div class="cols">
  An expression can be entered on each line, and all will be executed in order when the <span class="redbutton">!</span> button (or the <code>F9</code> key) is pressed, and the results displayed in the "Results" field. The <code>Ctrl+Enter</code> (or <code>&#x2318;Enter</code> on Mac) key will also perform the calculation(s). This behavior can be changed in the Settings dialog to just use the <code>Enter</code> key on any platform.
  <p>This help page will also be displayed by the <span class="bluebutton">?</span> button (or the <code>F1</code> key).
  <p>Note: colors are not currently implemented in the GUI "Results" area, BUT there are dark and light color schemes implemented for the
     main window, so using the command-line options <code>-darkbg</code> or <code>-lightbg</code>, or the "Colors" setting in the GUI "Window Settings" tab will switch between these color schemes.
  <p>Most of the settings available using Directives can be set in the GUI using the Settings dialog (the <span class="orangebutton">&#x2261;</span> button or <code>F2</code> key).
  <p>The calculation settings are also available to either read or write by accesssing the fields in the <code>settings</code> object. Setting one of the <code>settings</code> fields has the exact same effect as using the corresponding directive.
  <p>Although the option for "Color the results?" is visible in the Settings dialog, it is always disabled (and the <code>$colors on</code> directive has no effect) since coloring is not implemented in the GUI Results field.
</div>
  <div class="center">
  <br><img src="calc_settings.png" alt="GUI Settings screen" width="40%">
      <img src="calc_window_settings.png" alt="GUI Window Settings screen" width="40%">
  </div>
<a class="right-link" href="#topofpage">Top</a>
<hr id="TODO_Items_for_This_Document" class="sectionsep">
  <h2>TODO Items for This Document</h2>
<div class="cols">
  <ul>
    <li>Interactions with Tester (use "mkcanon" and "-nocolors")</li>
    <li>Explain "silent" operation WRT "eval", "loop", interpolated strings, functions</li>
    <li>Notes on colors and the changes with dark and light backgrounds</li>
  </ul>
</div>
<a class="right-link" href="#topofpage">Top</a>
<hr class="sectionsep">

  <footer><br><div class="title-box">Copyright&nbsp;&copy;&nbsp;2020-2025 Roger L. Whitcomb.<br>Licensed under an <a href="https://github.com/rlwhitcomb/utilities/blob/master/LICENSE">MIT</a> license.<br>Last modified: ${__DATE__} at ${__TIME__}</div><br></footer>
</body>
</html>

