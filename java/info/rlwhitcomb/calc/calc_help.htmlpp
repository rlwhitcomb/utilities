<!DOCTYPE html>
<html>
  <head>
    <title>Expression Calculator Help</title>
    <style>
table {
  font-family: helvetica, arial, sans-serif;
  border-collapse: collapse;
  table-layout: fixed;
}

tr, th, td {
  border: 1px solid #dddddd;
  text-align: center;
  padding: 4px;
}

th {
  background: cornflowerblue;
}

tr:nth-child(odd) {
  background-color: #f8f0f0;
}

table code {
   font-size: 130%;
   font-weight: bold;
}

code {
   font-size: 120%;
   font-weight: bold;
}

h2 {
   margin-left: 30px;
   margin-right: 30px;
}

.title-box {
    margin: 25px;
    overflow: hidden;
    text-align: center;
    padding: 20px;
    background-color: lightgreen;
    border: 1px solid cornflowerblue;
    -webkit-border-radius: 20px;
    border-radius: 20px;
}

.cols {
    columns: 3;
    column-rule: 2px double cornflowerblue;
    column-gap: 40px;
    margin-left: 40px;
    margin-right: 40px;
}

.sectionsep {
    border: 0 none;
    background-color: cornflowerblue;
    height: 2px;
    margin-left: 40px;
    margin-right: 40px;
    margin-top: 30px;
}

.center {
    text-align: center;
}

.underline {
   text-decoration: underline;
}

.redbutton {
   font-family: Verdana, Helvetica, Arial, Sans-Serif;
   font-size: 24pt;
   font-weight: bold;
   color: red;
}

.bluebutton {
   font-family: Verdana, Helvetica, Arial, Sans-Serif;
   font-size: 24pt;
   font-weight: bold;
   color: blue;
}

.orangebutton {
   font-family: Verdana, Helvetica, Arial, Sans-Serif;
   font-size: 24pt;
   font-weight: bold;
   color: darkorange;
}

.tablecap {
   font-size: 1.5em;
   margin-top: 0.83em;
   margin-bottom: 0.83em;
   margin-left: 0;
   margin-right: 0;
   font-weight: bold;
}

.innertable {
   margin-left: auto;
   margin-right: auto;
   border-spacing: 0;
   border: none;
}

.innertable tr {
   padding: 4px;
   border-spacing: 20;
   border: none;
}

.innertable th,
.innertable td {
   padding: 4px;
   margin: 8px;
   border-spacing: 20;
   border: none;
}

.innertable caption {
   display: none;
}

.innertable tr:nth-child(odd) {
  background-color: #f8f0f0;
}

.indent {
   margin-left: 20px;
}
    </style>
</head>

<body>
  <div class="title-box">
    <h1>Expression Calculator Help</h1>
    <h2>Version ${Calc.version}, build ${build.number}</h2>
  </div>
<hr class="sectionsep">
  <h2>Introduction</h2>
<div class="cols">
  An expression calculator that combines (nearly) unlimited precision decimal arithmetic with a rich assortment
       of operators and functions to give the ability to calculate nearly any arithmetic expression.
  <p>As input, the expression calculator can operate on an expression given entirely on the command line (may need to be
       quoted for certain operator characters); in <a href="https://en.wikipedia.org/wiki/Read-eval-print_loop">REPL</a> mode
       (<span class="underline">R</span>ead, <span class="underline">E</span>val, <span class="underline">P</span>rint
        <span class="underline">L</span>oop) where a prompt is displayed, the input lines are evaluated
       one-at-a-time, and the results displayed; from a file for predefined calculations; or inside a simple GUI frame.
  <p><em><strong>Why would I want this calculator when there are so many already available (handheld, apps on your phone, default apps on your computer)?</strong></em>
      <ul>
        <li>The ability to do (essentially) unlimited precision arithmetic.</li>
        <li>More operators and functions than are typically available anywhere else.</li>
        <li>The ability to define functions for repeated calculations.</li>
        <li>Variables for storage of values for later use.</li>
        <li>Object and array structures for storage of multiple values.</li>
        <li>String functions for doing text manipulation.</li>
        <li>The ability to do calculations straight from the command line, or in a convenient REPL loop, or in a GUI window.</li>
        <li>The ability to define libraries of functions that can be accessed through the "<code>:include</code>" directive.</li>
        <li>Calculations can be edited (using backspace, etc.) to reduce the chance of keyboard errors.</li>
        <li>Looping and conditional statements to do pretty much any kind of calculation.</li>
        <li>It is being actively developed and maintained, so more features will be added over time.</li>
        <li>This is Open-Source Software (<a href="https://opensource.com/resources/what-open-source">OSS</a>) so the code can be examined, and modified (if desired) for your own use.</li>
      </ul>
</div>
<hr class="sectionsep">
  <h2>Command Line</h2>
<div class="cols">
  The command line is assumed to have either the name of a file to process, or an expression to evaluate. There may also be options specified (see the next section). If there is a single value given and there exists a file by that name (possibly in another directory given by the prior <code>-inputdir</code> option), then that file is read, the contents parsed, and all the expressions evaluated. Otherwise, if there are more than one argument on the command line, or the single argument does not name a file, then the command line is taken as a single string, parsed, and then evaluated.
</div>
  <h2>Command Line Options</h2>
<div class="cols">
  Certain options can be given on the command line that affect the operation of the calculator. These options can also be set via the <code>CALC_OPTIONS</code> environment variable. Options specified on the command line will override the defaults set by <code>CALC_OPTIONS</code>, and options given later on the command line override ones given earlier.
  <p>Options are case-insensitive, and maybe be prefixed with either <code>-</code>, <code>--</code>, or on Windows <code>/</code>, as in: <code>--lightbg</code>, <code>-rational</code>, or <code>/quiet</code> <i>(Windows only)</i>. Almost all of the options have several aliases (mostly fewer characters) as shown in the table below. Some of these settings, in addition, can be set using Directives from within a script, or from the Settings dialog in the GUI window.
</div>
  <div class="center">
  <table style="margin-left:auto;margin-right:auto;width:65%;">
    <caption class="tablecap">Command Line Options</caption>
    <thead>
    <tr>
      <th style="width:22%">Option</th>
      <th style="width:45%">Description</th>
      <th style="width:33%">Aliases</th>
    </tr>
    </thead>
    <tbody>
    <tr><td><code>-nointro</code></td><td>Do not print the introductory message in REPL mode</td><td><code>-noi</code></td></tr>
    <tr><td><code>-intro</code></td><td>Print the introductory message in REPL mode <i>(default)</i></td><td><code>-int</code>, <code>-i</code></td></tr>
    <tr><td><code>-gui</code></td><td>Start immediately in GUI mode</td><td><code>-g</code></td></tr>
    <tr><td><code>-console</code></td><td>Start instead in console mode <i>(default)</i></td><td><code>-cons</code>, <code>-con</code>, <code>-c</code></td></tr>
    <tr><td><code>-debug</code></td><td>Display a debug printout of the syntax tree for every input</td><td><code>-deb</code>, <code>-d</code><br>(or use the <code>:debug on</code> directive)</td></tr>
    <tr><td><code>-nodebug</code></td><td>Don't display the syntax tree for debugging <i>(default)</i></td><td><code>-nodeb</code>, <code>-no</code><br>(or use the <code>:debug off</code> directive)</td></tr>
    <tr><td><code>-colors</code></td><td>Use coloring (on the console) for results and messages <i>(default)</i></td><td><code>-color</code>, <code>-col</code></td></tr>
    <tr><td><code>-nocolors</code></td><td>Do not use coloring in the console</td><td><code>-nocolor</code>, <code>-nocol</code>, <code>-noc</code></td></tr>
    <tr><td><code>-darkbackgrounds</code></td><td>Use colors suitable for a dark console background<br><i>(default for Windows)</i></td><td><code>-darkbackground</code>, <code>-darkback</code>,<br><code>-darkbg</code>, <code>-dark</code>, <code>-dk</code></td></tr>
    <tr><td><code>-lightbackgrounds</code></td><td>Use colors suitable for a light (white) console background<br><i>(default for non-Windows platforms)</i></td><td><code>-lightbackground</code>, <code>-lightback</code>,<br><code>-lightbg</code>, <code>-light</code>, <code>-lt</code></td></tr>
    <tr><td><code>-timing</code></td><td>Display timing after each input</td><td><code>-time</code>, <code>-t</code><br>(also use the <code>:timing on</code> directive)</td></tr>
    <tr><td><code>-notiming</code></td><td>Do not display timings <i>(default)</i></td><td><code>-notime</code>, <code>-not</code><br>(also use the <code>:timing off</code> directive)</td></tr>
    <tr><td><code>-resultsonly</code></td><td>Do not display the input expression on output,<br>but only the results</td><td><code>-resultonly</code>, <code>-results</code>, <code>-result</code>,<br><code>-res</code>, <code>-r</code><br>(also use <code>:resultsonly on/off</code> directive)</td></tr>
    <tr><td><code>-quiet</code></td><td>Do not display anything<br>(suitable for behind-the-scenes calculations)</td><td><code>-q</code><br>(also use the <code>:quiet on/off</code> directive)</td></tr>
    <tr><td><code>-rational</code></td><td>Do all possible calculations in fraction mode,<br>that is as a ratio of natural numbers<br>(as in <code>1/3</code> instead of <code>0.3333333333333333</code>)</td><td><code>-ration</code>, <code>-rat</code><br>(also use the <code>:rational on</code> directive)</td></tr>
    <tr><td><code>-decimal</code></td><td>Do all calculations as decimal values <i>(default)</i></td><td><code>-dec</code><br>(also use the <code>:rational off</code> directive)</td></tr>
    <tr><td><code>-separators</code></td><td>Display all numeric values with thousands separators</td><td><code>-separator</code>, <code>-seps</code>, <code>-sep</code>, <code>-s</code><br>(also use the <code>:separators on</code> directive)</td></tr>
    <tr><td><code>-ignorecase</code></td><td>Ignore case of variable and member names</td><td><code>-caseinsensitive</code>, <code>-insensitive</code>, <code>-ignore</code>, <code>-case</code>, <code>-ign</code>, <code>-ins</code><br>(also use the <code>:ignorecase on</code> directive)</td></tr>
    <tr><td><code>-locale</code> <i>locale_name</i></td><td>Specify the locale to use for messages</td><td><code>-loc</code>, <code>-l</code></td></tr>
    <tr><td><code>-inputdir</code> <i>directory</i></td><td>Specify a default directory for files to be processed</td><td><code>-input</code>, <code>-dir</code></td></tr>
    <tr><td><code>-cmdenter</code></td><td>Use <code>Ctrl+Enter</code> (or <code>&#x2318;Enter</code> on Mac)<br>to calculate in the GUI input field <i>(default)</i></td><td><code>-cmd</code></td></tr>
    <tr><td><code>-enter</code></td><td>Use just <code>Enter</code> to calculate in GUI input field</td><td><code>-e</code></td></tr>
    <tr><td><code>-help</code></td><td>Display this help page</td><td><code>-h</code>, <code>-?</code></td></tr>
    <tr><td><code>-version</code></td><td>Display the version information for the program on the console</td><td><code>-vers</code>, <code>-ver</code>, <code>-v</code></td></tr>
  </tbody>
  </table>
  </div>
<hr class="sectionsep">
  <h2>Read, Eval, Print Loop Commands</h2>
  <div class="cols">
  <p>In REPL mode, in addition to expressions and directives (as described below), there are a few commands available to do other
     things, mostly as alternatives to command-line options. Note that these commands are only available in REPL mode, and not
     from a script file, nor in the GUI input window (although there are GUI buttons for most of them).
  </div>
  <div class="center">
  <table style="margin-left:auto;margin-right:auto;">
    <caption class="tablecap">REPL Commands</caption>
    <thead>
    <tr>
      <th style="width:100">Command</th>
      <th style="width:300">Description</th>
      <th style="width:200">Aliases</th>
      <th style="width:200">Command-Line Equivalent</th>
    </tr>
    </thead>
    <tbody>
    <tr><td><code>quit</code></td><td>Exit the program normally.</td><td><code>exit</code>, <code>:quit</code>, <code>:exit</code>,<br><code>:q</code>, <code>:e</code>, <code>:x</code></td><td></td></tr>
    <tr><td><code>help</code></td><td>Display the HTML help page in the browser.</td><td><code>?</code>, <code>:help</code>, <code>:?</code></td><td><code>-help</code></td></tr>
    <tr><td><code>version</code></td><td>Display program version information.</td><td><code>:version</code>, <code>:vers</code>,<br><code>:ver</code>, <code>:v</code></td><td><code>-version</code></td></tr>
    <tr><td><code>gui</code></td><td>Switch to GUI mode</td><td><code>:gui</code>, <code>:g</code></td><td><code>-gui</code></td></tr>
  </tbody>
  </table>
  </div>
<hr class="sectionsep">
  <h2>Values, Constants, and Variables</h2>
<div class="cols">
  The basic building blocks of the expressions implemented here are the basic value types: numbers (either integer or real
     numbers with a fractional part), strings, rational fractions, boolean values, and the <code>null</code> value.
     Numbers can be of arbitrary precision, up to a maximum of 2**32-1 (4,294,967,295) digits. Strings can also be of any length up
     to the same number of characters.
  <p>Simple numeric constants follow the normal rules, and can be expressed as simple integers (as in <code>4129</code>),
     decimal numbers (as in <code>23.47</code>), or floating point constants in scientific notation (as in <code>1.2e-20</code>).
     The boolean constants are <code>true</code> and <code>false</code> (although they are case-insensitive, so could be spelled
     as <code>True</code> or <code>TRUE</code> as well). The special null constant is simply <code>null</code> (again, case-insensitive).
  <p>Numeric values can also be specified using "kilobyte" notation in one of two forms: multipliers of 1000, or multipliers of 1024 (2**10).
     These multipliers are simply appended to the number to automatically multiply by the given amount. The allowed suffixes are:
     <code>Kb</code>, <code>Mb</code>, <code>Tb</code>, <code>Pb</code>, and <code>Eb</code> which all multiply by their respective
     powers of 1000, while <code>Kib</code>, <code>Mib</code>, etc. multiply by the successive multiples of 1024. Note that these
     multiplier suffixes are case-insensitive.
  <p>For example:  <code>2Kb = 2000</code>, or <code>4Kib = 4096</code>. Any integer results can be formatted as these type of
     values using the <code>@k</code> or <code>@K</code> formats (the latter giving all upper case results), and depending on the
     <code>:SI</code>, <code>:BINARY</code>, or <code>:MIXED</code> mode directives in effect. These modes function as illustrated here:<br>
<code><span style="color:grey;">&gt;</span> :mixed<br>
<span style="color:green;">Units in mixed form.</span><br>
<span style="color:grey;">&gt;</span> 2000@k<br>
<span style="color:blue;">2000 @k</span> <span style="color:grey;">-&gt;</span> <span style="color:green;">1.95 Kbytes</span><br>
<span style="color:grey;">&gt;</span> :si<br>
<span style="color:green;">Units in SI (base ten) form.</span><br>
<span style="color:grey;">&gt;</span> 2000@k<br>
<span style="color:blue;">2000 @k</span> <span style="color:grey;">-&gt;</span> <span style="color:green;">2.00 Kbytes</span><br>
<span style="color:grey;">&gt;</span> :bin<br>
<span style="color:green;">Units in binary.</span><br>
<span style="color:grey;">&gt;</span> 2000@k<br>
<span style="color:blue;">2000 @k</span> <span style="color:grey;">-&gt;</span> <span style="color:green;">1.95 Kibytes</span>
</code>
  <p>String constants are of two types: <i>simple</i> strings, constructed using either single- or double-quotes (or "smart"
     quotes: see below), or <i>interpolated</i> strings, which allow the value of expressions (or simple variables) to be
     interpolated into the final string value. These are
     formed using the back-tick character (<code>` . . . `</code>). Interpolation is done using either <code>$<i>variable</i></code>
     or <code>${<i>expression</i>}</code>. To embed a back-tick character in the string, use <code>\`</code>. To embed a backslash,
     therefore, use <code>\\</code>. The normal C/Java escapes such as <code>\t</code> or <code>\n</code> are also available.
     To embed a dollar sign in the string, use <code>$$</code> (but see the note about loop variables below). To embed any Unicode
     codepoint, use <code>\u<i>NNNN</i></code> where <code><i>N</i></code> is a hexadecimal digit, for values up to 0xFFFF, or
     <code>\u{<i>NNNNNN</i>}</code> for codes beyond the Unicode BMP (Basic Multilingual Plane). "Smart" quotes can also be used
     to delimit strings (such as <code>&#x00AB;This is a test&#x00BB;</code>. The ending quote can be included by escaping it.
     When interpolating values into an interpolated string, the string representation of the value is used. If the value is
     <code>null</code> nothing will be added to the string.
  <p>For example, given this code:
<p class="indent"> <code>name="Jack"; `Hi, $name!`</code> </p>
 the result will be:
<p class="indent"> <code>"Hi, Jack!"</code> </p>
    For this code, however, assuming that the variable <code>junk</code> has not been given a value, we have:
<p class="indent"> <code>`Calling $junk...`</code> </p>
which gives:
<p class="indent"> <code>"Calling ..."</code> </p>
     since the value of <code>junk</code> will be <code>null</code>. Values are
     interpolated with the same value as would be displayed, including any format specifiers, except that string results will
     only be included without the quotes, and without embedded quotes being escaped. Arrays and objects will be inserted
     formatted in a canonical form, again just as they would be displayed. Using an interpolated string inside an expression
     construct inside an interpolated string is not allowed, sadly.
  <p>Note that string results are always finally displayed / returned using double quotes (and double quotes internally escaped),
     regardless of the quoting used to construct them, which includes interpolated strings -- the result is always just a string
     with the values pieced into it. String values are stored in variables without any surrounding quotes, and the escaped
     characters are interpreted and stored as their actual codepoints. This means that string values inserted into interpolated
     strings will be inserted as they are stored (without quotes, etc.).
  <p>Calc reserves the names <code>pi</code> and <code>e</code> for these two fundamental constants. All the alternative characters
     of <code>&#x1D6D1;</code> are also supported.
<p class="indent"> <code>&#x1D6D1;</code> = <code>3.14159265358979323846264338327950288...</code> <br> <code>e</code> = <code>2.71828182845904523536028747135266249...</code> </p>
  <p>The Unicode fraction characters also represent their respective values, as in:
<p class="indent"> <code>&#x00BC;</code> = <code>1/4</code> or <code>0.25</code> <br> <code>&#x215A;</code> = <code>5/6</code> or <code>0.8333...</code>
  <p>A fraction (rational) value can also be constructed using the <code>f'...'</code> syntax, where the string within the quotes can be one,
    two, or three integers (optional minus signs), separated by spaces or <code>,</code> or <code>;</code> or <code>/</code>, or one of the
    Unicode fraction characters optionally preceded by an integer. Some examples:
  <p class="indent"> <code>f'2&#x00BC;'</code> = <code>2.25</code> or <code>f'1 2/3'</code> = <code>1.66666...</code>
  <p>There is a constant type used to express values as Roman Numerals. The syntax is <code>R'<i>xxxx</i>'</code>, where the
     digits are the typical Roman values of <code>I</code>, <code>V</code>, <code>X</code>, and so on, but also including the Unicode
     values in the range of <code>'\u2160'</code> to <code>'\u2182'</code>. You can use the <code>@r</code> or <code>@R</code> formats
     to display values in this form as well. Note that the range of possible values that can be represented in this way is 1 to 39,999.
  <p>Time and duration values can be entered as:
<p class="indent"> <code>h'<i>hh</i>:<i>mm</i>:<i>ss</i>.<i>nnnnnnnnn</i></code>&nbsp;[<code>a</code>|<code>p</code>|<code>am</code>|<code>pm</code>]<code>'</code> </p>
or
<p class="indent"> <code>t'<i>nn.nn</i>&nbsp;w</code>|<code>d</code>|<code>h</code>|<code>m</code>|<code>s'</code> </p>
     Such values are computed to nanosecond precision and can be used in any other kind of operation, or formatted again as times or durations using the <code>@h</code> or <code>@t</code> formats.
     For example:
<p class="indent"> <code><span style="color:blue;">t'27h' + t'13m' + t'27.9s' @h</span> <span style="color:grey;">-&gt;</span> <span style="color:green;">h'27:13:27.9'</span></code> </p>
or
<p class="indent"> <code><span style="color:blue;">h'12:30 pm' - h'11:45 am' @mt</span> <span style="color:grey;">-&gt;</span> <span style="color:green;">t'45m'</span></code> </p>
or yet
<p class="indent"> <code><span style="color:blue;">h'8:30 am' + t'1h' + t'37m' @h</span> <span style="color:grey;">-&gt;</span> <span style="color:green;">h'10:07'</span></code> </p>
  <p>Date values can be entered as (basically the <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO-8601</a> format with more separators allowed):
<p class="indent"> <code>d'<i>yyyy</i>-<i>mm</i>-<i>dd</i>'</code>&nbsp;|&nbsp;<code>d'<i>yyyymmdd</i>'</code> </p>
or as U.S. format dates:
<p class="indent"> <code>D'<i>mm</i>/<i>dd</i>/<i>yyyy</i>'</code>&nbsp;|&nbsp;<code>D'<i>mmddyyyy</i>'</code> </p>
   Such values are computed as an offset from the "epoch" day (Jan. 1, 1970) (either positive or negative). Date arithmetic is thus allowed, such as:
<p class="indent"> <code><span style="color:blue;">d'2001-09-11' + 1000@e</span> <span style="color:grey;">-&gt;</span> <span style="color:green;">d'2004-06-07'</span></code> </p>
or
<p class="indent"> <code><span style="color:blue;">D'9/2/1945' - d'1941/12/7'</span> <span style="color:grey;">-&gt;</span> <span style="color:green;">1365</span></code> </p>
  <p>Some operators and operations require integer values (such as factorial and the logical bit operations). If the value given is not integral an error will
     be displayed and the calculation aborted. Most of the basic arithmetic operators can operate on rational fractions. The trig,
     log, and power operations do not. Therefore, in rational mode, if an operation returns a decimal value, Calc will attempt
     to convert it to a rational fraction, which may look very strange. Also, in rational mode, fractions will also be maintained
     in canonical form, that is, with the least common denominator.
  <p>Calc has the capability to define and use variables, which are simply named representations of values. Variable names can be
     of any length, but must start with either an underscore (<code>"_"</code>) or a letter, and may contain any combination of
     underscores, letters, and digits.  Note that loop variables (see <code>LOOP</code> statement below) follow the same rules,
     except they must start with a dollar sign (<code>"$"</code>). <em>Note that the predefined constant, function, and statement
     names may NOT be used as variable names.</em> The value of a variable is the value last assigned to it by
     one of the assignment operators.  If no value has been previously assigned the value will be <code>null</code>.
  <p>Normally variable names (and object member names (see below)) are case-sensitive (that is, <code>"f" != "F"</code>), but there is a command-line option and a directive
     to change this behavior. The predefined values and functions are always case-insensitive, regardless of the mode setting. Variables remain defined with the
     same casing as they were found in a script, but the "ignore case" mode simply changes how they are looked up in the variable dictionary. Therefore, changing
     the mode option will not "undefine" any variables from the way they were originally declared / used.
  <p>Values can be grouped into lists of values (an <i>array</i>), or into sets of key/value pairs (an <i>object</i>). Arrays can
     be multi-dimensional. The inside dimensions do not have to be all the same length. The types of values in an array need not
     be homogeneous. And, in fact, the values in an array can be objects as well as simple values. The keys in an object must be
     be either identifiers (same rules as variable names), or strings, but the values can be anything (even other objects, or arrays
     or just simple values).
  <p>To reference values in arrays or objects the following syntax can be used:  <i>variable</i><code>[</code> <i>expr</i> <code>]</code>
     where the expression must evaluate to an integer value (for arrays) or the name of a key (for objects). Members of an object
     can also be referenced by <i>variable</i><code>.</code><i>member</i> (where <i>member</i> is the identifier or string referencing
     a key of one of the key/value pairs in the object).  All this is consistent with JavaScript, or JSON usage (with the slight
     variation that keys can also be identifiers here, while in pure JSON form only strings are allowed as keys).
  <p>Array or object constants can be expressed using this JSON notation, as in:
<p class="indent"> <code style="color:green;">{ a: 1, b:2, c:'abc', d:[ 1,3,4 ] }</code> </p>
or
<p class="indent"> <code style="color:green;">[ 1, 3, 5, { a:false, b:true }, 15, 17 ]</code> </p>
or
<p class="indent"> <code style="color:green;">[ [ 1, 3, 5 ], [ 2, 4, 6 ] ]</code> </p>
or
<p class="indent"> <code style="color:green;">{ first: { "flag": true, "message": 'Testing' }, second: { "flag":true, "message": 'Working' } }</code> </p>
     Note that string object keys (as in <code>"key"</code>) do NOT reference the same element as an identifier key (as in
     <code>key</code>).  Therefore, this is legal:
<p class="indent"> <code style="color:green;">value = { "flag": true, flag: 'Red' }</code> </p>
   and the elements are accessed as <code>value."flag"</code> and <code>value.flag</code>.
</div>
<hr class="sectionsep">
  <h2>Modes and Precision</h2>
<div class="cols">
  Calc can do essentially arbitrary precision arithmetic. It can also do arithmetic on rational fractions (as in <code>1/4 + 1/2 = 3/4</code>).
      The default setting is to do decimal arithmetic, but this can be adjusted using either command line options (see
      <code>-rational</code> and <code>-decimal</code> above), or using directives during execution.  The default precision for
      all calculations is 128-bit arithmetic, or approximately 34 digits of decimal precision. The precision can be adjusted up to
      12,500 (due to somewhat arbitrary restrictions on our calculation of the value of <code>&#x1D6D1;</code>) using any of
      several directives.
  <p>Trigonometric calculations are, by default, done in radians, but this can be changed to use degrees using the <code>:degrees</code> directive.
</div>
<hr class="sectionsep">
  <h2>Formats</h2>
<div class="cols">
  The results of most operations can be displayed using alternative formats for better comprehension. To specify an alternative
     format, append <code>@<i>format</i></code> to the expression. In some cases, the uppercase equivalent can be given, which will
     do the same formatting, except mapping the result to UPPER case as well. The exceptions are <code>@e</code> which formats the
     value as a date in ISO-8601 form (<code><i>yyyy</i>-<i>mm</i>-<i>dd</i></code>), while <code>@E</code> puts the value in U.S.
     format (<code><i>mm</i>/<i>dd</i>/<i>yyyy</i></code>), <code>@f</code> which formats the
     result as a fraction, while <code>@F</code> formats the result as a proper fraction (as in <code>15/8@F = 1 7/8</code>),
     <code>@O</code> or <code>@D</code> which would make no difference in the outputs, and <code>@J</code> which doesn't make sense
     given the output could have strings which shouldn't be case-shifted.
</div>
  <div class="center">
    <table style="margin-left:auto;margin-right:auto;">
      <caption class="tablecap">Formats</caption>
      <thead>
      <tr>
        <th style="width:100">Format</th>
        <th style="width:460">Description</th>
      </tr>
      </thead>
      <tbody>
      <tr><td><code>@h</code></td><td>Display as a time value (hours:minutes:seconds.nanos)</td></tr>
      <tr><td><code>@</code>[<i>nn</i>][<code>w</code>|<code>d</code>|<code>h</code>|<code>m</code>|<code>s</code>]<code>t</code></td><td>Format as a time (duration), optional rounding</td></tr>
      <tr><td><code>@l</code></td><td>Format result string in lower case</td></tr>
      <tr><td><code>@u</code></td><td>Format result string in UPPER case</td></tr>
      <tr><td><code>@</code>[<code>,</code>][<i>nn</i>]<code>d</code></td><td>Primarily for rational mode: format the result as a decimal value,<br>with optional separators, and optionally rounding to <i>nn</i> digits</td></tr>
      <tr><td><code>@e</code></td><td>Format an integer as a date (yyyy-mm-dd) (ISO-8601 format)</td></tr>
      <tr><td><code>@E</code></td><td>Format an integer as a date (mm/dd/yyyy) (U.S. format)</td></tr>
      <tr><td><code>@f</code></td><td>For decimal mode, format the result as a rational fraction</td></tr>
      <tr><td><code>@F</code></td><td>Format as a proper fraction (with possible integer portion)</td></tr>
      <tr><td><code>@</code>[<code>,</code>]<code>j</code></td><td>Format the result as a "pretty printed" JSON result<br>(multiple lines with indents)<br>with optional separators for numeric values</td></tr>
      <tr><td><code>@r</code></td><td>Format the result as a Roman Numeral value</td></tr>
      <tr><td><code>@x</code></td><td>For integers and strings, format in hexadecimal form</td></tr>
      <tr><td><code>@o</code></td><td>For integers and strings, format in octal form</td></tr>
      <tr><td><code>@b</code></td><td>For integers and strings, format in binary form</td></tr>
      <tr><td><code>@k</code></td><td>Use kilobyte, megabyte, etc. notation for the value</td></tr>
      <tr><td><code>@</code>[<code>,</code>][<i>nn</i>]<code>%</code></td><td>Format as a percentage, with optional separators, and<br>optionally rounding to <i>nn</i> digits</td></tr>
    </tbody>
    </table>
  </div>
<hr class="sectionsep">
  <h2>Available Operators and Predefined Functions</h2>
<div class="cols">
  <p>There are a wide variety of arithmetic and logical operators available, as well as a number of common arithmetic functions supported by Calc.
     For the most part, automatic coercions are applied to the operands of functions if necessary (and possible), and the results of operations are
     automatically widened to support the results. The only exception to this are the trig and log functions which (for the most part) can only be
     done to "double" precision (currently &mdash; this may change in subsequent versions).
</div>
  <div class="center">
  <table style="margin-left:auto;margin-right:auto;">
    <caption class="tablecap">Operators, Functions, and Precedence</caption>
    <thead>
    <tr>
      <th style="width:60">Level</th>
      <th style="width:350">Operator</th>
      <th style="width:350">Description</th>
      <th style="120">Associativity</th>
    </tr>
    </thead>
    <tbody>
    <tr><td>28</td>
      <td><code>pi</code>, <code>&#x1D6D1;</code>, <code>e</code>, or <code>&#x2107;</code><br>
          <code>true</code> or <code>false</code><br>
          <code>null</code><br>
          <code>&#x00BC;</code>, <code>&#x00BD;</code>, <code>&#x00BE;</code>, <code>&#x2150;</code>, <code>&#x215E;</code>, etc.<br>
          <code>today</code><br>
          <code>now</code></td>
      <td>the fundamental constants <code>&#x1D6D1;</code> and <code>e</code><br>
          the <code>boolean</code> values<br>
          the <code>null</code> (empty) value<br>
          any of the Unicode fraction values<br>
          date value of the current date<br>
          time value of the current time</td><td>N/A</td></tr>
    <tr><td>27</td><td><code>{ }</code></td><td>define an object</td><td>left to right</td></tr>
    <tr><td>26</td><td><code>[ ]</code><br><i>var</i> <code>[</code> <i>expr</i> <code>]</code> or <i>var</i>&nbsp;&#x2080; .. &#x2089;</td><td>define an array,<br>or access elements of<br>an array, string, or object</td><td>left to right</td></tr>
    <tr><td>25</td><td>.</td><td>access an object member</td><td>left to right</td></tr>
    <tr><td>24</td><td><code>( </code><i>expr</i><code> )</code></td><td>group an expression</td><td>N/A</td></tr>
    <tr><td>23</td><td><i>expr</i>&nbsp;<code>++</code> or <code>&#x2795;&#x2795;</code><br><i>expr</i>&nbsp;<code>--</code> or <code>&#x2212;&#x2212;</code> or <code>&#x2796;&#x2796;</code></td><td>post increment/decrement</td><td>N/A</td></tr>
    <tr><td>22</td><td><code>++</code> or <code>&#x2795;&#x2795;</code>&nbsp;<i>expr</i><br><code>--</code> or <code>&#x2212;&#x2212;</code> or <code>&#x2796;&#x2796;</code>&nbsp;<i>expr</i></td><td>pre increment/decrement</td><td>right to left</td></tr>
    <tr><td>21</td><td><code>+</code> or <code>&#x2795;</code>&nbsp;<i>expr</i><br><code>-</code> or <code>&#x2212;</code> or <code>&#x2796;</code>&nbsp;<i>expr</i></td><td>posate/negate a value</td><td>right to left</td></tr>
    <tr><td>20</td><td><code>!</code> or <code>&#x00AC;</code>&nbsp;<i>expr</i></td><td>boolean NOT<br>(can also use <code>!!</code> to convert any value to a <i>true</i> boolean:<br><code>true</code> if set, non-empty, and non-zero,<br>or <code>false</code> if null, empty, or 0)</td><td>right to left</td></tr>
    <tr><td>19</td><td><code>~</code>&nbsp;<i>expr</i></td><td>bitwise NOT</td><td>right to left</td></tr>
    <tr><td>18</td><td><i>expr</i>&nbsp;<code>!</code></td><td>factorial</td><td>left to right</td></tr>
    <tr><td>17</td><td><i>expr<sub>1</sub></i>&nbsp;&nbsp;<code>**</code>, <code>&times;&times;</code>, <code>&#x2217;&#x2217;</code>, <code>&#x2715;&#x2715;</code>, or <code>&#x2716;&#x2716;</code>&nbsp;&nbsp;<i>expr<sub>2</sub></i><br>or&nbsp;<i>expr</i>&nbsp;&#x2070; .. &#x2079;</td><td><i>expr<sub>1</sub></i> to <i>expr<sub>2</sub></i> power<br>or <i>expr</i> to given power</td><td>right to left</td></tr>
    <tr><td>16</td><td>
        <i>expr</i>&nbsp;&nbsp;<code>*</code>, <code>&times;</code>, <code>&#x2217;</code>, <code>&#x2715;</code>, or <code>&#x2716;</code>&nbsp;&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;&nbsp;<code>/</code>, <code>&divide;</code>, <code>&#x2215;</code>, or <code>&#x2797;</code>&nbsp;&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;&nbsp;<code>\</code>&nbsp;&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> % </code>&nbsp;<i>expr</i></td>
        <td>multiply<br>divide<br>integer divide<br>remainder</td><td>left to right</td></tr>
    <tr><td>15</td><td>
        <i>expr</i>&nbsp;&nbsp;<code>+</code> or <code>&#x2795;</code>&nbsp;&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;&nbsp;<code>-</code>,  <code>&#x2212;</code>, or <code>&#x2796;</code>&nbsp;&nbsp;<i>expr</i></td>
        <td>add<br>subtract</td><td>left to right</td></tr>
    <tr><td>14</td><td>
        <i>expr</i>&nbsp;<code> &gt;&gt;&gt; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &gt;&gt; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &lt;&lt; </code>&nbsp;<i>expr</i></td>
        <td>bit shift operations</td><td>left to right</td></tr>
    <tr><td>13</td><td colspan="2" style="padding:0;margin:0;">
        <table class="innertable">
          <caption></caption>
            <tbody>
            <tr><td style="width:300"><code>ABS</code>&nbsp;<i>expr</i></td><td style="width:400">absolute value</td></tr>
            <tr><td><code>SIN</code>&nbsp;<i>expr</i></td><td>sine</td></tr>
            <tr><td><code>COS</code>&nbsp;<i>expr</i></td><td>cosine</td></tr>
            <tr><td><code>TAN</code>&nbsp;<i>expr</i></td><td>tangent</td></tr>
            <tr><td><code>ASIN</code>&nbsp;<i>expr</i></td><td>sine<sup>-1</sup></td></tr>
            <tr><td><code>ACOS</code>&nbsp;<i>expr</i></td><td>cosine<sup>-1</sup></td></tr>
            <tr><td><code>ATAN</code>&nbsp;<i>expr</i></td><td>tangent<sup>-1</sup></td></tr>
            <tr><td><code>ATAN2</code>&nbsp;<i>e<sub>y</sub></i><code>,</code>&nbsp;<i>e<sub>x</sub></i></td><td>the angle <i>theta</i> from converting<br>rectangular (x,y) to polar (r,<i>theta</i>) coordinates</td></tr>
            <tr><td><code>SINH</code>&nbsp;<i>expr</i></td><td>hyperbolic sine</td></tr>
            <tr><td><code>COSH</code>&nbsp;<i>expr</i></td><td>hyperbolic cosine</td></tr>
            <tr><td><code>TANH</code>&nbsp;<i>expr</i></td><td>hyperbolic tangent</td></tr>
            <tr><td><code>SQRT</code> or <code>&radic;</code>&nbsp;<i>expr</i></td><td>square root</td></tr>
            <tr><td><code>CBRT</code> or <code>&#x221B;</code>&nbsp;<i>expr</i></td><td>cube root</td></tr>
            <tr><td><code>FORT</code> or <code>&#x221C;</code>&nbsp;<i>expr</i></td><td>fourth root</td></tr>
            <tr><td><code>LOG</code>&nbsp;<i>expr</i></td><td>log base 10</td></tr>
            <tr><td><code>LN2</code>&nbsp;<i>expr</i></td><td>log base 2</td></tr>
            <tr><td><code>LN</code>&nbsp;<i>expr</i></td><td>natural log (base e)</td></tr>
            <tr><td><code>EPOW</code>&nbsp;<i>expr</i></td><td>anti-log (e ** <i>expr</i>)</td></tr>
            <tr><td><code>SIGNUM</code>&nbsp;<i>expr</i></td><td>sign (&lt; 0 = -1, 0 = 0, &gt; 0 = +1)</td></tr>
            <tr><td><code>LENGTH</code>&nbsp;<i>expr</i><br>or <i>expr</i> [ <code>..</code> or <code>&#x2026;</code> <i>expr</i> ] [ <code>,</code> <i>expr</i></td><td>length of string, array, object, or range</td></tr>
            <tr><td><code>SCALE</code>&nbsp;<i>expr</i></td><td>scale of number</td></tr>
            <tr><td><code>ROUND</code>&nbsp;<i>expr</i><code>,</code>&nbsp;<i>expr</i></td><td>round value to given places</td></tr>
            <tr><td><code>ISPRIME</code>&nbsp;<i>expr</i></td><td>is the value a prime number</td></tr>
            <tr><td><code>GCD</code>&nbsp;<i>expr</i><code>,</code>&nbsp;<i>expr</i></td><td>greatest common divisor</td></tr>
            <tr><td><code>LCM</code>&nbsp;<i>expr</i><code>,</code>&nbsp;<i>expr</i></td><td>least common multiple</td></tr>
            <tr><td><code>MAX</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>maximum value</td></tr>
            <tr><td><code>MIN</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>minimum value</td></tr>
            <tr><td><code>SUMOF</code> or <code>&#x2211;</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *<br>or <i>expr</i> [ <code>..</code> or <code>&#x2026;</code> <i>expr</i> ] [ <code>,</code> <i>expr</i></td><td>sum of all the values</td></tr>
            <tr><td><code>PRODUCTOF</code> or <code>&#x220F;</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *<br>or <i>expr</i> [ <code>..</code> or <code>&#x2026;</code> <i>expr</i> ] [ <code>,</code> <i>expr</i></td><td>product of all the values</td></tr>
            <tr><td><code>JOIN</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>join strings</td></tr>
            <tr><td><code>SPLIT</code>&nbsp;<i>expr</i> <code>,</code> <i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;)</td><td>split string into parts</td></tr>
            <tr><td><code>INDEX</code>&nbsp;<i>expr</i> <code>,</code> <i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;)</td><td>find value within a string</td></tr>
            <tr><td><code>SUBSTR</code>&nbsp;<i>expr</i> <code>,</code> <i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;)</td><td>extract a substring</td></tr>
            <tr><td><code>FILL</code>&nbsp;<i>var</i>&nbsp;<code>,</code> <i>expr</i>&nbsp;<code>,</code> <i>expr</i> ( <code>,</code><i>expr</i> )</td><td>fill an array or string</td></tr>
            <tr><td><code>TRIM</code> or <code>LTRIM</code> or <code>RTRIM</code> <i>expr</i></td><td>trim all, leading, or trailing whitespace</td></tr>
            <tr><td><code>FIB</code>&nbsp;<i>expr</i></td><td>Fibonacci number</td></tr>
            <tr><td><code>Bn</code>&nbsp;<i>expr</i></td><td>Bernoulli number</td></tr>
            <tr><td><code>FRAC</code>&nbsp;<i>num</i><code>,</code>&nbsp;<i>den</i><br>or <i>int</i><code>,</code><i>num</i><code>,</code><i>den</i><br>or <i>string</i></td><td>construct a rational fraction</td></tr>
            <tr><td><code>ROMAN</code>&nbsp;<i>expr</i></td><td>interpret <i>expr</i> as a Roman Numeral</td></tr>
            <tr><td><code>LOWER</code>&nbsp;<i>expr</i></td><td>convert <i>expr</i> to lower case</td></tr>
            <tr><td><code>UPPER</code>&nbsp;<i>expr</i></td><td>convert <i>expr</i> to UPPER case</td></tr>
            <tr><td><code>EVAL</code>&nbsp;<i>expr</i></td><td>evaluate the string result of <i>expr</i></td></tr>
            <tr><td><code>EXEC</code>&nbsp;<i>expr</i>&nbsp;( <code>,</code>&nbsp;<i>expr</i>&nbsp;) *</td><td>execute the given O/S command<br>(with arguments)<br>and return the output as a string</td></tr>
            <tr><td><code>FACTORS</code>&nbsp;<i>expr</i></td><td>calculate all the factors of the number</td></tr>
            <tr><td><code>PFACTORS</code>&nbsp;<i>expr</i></td><td>calculate the prime factors of the number</td></tr>
            <tr><td><code>CHARS</code>&nbsp;<i>expr</i></td><td>separate a string into a list of its characters</td></tr>
            <tr><td><code>DOW</code>&nbsp;<i>expr</i></td><td>day of the week of a date (integer) value<br>(0=Sunday to 6=Saturday)</td></tr>
          </tbody>
        </table></td>
        <td>left to right</td></tr>
    <tr><td>12</td><td><i>expr</i>&nbsp;<code> &lt;=&gt; </code>&nbsp;<i>expr</i><td>returns <code>-1</code> if <i>expr</i> &lt; 0<br><code>0</code> if <i>expr</i> = 0<br><code>+1</code> if <i>expr</i> &gt; 0</td><td>left to right</td></tr>
    <tr><td>11</td><td>
        <i>expr</i>&nbsp;<code> &lt;= </code>or<code> &#x2264; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &lt; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &gt;= </code>or<code> &#x2265; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &gt; </code>&nbsp;<i>expr</i></td>
        <td>comparison</td><td>left to right</td></tr>
    <tr><td>10</td><td>
        <i>expr</i>&nbsp;<code> === </code>or<code> &#x2A76; </code>or<code> &#x2261; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> !== </code>or<code> &#x2262; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> == </code>or<code> &#x2A75; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> != </code>or<code> &#x2260; </code>&nbsp;<i>expr</i></td>
        <td>strict equality<br>strict inequality<br>equality<br>inequality</td><td>left to right</td></tr>
    <tr><td>9</td><td>
        <i>expr</i>&nbsp;<code> &amp; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> ~&amp; </code>or<code> &#x22BC; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &amp;~ </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> ^ </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> ~^ </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> | </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> ~| </code>or<code> &#x22BD; </code>&nbsp;<i>expr</i></td>
        <td>bitwise AND<br>NOT AND (or NAND)<br>AND NOT<br>exclusive OR<br>NOT exclusive OR<br>bitwise OR<br>NOT OR (or NOR)</td><td>left to right</td></tr>
    <tr><td>8</td><td>
        <i>expr</i>&nbsp;<code> &amp;&amp; </code>or<code> &#x2227; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> || </code>or<code> &#x2228; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> ^^ </code>or<code> &#x22BB; </code>&nbsp;<i>expr</i></td>
        <td>logical AND<br>logical OR<br>logical exclusive OR</td><td>left to right</td></tr>
    <tr><td>7</td><td><i>expr</i>&nbsp;<code> ? </code>&nbsp;<i>expr</i>&nbsp;<code> : </code>&nbsp;<i>expr</i></td><td>select one or the other value</td><td>right to left</td></tr>
    <tr><td>6</td><td><i>var</i>&nbsp;<code> = </code>&nbsp;<i>expr</i></td><td>assign <i>expr</i> value to variable</td><td>right to left</td></tr>
    <tr><td>5</td><td><i>var</i>&nbsp;<code> **=</code>,<code> &times;&times;=</code>,<code> &#x2217;&#x2217;=</code>,<code> &#x2715;&#x2715;=</code>, or<code> &#x2716;&#x2716;= </code>&nbsp;<i>expr</i></td><td><i>var</i> to <i>expr</i> power, assign to <i>var</i></td><td>right to left</td></tr>
    <tr><td>4</td><td>
        <i>var</i>&nbsp;<code> *=</code>,<code> &times;=</code>,<code> &#x2217;=</code>,<code> &#x2715;=</code>, or<code> &#x2716;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> /=</code>,<code> &divide;=</code>,<code> &#x2215;=</code>, or<code> &#x2797;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> \= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> %= </code>&nbsp;<i>expr</i></td>
        <td>perform the operation, reassign to variable</td><td>right to left</td></tr>
    <tr><td>3</td><td>
        <i>var</i>&nbsp;<code> += </code>or<code> &#x2795;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> -= </code>,<code> &#x2212;=</code>, or<code> &#x2796;= </code>&nbsp;<i>expr</i></td>
        <td>result assigned to variable again</td><td>right to left</td></tr>
    <tr><td>2</td><td>
        <i>var</i>&nbsp;<code> &gt;&gt;&gt;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> &gt;&gt;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> &lt;&lt;= </code>&nbsp;<i>expr</i></td>
        <td>perform the shift, reassign to variable</td><td>right to left</td></tr>
    <tr><td>1</td><td>
        <i>var</i>&nbsp;<code> &amp;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> ~&amp;= </code>or<code> &#x22BC;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> &amp;~= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> ^= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> ~^= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> |= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> ~|= </code>or<code> &#x22BD;= </code>&nbsp;<i>expr</i></td>
        <td>perform the bit op, reassign to variable</td><td>right to left</td></tr>
    </tbody>
  </table>
  </div>
<hr class="sectionsep">
  <h2>User-Defined Functions</h2>
<div class="cols">
  In addition to the predefined functions above, Calc allows new functions to be defined (unfortunately they do not support
     function parameters yet) that can be used repeatedly without having to retype the same expression.
  <p>The syntax for a function definition is:
  <p class="indent">
     <code>def</code> | <code>define</code>&nbsp;<i>name</i> <code>= {</code> <i>expressions or statements</i> <code>}</code>
  </p>
  <p>Note that the <code>{</code> and <code>}</code> are optional if there is only one expression/statement in the definition.
  <p>The value of a function is the value of the last expression evaluated inside it (note that the other statements have the same
     semantics). Functions are referenced by simply invoking their name.  For example: <code>def a = { 1 }</code> gives <code>a = 1</code>, and <code>def b = { a }</code> gives <code>b = 1</code>. Redefining the underlying function will also change the value of
     any functions that use it. So, without changing the definition of <code>b</code>, we can redefine <code>def a={2}</code>
     which will give <code>b = 2</code>.
     <p>A function can be used anywhere a variable can be used (which is pretty much everywhere).
     Functions can also reference loop variables, which are normally not allowed outside loops, and will work properly as long
     as they are only invoked inside a <code>LOOP</code> for which the loop variable is declared. In other words, functions are
     parsed along with all other expressions, but they are stored as parse trees, and are not evaluated until they are invoked.
  <p>One side-effect of the way functions are implemented in combination with the <code>eval</code> function is that objects can be created
     as follows:
  <p class="indent"><code>def stack={ size: 0, array:[] }</code>
  <p>and then
  <p class="indent"><code>t = eval stack</code>
  <p>gives
  <p class="indent"><code>t = { size : 0, array : [ ] }</code>
  <p>as it should. So, you can setup the data structure with <code>def</code>, and make instances of that structure with just
     <code><i>var</i> = eval <i>struct</i></code>.
</div>
<hr class="sectionsep">
  <h2>Statements</h2>
<div class="cols">
  In addition to the functions and operators listed above, Calc has four different statements which can be used to do
     iterative or repeated calculations, and to select between actions based on the value of an expression. These are the <code>LOOP</code>, <code>WHILE</code> and <code>IF</code> statements.
  <p>The syntax for each is as follows:
  <p class="indent">
     <code>LOOP</code>&nbsp;[ <i>loopvar</i> <code>IN</code> ] <i>expr</i> [ <code>..</code> or <code>&#x2026;</code> <i>expr</i> ] [ <code>,</code> <i>expr</i> ] <code>{</code> <i>statements or expressions</i> <code>}</code>
  </p>
  <p class="indent">
     <code>WHILE</code>&nbsp;<i>expr</i> <code>{</code> <i>statements or expressions</i> <code>}</code>
  </p>
  <p class="indent">
     <code>IF</code>&nbsp;<i>expr</i>&nbsp;<code>{</code> <i>statements or expressions</i> <code>}</code> [ <code>ELSE {</code> <i>statements or expressions</i> <code>}</code> ]
  </p>
  <p class="indent">
     <code>CASE</code>&nbsp;<i>expr</i>&nbsp;<code>OF</code>&nbsp;( ( <i>expr</i> ( <code>,</code> <i>expr</i> ) * | <code>DEFAULT</code> ) <code>: {</code> <i>statements or expressions</i> <code>}</code> ( <code>,</code> ) ? ) *
  </p>
  <p>In all these statements the <code>{</code> and <code>}</code> are not needed if there is only one statement or expression in the block.
  <p>The <code>LOOP</code> statement will repeatedly execute the block of statements based on several conditions:
     <ul><li>if only one expression is listed, the loop will be repeated that number of times, starting from one</li>
         <li>if the <i>expr</i> <code>..</code> <i>expr</i> form is used the loop will be repeated starting from the
             first value, until the second value is reached, incrementing by one each time</li>
         <li>if the <code>,</code> <i>expr</i> is given, the loop is repeated starting from either one, or the first expression value, incrementing by this <i>step</i> expression until the value reaches the maximum.
     </ul>
     In any case, the optional loop variable will be set to the value of the indexing expression for each time through the loop.
     If no loop variable is given, the default variable <code>$_</code> will be used (except this is an error for nested loops without explicit variables).
     The loop variable can be referenced inside the statement block, but nowhere else.  A loop variable has the same naming
     rules as a regular variable, but must start with <code>$</code>. Note that inside an interpolated string (inside the loop
     block) the value of a loop variable can be accessed via <code>$$i</code> or alternatively (and more verbosely) as
     <code>${$i}</code>.
     Note that the loop can go in reverse if the step value is negative, and that the start and end values can also be negative
     in this case.
  <p>The <code>WHILE</code> statement will execute the block of statements as long as the <i>expr</i> evaluates to
     <code>true</code> (or the result can be converted to a boolean <code>true</code> value).
     This means the block might not be executed at all if the expression evaluates initially to <code>false</code>.
     If the code inside the statement block requires knowledge of which iteration is currently being executed a regular variable
     should be used (that is, there is no concept of a <i>loopvar</i> as in the <code>LOOP</code> statement).
  <p>The <code>IF</code> statement evaluates the expression and executes the code block only if the expression evaluates to a
     boolean <code>true</code> value. If the optional <code>ELSE</code> block is given and the expression evaluates to
     <code>false</code> that block will be executed instead.
  <p>The <code>CASE</code> statement evaluates the expression and executes whichever code block has a matching value, or the <code>default</code> block (if given) if nothing else matches. Note: the expression match is made as if by <code>'=='</code> (that is, not a strict comparison), but the individual block values can be any kind of expression or object (including lists, objects, strings, functions, etc.).
  <p>The value of any of these statements is the value of the last expression evaluated, inside whatever block is selected, and from the last iteration of that block inside a loop.  But the grammar (for now) does not allow that final value to be used except inside a function.  For instance, consider the following code:
  <p class="indent">
      <code>define strings = { case upper(value) of "ONE": { 1 }, "TWO": { 2 }, "THREE" : { 3.14 }, default: { "many" } }</code><br>
      <code>value='one'; strings</code>
  </p>
    The final value of this function invocation will be the value of whichever block inside the <code>CASE</code> statement is executed, which in this example will be the value <code>1</code>.
  <p class="indent">
      <code style="color:blue;">value = 'one'</code><code style="color:gray;"> -&gt; </code><code style="color:green;">"one"</code><br>
      <code style="color:blue;">strings</code><code style="color:gray;"> -&gt; </code><code style="color:green;">1</code>
  </p>
  Also consider this code:
  <p class="indent">
      <code>define a={loop $i in 10 {$i}}</code><br>
      <code>a</code>
  </p>
  Which will evaluate as follows:
  <p class="indent">
      <code>Defining function '</code><code style="color:green;">a</code><code>' = </code><code style="color:blue;">{loop $i in 10 {$i}}</code><br>
      <code style="color:blue;">a</code><code style="color:gray;"> -&gt; </code><code style="color:green;">10</code>
  </p>
  There are many more code examples in the <code>test/files</code> directory of the source distribution.
</div>
<hr class="sectionsep">
  <h2>Directives</h2>
<div class="cols">
  Various directives can be given within a script or on a separate input line in REPL mode that will affect the operation of the calculator. Some of them allow you to change the options given on the command line, while others are only available from within the script. All the mode-setting directives are also available in the Settings dialog (the <span class="orangebutton">&#x2261;</span> button or <code>F2</code> key) in GUI mode.
</div>
  <div class="center">
  <table style="margin-left:auto;margin-right:auto;">
    <caption class="tablecap">Available Directives</caption>
    <thead>
    <tr>
      <th style="width:200">Directive</th>
      <th style="width:400">Description</th>
      <th style="width:150">Aliases</th>
    </tr>
    </thead>
    <tbody>
    <tr><td><code>:decimal</code> <i>number_option</i></td><td>Set the precision of all decimal calculations,<br>where <i>number_option</i> can be <code>(</code><i>number</i><code>)</code>, or <i>number</i>, or <i>variable</i><br>to specify the number of decimal digits of precision</td><td><code>:dec</code>, <code>:precision</code>, <code>:prec</code></td></tr>
    <tr><td><code>:default</code></td><td>Set the default decimal precision (~34 digits) <i>(default)</i></td><td><code>:def</code></td></tr>
    <tr><td><code>:double</code></td><td>Select the "double" decimal precision (~16 digits)</td><td><code>:dbl</code></td></tr>
    <tr><td><code>:float</code></td><td>Select "float" decimal precision (~7 digits)</td><td><code>:flt</code></td></tr>
    <tr><td><code>:unlimited</code></td><td>Set to unlimited decimal precision (which for some calculations will result in errors)</td><td><code>:unl</code></td></tr>
    <tr><td><code>:degrees</code></td><td>Do all trigonometric calculations assuming the inputs are in degrees</td><td><code>:deg</code></td></tr>
    <tr><td><code>:radians</code></td><td>Do all calculations assuming inputs are radians <i>(default)</i></td><td><code>:rad</code></td></tr>
    <tr><td><code>:binary</code></td><td>Display units in terms of multiples of 1024</td><td><code>:bin</code></td></tr>
    <tr><td><code>:si</code></td><td>Display units in terms of multiples of 1000</td><td><code>:ten</code></td></tr>
    <tr><td><code>:mixed</code></td><td>Unit multiplier based on powers of 2 (same as <code>:binary</code>), but with SI suffix <i>(default)</i></td><td><code>:mix</code></tr>
    <tr><td><code>:clear</code> [ <i>id</i> ( <code>,</code> <i>id</i> ) * ]</td><td>Clear all or only the specified variables (set values to <code>null</code>)</td><td><code>:clr</code></td></tr>
    <tr><td><code>:variables</code> [ <i>id</i> ( <code>,</code> <i>id</i> ) * ]</td><td>Display the values of all or only the specified variables</td><td><code>:variable</code>, <code>:vars</code>, <code>:var</code></td></tr>
    <tr><td><code>:echo</code> <i>expr</i></td><td>Echo the value of the expression to the output</td><td></td></tr>
    <tr><td><code>:include</code> <i>string</i></td><td>Include the file(s) named by <i>string</i></td><td><code>:inc</code></td></tr>
    <tr><td><code>:rational</code> <i>mode_option</i></td><td>Set the rational calculation mode where <i>mode_option</i> is one of:<br><code>on</code>, <code>off</code>, <code>true</code>, <code>false</code>, <code>yes</code>, <code>no</code>, <code>pop</code>, <code>previous</code>, <code>prev</code>, or <i>variable</i><br><i>(default is <code>off</code>, or the value set on the command line)</i></td><td><code>:ration</code>, <code>:fraction</code>, <code>:frac</code>, <code>:fr</code></td></tr>
    <tr><td><code>:separators</code> <i>mode_option</i></td><td>Set whether to display thousands separators always<br><i>(default is <code>off</code> or value on command line)</i></td><td><code>:separator</code>, <code>:seps</code>, <code>:sep</code></td></tr>
    <tr><td><code>:ignorecase</code> <i>mode_option</i></td><td>Set whether to ignore case of variable and member names<br><i>(default is <code>off</code> or value on command line)</i></td><td><code>:caseinsensitive</code>, <code>:insensitive</code>,<br><code>:ignore</code>, <code>:case</code>, <code>:ign</code>, <code>:ins</code></td></tr>
    <tr><td><code>:timing</code> <i>mode_option</i></td><td>Set the timing mode (same <i>mode_option</i> choices as for <code>:rational</code>)<br><i>(default is <code>off</code> or the value set on the command line)</i></td><td><code>:time</code></td></tr>
    <tr><td><code>:debug</code> <i>mode_option</i></td><td>Set the debug mode (same <i>mode_option</i> choices as for <code>:rational</code>)<br><i>(default is <code>off</code> or the value set on the command line)</i></td><td><code>:deb</code>, <code>:dbg</code></td></tr>
    <tr><td><code>:resultsonly</code> <i>mode_option</i></td><td>Set the results-only mode<br><i>(default is <code>off</code> or value on command line)</i></td><td><code>:resultonly</code>, <code>:results</code>, <code>:result</code>, <code>:res</code></td></tr>
    <tr><td><code>:quiet</code> <i>mode_option</i></td><td>Set quiet mode<br><i>(default is <code>off</code> or the value on command line)</i></td><td></td></tr>
  </tbody>
  </table>
  </div>
<hr class="sectionsep">
  <h2>Notes on Directives</h2>
<div class="cols">
  The <i>string</i> argument for the <code>:include</code> directive can be a comma-separated list of file names, with or without
     paths. If a file cannot be read and there is a previous input directory available (set either by a previous file with a path
     given, or by the <code>-inputDir</code> command-line option) then that directory is searched for the file. If not found there,
     then the string is presumed not to be a file name, and the value of the string itself is processed as an expression. Note: this is
     the same process as used for strings given on the command line.
  <p>For directives which use a <i>mode_option</i>, the available values are as follows:
  <ul><li><code>on</code>, <code>true</code>, or <code>yes</code> = set the mode <code><i>on</i></code>, and save the previous value in the stack</li>
      <li><code>off</code>, <code>false</code>, or <code>no</code> = set the mode <code><i>off</i></code>, and save the previous value</li>
      <li><code>pop</code>, <code>previous</code>, or <code>prev</code> = pop the previous value off the stack and set the mode to
          that previous value</li>
  </ul>
  <p>The initial value is as specified in the table above (always <code><i>off</i></code>, actually), or the value given by
     the corresponding command-line option. If there are no more entries in the stack when the <code>pop</code> option is given then
     the value will be set to <code><i>off</i></code>.
  <p>If a string constant of any kind is given as the argument to <code>:echo</code> the surrounding quotes will be removed, and any
     embedded quotes will be unescaped before the message is displayed. Obviously, the same is true for the contents of variables
     (since the values are stored this way).
  <p>The only effect of debug mode is to display the parse tree (in LISP format) before the expression(s) is/are evaluated.
  <p>Timing mode displays the total parsing and execution time (to nanosecond precision on some systems) after the results are displayed.
</div>
<hr class="sectionsep">
  <h2>GUI Operations</h2>
<div class="cols">
  <p>The GUI window can be opened initially using the "<code>cg</code>" command (or on Windows only, the <code>``</code> command),
     or by entering the <code>gui</code> command in REPL mode. Note that although you can switch from REPL mode to GUI mode, the reverse is not possible. The GUI window looks like this with the focus initially in the "Expressions" field:
</div>
  <div class="center">
  <br><img src="calc_initial.png" alt="Initial GUI screen" width="50%">
  </div>
<div class="cols">
  An expression can be entered on each line, and all will be executed in order when the <span class="redbutton">!</span> button (or the <code>F9</code> key) is pressed, and the results displayed in the "Results" field. The <code>Ctrl+Enter</code> (or <code>&#x2318;Enter</code> on Mac) key will also perform the calculation(s). This behavior can be changed in the Settings dialog to just use the <code>Enter</code> key on any platform.
  <p>This help page will also be displayed by the <span class="bluebutton">?</span> button (or the <code>F1</code> key).
  <p>Note: colors are not currently used in the GUI display, so using the command-line options <code>-darkbg</code> or <code>-lightbg</code> will have no effect.
  <p>Most of the settings available using Directives can be set in the GUI using the Settings dialog (the <span class="orangebutton">&#x2261;</span> button or <code>F2</code> key).
</div>
  <div class="center">
  <br><img src="calc_settings.png" alt="GUI Settings screen" width="40%">
      <img src="calc_window_settings.png" alt="GUI Window Settings screen" width="40%">
  </div>
<hr class="sectionsep">
  <h2>TODO Items for This Document</h2>
<div class="cols">
  <ul>
    <li>More examples of KB input and output, with the modes explained</li>
    <li>Exceptions to decimal precision (i.e., for trig, log), and also in doing factorial? or others that don't respect the precision, also limits on pi/e digits</li>
    <li>Discussion on NaN, and Infinity</li>
    <li>Explain "join" operation with 1, 2, 3+ values</li>
    <li>Explain "fill" operation (array/string variable, value, length or start, length) - how it fills in</li>
    <li>Explain the best use of "SUMOF" and "PRODUCTOF" is with arrays and maps (numeric values only), although it works for any expressions</li>
    <li>Use of array as stack: push using a[length a] = blah, pop using ?? maybe slice? but how to get the last value easily?
    <li>Expand on GUI operation, including examples</li>
    <li>Document GUI Settings dialog</li>
    <li>List of example programs, include examples in this document</li>
    <li>Interactions with Tester (use "mkcanon" and "-nocolors")</li>
    <li>Explain "silent" operation WRT "eval", "loop", interpolated strings, functions</li>
    <li>Notes on colors and the changes with dark and light backgrounds</li>
  </ul>
</div>
<hr class="sectionsep">

  <footer><br><br><div class="title-box">&copy;&nbsp;Copyright 2020-2021 Roger L. Whitcomb.&nbsp;&nbsp;Licensed under an <a href="https://github.com/rlwhitcomb/utilities/blob/master/LICENSE">MIT</a> license.<br>Last modified: ${__DATE__} at ${__TIME__}</div><br><br></footer>
</body>
</html>

