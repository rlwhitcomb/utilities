<!DOCTYPE html>
<html>
  <head>
    <title>Expression Calculator Help</title>
    <style>
table {
  font-family: helvetica, arial, sans-serif;
  border-collapse: collapse;
}

tr, th, td {
  border: 1px solid #dddddd;
  text-align: center;
  padding: 4px;
}

tr:nth-child(even) {
  background-color: #dddddd;
}

table code {
   font-size: 140%;
}

.redbutton {
   font-family: Verdana, Helvetica, Arial, Sans-Serif;
   font-size: 24pt;
   font-weight: bold;
   color: red;
}

.biglines {
   padding: 4px;
}
    </style>
  </head>

  <body>
    <center>
      <h2>Expression Calculator Help</h2>
      <h4>Version ${Calc.version}, build ${build.number}</h4>
    </center>
    <h3>Introduction</h3>
    <p>An expression calculator that combines (nearly) unlimited precision decimal arithmetic with a rich assortment
       of operators and functions to give the ability to calculate nearly any arithmetic expression.
    <p>As input, the expression calculator can operate on an expression given entirely on the command line (may need to be
       quoted for certain operator characters), in a REPL loop where a prompt is displayed, and the input lines are evaluated
       one-at-a-time and the results displayed, from a file for predefined calculations, or inside a rudimentary GUI frame.
    <h3>Command Line Options</h3>
    <p>Certain options can be given on the command line that affect the operation of the calculator.

    <center>
    <h3>Operators and Precedence</h3>
    <table>
      <tr>
        <th width=60>Level</th>
        <th width=180>Operator</th>
        <th width=280>Description</th>
        <th width=120>Associativity</th>
      </tr>
      <tr><td>27</td><td><code>{ }</code></td><td>define an object</td><td>left to right</td></tr>
      <tr><td>26</td><td><code>[ ]</code></td><td>define an array,<br>or access elements of<br>an array, string, or object</td><td>left to right</td></tr>
      <tr><td>25</td><td>.</td><td>access an object member</td><td>left to right</td></tr>
      <tr><td>24</td><td><code>( </code><i>expr</i><code> )</code></td><td>group an expression</td><td>- none -</td></tr>
      <tr><td>23</td><td><i>expr</i>&nbsp;<code>++</code><br><i>expr</i>&nbsp;<code>--</code></td><td>post increment/decrement</td><td>- none -</td></tr>
      <tr><td>22</td><td><code>++</code>&nbsp;<i>expr</i><br><code>--</code>&nbsp;<i>expr</i></td><td>pre increment/decrement</td><td>right to left</td></tr>
      <tr><td>21</td><td><code>+</code>&nbsp;<i>expr</i><br><code>-</code>&nbsp;<i>expr</i></td><td>posate/negate a value</td><td>right to left</td></tr>
      <tr><td>20</td><td><code>!</code>&nbsp;<i>expr</i></td><td>boolean NOT</td><td>right to left</td></tr>
      <tr><td>19</td><td><code>~</code>&nbsp;<i>expr</i></td><td>bitwise NOT</td><td>right to left</td></tr>
      <tr><td>18</td><td><i>expr</i>&nbsp;<code>!</code></td><td>factorial</td><td>left to right</td></tr>
      <tr><td>17</td><td colspan="2">
          <table class="biglines">
              <tr><td width="180"><code>ABS</code>&nbsp;<i>expr</i></td><td width="280">absolute value</td></tr>
              <tr><td><code>SIN</code>&nbsp;<i>expr</i></td><td>sine</td></tr>
              <tr><td><code>COS</code>&nbsp;<i>expr</i></td><td>cosine</td></tr>
              <tr><td><code>TAN</code>&nbsp;<i>expr</i></td><td>tangent</td></tr>
              <tr><td><code>ASIN</code>&nbsp;<i>expr</i></td><td>sine<sup>-1</sup></td></tr>
              <tr><td><code>ACOS</code>&nbsp;<i>expr</i></td><td>cosine<sup>-1</sup></td></tr>
              <tr><td><code>ATAN</code>&nbsp;<i>expr</i></td><td>tangent<sup>-1</sup></td></tr>
              <tr><td><code>ATAN2</code>&nbsp;<i>expr<sub>y</sub></i>, <i>expr<sub>x</sub></i></td><td>the angle <i>theta</i> from converting<br>rectangular (x,y) to polar (r,<i>theta</i>) coordinates</td></tr>
              <tr><td><code>SINH</code>&nbsp;<i>expr</i></td><td>hyperbolic sine</td></tr>
              <tr><td><code>COSH</code>&nbsp;<i>expr</i></td><td>hyperbolic cosine</td></tr>
              <tr><td><code>TANH</code>&nbsp;<i>expr</i></td><td>hyperbolic tangent</td></tr>
              <tr><td><code>SQRT</code>&nbsp;<i>expr</i></td><td>square root</td></tr>
              <tr><td><code>CBRT</code>&nbsp;<i>expr</i></td><td>cube root</td></tr>
              <tr><td><code>LOG</code>&nbsp;<i>expr</i></td><td>log base 10</td></tr>
              <tr><td><code>LN2</code>&nbsp;<i>expr</i></td><td>log base 2</td></tr>
              <tr><td><code>LN</code>&nbsp;<i>expr</i></td><td>natural log (base e)</td></tr>
              <tr><td><code>SIGNUM</code>&nbsp;<i>expr</i></td><td>sign (&lt; 0 = -1, 0 = 0, &gt; 0 = +1)</td></tr>
              <tr><td><code>LENGTH</code>&nbsp;<i>expr</i></td><td>length of string, array, or object</td></tr>
              <tr><td><code>SCALE</code>&nbsp;<i>expr</i></td><td>scale of number</td></tr>
              <tr><td><code>ROUND</code>&nbsp;<i>expr, expr</i></td><td>round value to given places</td></tr>
              <tr><td><code>ISPRIME</code>&nbsp;<i>expr</i></td><td>is the value a prime number</td></tr>
              <tr><td><code>GCD</code>&nbsp;<i>expr ,expr</i></td><td>greatest common divisor</td></tr>
              <tr><td><code>LCM</code>&nbsp;<i>expr, expr</i></td><td>least common multiple</td></tr>
              <tr><td><code>MAX</code>&nbsp;<i>expr (, expr) *</i></td><td>maximum value</td></tr>
              <tr><td><code>MIN</code>&nbsp;<i>expr (, expr) *</i></td><td>minimum value</td></tr>
              <tr><td><code>JOIN</code>&nbsp;<i>expr (, expr) *</i></td><td>join strings</td></tr>
              <tr><td><code>FIB</code>&nbsp;<i>expr</i></td><td>Fibonacci number</td></tr>
              <tr><td><code>Bn</code>&nbsp;<i>expr</i></td><td>Bernoulli number</td></tr>
              <tr><td><code>FRAC</code>&nbsp;<i>expr, expr</i></td><td>construct a rational fraction</td></tr>
          </table></td>
          <td>left to right</td></tr>
      <tr><td>16</td><td><i>expr<sub>1</sub></i>&nbsp;<code> ** </code>&nbsp;<i>expr<sub>2</sub></i></td><td>expr<sub>1</sub> to expr<sub>2</sub> power</td><td>right to left</td></tr>
      <tr><td>15</td><td>
          <i>expr</i>&nbsp;<code> * </code>&nbsp;<i>expr</i><br>
          <i>expr</i>&nbsp;<code> / </code>&nbsp;<i>expr</i><br>
          <i>expr</i>&nbsp;<code> % </code>&nbsp;<i>expr</i></td>
          <td>multiply/divide/remainder</td><td>left to right</td></tr>
      <tr><td>14</td><td>
          <i>expr</i>&nbsp;<code> + </code>&nbsp;<i>expr</i><br>
          <i>expr</i>&nbsp;<code> - </code>&nbsp;<i>expr</i></td>
          <td>add/subtract</td><td>left to right</td></tr>
      <tr><td>13</td><td>
          <i>expr</i>&nbsp;<code> &gt;&gt;&gt; </code>&nbsp;<i>expr</i><br>
          <i>expr</i>&nbsp;<code> &gt;&gt; </code>&nbsp;<i>expr</i><br>
          <i>expr</i>&nbsp;<code> &lt;&lt; </code>&nbsp;<i>expr</i></td>
          <td>bit shift operations</td><td>left to right</td></tr>
      <tr><td>12</td><td><i>expr</i>&nbsp;<code> &lt;=&gt; </code>&nbsp;<i>expr</i><td>returns <code>-1</code> if expr &lt; 0<br><code>0</code> if expr = 0<br><code>+1</code> if expr &gt; 0</td><td>left to right</td></tr>
      <tr><td>11</td><td>
          <i>expr</i>&nbsp;<code> &lt;= </code>&nbsp;<i>expr</i><br>
          <i>expr</i>&nbsp;<code> &lt; </code>&nbsp;<i>expr</i><br>
          <i>expr</i>&nbsp;<code> &gt;= </code>&nbsp;<i>expr</i><br>
          <i>expr</i>&nbsp;<code> &gt; </code>&nbsp;<i>expr</i></td>
          <td>comparison</td><td>left to right</td></tr>
      <tr><td>10</td><td>
          <i>expr</i>&nbsp;<code> === </code>&nbsp;<i>expr</i><br>
          <i>expr</i>&nbsp;<code> !== </code>or<code> &#x2262; </code>&nbsp;<i>expr</i><br>
          <i>expr</i>&nbsp;<code> == </code>&nbsp;<i>expr</i><br>
          <i>expr</i>&nbsp;<code> != </code>or<code> &#x2260; </code>&nbsp;<i>expr</i></td>
          <td>strict equality/inequality<br>equality/inequality</td><td>left to right</td></tr>
      <tr><td>9</td><td>
          <i>expr</i>&nbsp;<code> &amp; </code>&nbsp;<i>expr</i><br>
          <i>expr</i>&nbsp;<code> ~&amp; </code>&nbsp;<i>expr</i><br>
          <i>expr</i>&nbsp;<code> &amp;~ </code>&nbsp;<i>expr</i><br>
          <i>expr</i>&nbsp;<code> ^ </code>&nbsp;<i>expr</i><br>
          <i>expr</i>&nbsp;<code> ~^ </code>&nbsp;<i>expr</i><br>
          <i>expr</i>&nbsp;<code> | </code>&nbsp;<i>expr</i><br>
          <i>expr</i>&nbsp;<code> ~| </code>&nbsp;<i>expr</i></td>
          <td>bitwise AND<br>NOT AND<br>AND NOT<br>exclusive OR<br>NOT exclusive OR<br>bitwise OR<br>NOT OR</td><td>left to right</td></tr>
      <tr><td>8</td><td>
          <i>expr</i>&nbsp;<code> &amp;&amp; </code>&nbsp;<i>expr</i><br>
          <i>expr</i>&nbsp;<code> || </code>&nbsp;<i>expr</i><br>
          <i>expr</i>&nbsp;<code> ^^ </code>&nbsp;<i>expr</i></td>
          <td>logical AND,<br>OR,<br>or exclusive OR</td><td>left to right</td></tr>
      <tr><td>7</td><td><i>expr</i>&nbsp;<code> ? </code>&nbsp;<i>expr</i>&nbsp;<code> : </code>&nbsp;<i>expr</i></td><td>select one or the other value</td><td>right to left</td></tr>
      <tr><td>6</td><td><i>var</i>&nbsp;<code> = </code>&nbsp;<i>expr</i></td><td>assign expr value to variable</td><td>right to left</td></tr>
      <tr><td>5</td><td><i>var</i>&nbsp;<code> **= </code>&nbsp;<i>expr</i></td><td>var to expr power, assign to var</td><td>right to left</td></tr>
      <tr><td>4</td><td>
          <i>var</i>&nbsp;<code> *= </code>&nbsp;<i>expr</i><br>
          <i>var</i>&nbsp;<code> /= </code>&nbsp;<i>expr</i><br>
          <i>var</i>&nbsp;<code> %= </code>&nbsp;<i>expr</i></td>
          <td>perform the operation, reassign to variable</td><td>right to left</td></tr>
      <tr><td>3</td><td>
          <i>var</i>&nbsp;<code> += </code>&nbsp;<i>expr</i><br>
          <i>var</i>&nbsp;<code> -= </code>&nbsp;<i>expr</i></td>
          <td>result assigned to variable again</td><td>right to left</td></tr>
      <tr><td>2</td><td>
          <i>var</i>&nbsp;<code> &gt;&gt;&gt;= </code>&nbsp;<i>expr</i><br>
          <i>var</i>&nbsp;<code> &gt;&gt;= </code>&nbsp;<i>expr</i><br>
          <i>var</i>&nbsp;<code> &lt;&lt;= </code>&nbsp;<i>expr</i></td>
          <td>perform the shift, reassign to variable</td><td>right to left</td></tr>
      <tr><td>1</td><td>
          <i>var</i>&nbsp;<code> &amp;= </code>&nbsp;<i>expr</i><br>
          <i>var</i>&nbsp;<code> ~&amp;= </code>&nbsp;<i>expr</i><br>
          <i>var</i>&nbsp;<code> &amp;~= </code>&nbsp;<i>expr</i><br>
          <i>var</i>&nbsp;<code> ^= </code>&nbsp;<i>expr</i><br>
          <i>var</i>&nbsp;<code> ~^= </code>&nbsp;<i>expr</i><br>
          <i>var</i>&nbsp;<code> |= </code>&nbsp;<i>expr</i><br>
          <i>var</i>&nbsp;<code> ~|= </code>&nbsp;<i>expr</i></td>
          <td>perform the bit op, reassign to variable</td><td>right to left</td></tr>
    </table>
    </center>
    <h3>GUI operations</h3>
    <p>The GUI window can be opened using the "<code>cg</code>" command (or on Windows only, the <code>``</code> command), or by entering the <code>gui</code> command in REPL mode.  The following window will be presented with the focus initially in the top "Expression" field.
    <br><img src="calc_initial.png" alt="Initial GUI screen" width="50%"/>
    <p>An expression can be entered on each line, and all will be executed in order when the <span class="redbutton">!</span> button (or the <code>F9</code> key) is pressed, and the results displayed in the "Result" field.
    <footer><br><br><center>&copy;&nbsp;Copyright 2021 Roger L. Whitcomb.&nbsp;&nbsp;Licensed under an <a href="https://github.com/rlwhitcomb/utilities/blob/master/LICENSE">MIT</a> license.<br>Last modified: ${__DATE__} at ${__TIME__}</center><br><br></footer>
  </body>
</html>

