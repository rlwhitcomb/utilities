<!DOCTYPE html>
<html>
  <head>
    <title>Calculator Help</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Fredericka+the+Great&amp;display=swap" rel="stylesheet">
    <style>
table {
  font-family: helvetica, arial, sans-serif;
  border-collapse: collapse;
  table-layout: fixed;
}

tr, th, td {
  border: 1px solid #dddddd;
  text-align: center;
  padding: 4px 10px;
}

th {
  background: cornflowerblue;
}

tr:nth-child(odd) {
  background-color: #f8f0f0;
}

table code {
   font-size: 120%;
   font-weight: bold;
}

code {
   font-size: 110%;
   font-weight: bold;
}

h2 {
   margin-left: 30px;
   margin-right: 30px;
}

.top-link {
   margin-right: 30px;
   text-align: right;
   float: right;
}

.toc_container  {
    margin: 25px;
    overflow: hidden;
    padding: 10px 10px;
    background-color: lightgreen;
    border: 1px solid cornflowerblue;
    -webkit-border-radius: 20px;
    border-radius: 20px;
    font-size: 130%;
}

.toc_title {
    font-size: 200%;
    font-weight: bold;
    text-align: center;
}

.toc_container ol li {
    list-style: decimal outside none !important;
}

.title-box {
    margin: 25px;
    overflow: hidden;
    text-align: center;
    padding: 10px 10px;
    background-color: lightgreen;
    border: 1px solid cornflowerblue;
    -webkit-border-radius: 20px;
    border-radius: 20px;
}

.cols {
    columns: 3;
    column-rule: 2px double cornflowerblue;
    column-gap: 40px;
    margin-left: 40px;
    margin-right: 40px;
}

.sectionsep {
    border: 0 none;
    background-color: cornflowerblue;
    height: 2px;
    margin-left: 40px;
    margin-right: 40px;
    margin-top: 30px;
}

.center {
    text-align: center;
}

.underline {
   text-decoration: underline;
}

.redbutton {
   font-family: Verdana, Helvetica, Arial, Sans-Serif;
   font-size: 24pt;
   font-weight: bold;
   color: red;
}

.bluebutton {
   font-family: Verdana, Helvetica, Arial, Sans-Serif;
   font-size: 24pt;
   font-weight: bold;
   color: blueviolet;
}

.orangebutton {
   font-family: Verdana, Helvetica, Arial, Sans-Serif;
   font-size: 24pt;
   font-weight: bold;
   color: darkorange;
}

.tablecap {
   font-size: 1.5em;
   margin-top: 0.83em;
   margin-bottom: 0.83em;
   margin-left: 0;
   margin-right: 0;
   font-weight: bold;
}

.indent {
   margin-left: 20px;
}
    </style>
</head>

<body>
  <div id="topofpage" class="title-box">
    <h1 style="font-family:'Fredericka the Great';font-size:400%;">Calculator</h1>
    <h2>Version ${Calc.version}, build ${build.number}</h2>
  </div>
<div class="toc_container">
  <p class="toc_title">Contents</p>
  <div class="cols">
  <ol type="1">
    <li><a href="#Introduction">Introduction</a>
    <li><a href="#Command_Line">Command Line</a>
    <li><a href="#Command_Line_Options">Command Line Options</a>
    <li><a href="#Notes_on_Command_Line_Options">Notes on Command Line Options</a>
    <li><a href="#Read_Eval_Print_loop_Commands">Read, Eval, Print Loop Commands</a>
    <li><a href="#Values_Constants_and_Variables">Values, Constants, and Variables</a>
    <li><a href="#Modes_and_Precision">Modes and Precision</a>
    <li><a href="#Formats">Formats</a>
    <li><a href="#Available_Operators_and_Predefined_Functions">Available Operators and Predefined Functions</a>
    <li><a href="#Notes_on_Functions">Notes on Functions</a>
    <li><a href="#User_Defined_Functions">User-Defined Functions</a>
    <li><a href="#Statements">Statements</a>
    <li><a href="#Directives">Directives</a>
    <li><a href="#Notes_on_Directives">Notes on Directives</a>
    <li><a href="#Standard_Libraries_of_Functions">Standard Libraries of Functions</a>
    <li><a href="#GUI_Operations">GUI Operations</a>
    <li><a href="#TODO_Items_for_This_Document">TODO Items for This Document</a>
  </ol>
  </div>
</div>
<hr id="Introduction" class="sectionsep">
  <h2>Introduction</h2>
<div class="cols">
  A calculator of arithmetic "expressions" (such as <code style="color:blue;">1 + 1</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">2</code>) that combines (nearly) unlimited precision decimal arithmetic with a rich assortment
       of operators and functions to give the ability to calculate nearly any arithmetic expression.
  <p>As input, the calculator operates on either an expression given on the command line (may need to be
       quoted for certain operator characters), or in <a href="https://en.wikipedia.org/wiki/Read-eval-print_loop">REPL</a> mode
       (<span class="underline">R</span>ead, <span class="underline">E</span>val, <span class="underline">P</span>rint
        <span class="underline">L</span>oop, where a prompt is displayed, the input line is evaluated
       and the result displayed, then the prompt is repeated for the next calculation), from a file for predefined calculations, or from within a simple GUI frame.
  <p><em><strong>Why would I want this calculator when there are so many already available (handheld, apps on your phone, default apps on your computer)?</strong></em>
      <ul>
        <li>All arithmetic is done to (essentially) unlimited precision.</li>
        <li>More operators and functions are available than in most (all?) other calculators.</li>
        <li>Custom function definitions for calculations beyond the list of predefined functions.</li>
        <li>Variables can be used for storage of values for later use.</li>
        <li>Object and array structures for storage of multiple values.</li>
        <li>Therefore, JSON objects are a native part of the language.</li>
        <li>String functions for doing text manipulation, including <a href="https://en.wikipedia.org/wiki/String_interpolation">string interpolation</a>.</li>
        <li>The ability to do calculations straight from the command line, from a text file, in a convenient REPL mode, or in a GUI window.</li>
        <li>The ability to define libraries of functions available using the "<code>-library</code>" command line option or the "<code>:include</code>" directive.</li>
        <li>Calculations can be edited (using backspace, etc.) to reduce the chance of keyboard errors.</li>
        <li>Looping and conditional statements to do pretty much any kind of calculation.</li>
        <li>Therefore, the language is <a href="https://en.wikipedia.org/wiki/Turing_completeness">&ldquo;Turing Complete&rdquo;</a>.</li>
        <li>Current, active development and maintenance, meaning features and fixes are constantly being added.</li>
        <li>This is <a href="https://opensource.com/resources/what-open-source">Open-Source Software</a> so the code can be examined, and modified (if desired) for your own use.</li>
      </ul>
</div>
<a class="top-link" href="#topofpage">Top</a>
<hr id="Command_Line" class="sectionsep">
  <h2>Command Line</h2>
<div class="cols">
  The command line is assumed to have either the name of one or more files to process, or an expression to evaluate. There may also be options specified
  (see the next section). If there is a single value given and there exists a file by that name (possibly in another directory given by the
  <code>-inputdir</code> option), that file is read, the contents parsed, and all the expressions evaluated. That single argument can also be a
  list of file names separated by commas or semicolons, which are each treated as just described.
  <p>Otherwise, if there is more than one argument on the command line, or the single argument does not name one or more existing files,
  the command line is taken as a single expression to be parsed and evaluated.
  <p>If Calc is invoked by piping or redirecting input from somewhere, that input stream is immediately read and evaluated, and Calc will exit.
  <p>If there is a single <code>@</code> name given on the command line, or there are no non-option arguments given, Calc will enter REPL mode.
  <p>Also, if the input argument looks like <code>@<i>file_name</i></code> the <code>@</code> is discarded and the <i>file_name</i> is read.
  <p>Files are found by first trying to locate the file just as it is named. If not found, the latest input directory is used as a prefix
     (either the directory of the last file found, or the value of <code>-inputdir</code> if set). This same process is used anytime a file is read
     (such as with <code>:include</code>, or from the command line).
  <p>If a file name is given without any extension (such as <code>e_trig</code>) and the file cannot be found via the process just described, then a series
     of default file name extensions are appended to the bare name to try to find it. These extensions are: <code>".calc"</code>, <code>".expr"</code>,
     <code>".ca"</code>, and <code>".ex"</code> (in that order). Once all this searching fails to find the file, then the supposed file name(s) are
     treated as if they were a set of expressions to evaluate.
  <p>Variables can also be defined on the command line using the syntax: <code>-variable <i>name</i>=<i>value</i></code>.
</div>
<a class="top-link" href="#topofpage">Top</a>
<hr id="Command_Line_Options" class="sectionsep">
  <h2>Command Line Options</h2>
<div class="cols">
  Certain options can be given on the command line that affect the operation of the calculator. These options can also be set via the
  <code>CALC_OPTIONS</code> environment variable. Options specified directly on the command line will override the defaults set by
  <code>CALC_OPTIONS</code>, and options specified later on the command line override ones given earlier.
  <p>If there is a <code>"--"</code> (empty) option given, all the following values on the command line are assigned to the global variables
  <code>$0</code>, <code>$1</code>, etc. (in order) which can then be referenced from anywhere in the calculations, just as any other variables.
  There is also an array named <code>$*</code> that contains all these values (in order), and a count named <code>$#</code>, which are both
  always defined, even if there are no arguments given (in which case the array will be empty and the count set to zero).
  Any enclosing quotes on non-numeric values will be stripped off before being assigned to these values.
  If there are any of these arguments specified by <code>CALC_OPTIONS</code> they will be added in before any arguments specified on the
  actual command line.
  <p>This list of arguments can be terminated by another <code>"--"</code> option in order to specify other options or expressions.
  <p>Options are case-insensitive, and may be prefixed with either <code>-</code>, <code>--</code>, or on Windows <code>/</code>, as in: <code>--lightbg</code>, <code>-rational</code>,
     or <code>/quiet</code> <i>(Windows only)</i>. Almost all of the options have several aliases (mostly fewer characters) as shown in the table below. Some of these settings, in
     addition, can be set using Directives from within a script, or from the Settings dialog in the GUI window. See the REPL Commands and Directives sections below for additional discussion, including other aliases that can be used.
</div>
  <div class="center">
  <table style="margin-left:auto;margin-right:auto;width:70%;">
    <caption class="tablecap">Command Line Options</caption>
    <thead>
    <tr>
      <th style="width:20%">Option</th>
      <th style="width:40%">Description</th>
      <th style="width:30%">Aliases</th>
      <th style="width:20%">Equivalent Directive</th>
    </tr>
    </thead>
    <tbody>
    <tr><td><code>-nointro</code></td><td>Do not print the introductory message in REPL mode</td><td><code>-noi</code></td><td></td></tr>
    <tr><td><code>-intro</code></td><td>Print the introductory message in REPL mode <i>(default)</i></td><td><code>-int</code>, <code>-i</code></td><td></td></tr>
    <tr><td><code>-gui</code></td><td>Start immediately in GUI mode</td><td><code>-g</code></td><td></td></tr>
    <tr><td><code>-console</code></td><td>Start instead in console mode <i>(default)</i></td><td><code>-cons</code>, <code>-con</code>, <code>-c</code></td><td></td></tr>
    <tr><td><code>-debug</code></td><td>Display a debug printout of the syntax tree for every input</td><td><code>-deb</code>, <code>-d</code></td><td><code>:debug on</code></td></tr>
    <tr><td><code>-nodebug</code></td><td>Don't display the syntax tree for debugging <i>(default)</i></td><td><code>-nodeb</code>, <code>-no</code></td><td><code>:debug off</code></td></tr>
    <tr><td><code>-colors</code></td><td>Use coloring (on the console) for results and messages <i>(default)</i></td><td><code>-color</code>, <code>-col</code></td><td></td></tr>
    <tr><td><code>-nocolors</code></td><td>Do not use coloring in the console</td><td><code>-nocolor</code>, <code>-nocol</code>, <code>-noc</code></td><td></td></tr>
    <tr><td><code>-darkbackgrounds</code></td><td>Use colors suitable for a dark console background<br><i>(default for Windows)</i></td><td><code>-darkbackground</code>, <code>-darkback</code>,<br><code>-darkbg</code>, <code>-dark</code>, <code>-dk</code></td><td></td></tr>
    <tr><td><code>-lightbackgrounds</code></td><td>Use colors suitable for a light (white) console background<br><i>(default for non-Windows platforms)</i></td><td><code>-lightbackground</code>,<br><code>-lightback</code>, <code>-lightbg</code>,<br><code>-light</code>, <code>-lt</code></td><td></td></tr>
    <tr><td><code>-timing</code></td><td>Display timing after each input</td><td><code>-time</code>, <code>-t</code></td><td><code>:timing on</code></td></tr>
    <tr><td><code>-notiming</code></td><td>Do not display timings <i>(default)</i></td><td><code>-notime</code>, <code>-not</code></td><td><code>:timing off</code></td></tr>
    <tr><td><code>-resultsonly</code></td><td>Do not display the input expression on output,<br>but only the results</td><td><code>-resultonly</code>, <code>-results</code>,<br><code>-result</code>, <code>-res</code>, <code>-r</code></td><td><code>:resultsonly on</code></td></tr>
    <tr><td><code>-expressions</code></td><td>Display both expressions and results</td><td><code>-expression</code>, <code>-express</code>,<br><code>-exprs</code>, <code>-expr</code>, <code>-exp</code>, or <code>-ex</code></td><td><code>:resultsonly off</code></td></tr>
    <tr><td><code>-quiet</code></td><td>Do not display anything<br>(suitable for behind-the-scenes calculations)</td><td><code>-q</code></td><td><code>:quiet on</code>/<code>off</code></td></tr>
    <tr><td><code>-silence</code></td><td>Do not display directives</td><td><code>-silencedirectives</code>,<br><code>-silentdirectives</code>,<br><code>-silencedir</code>, <code>-silentdir</code>,<br><code>-silent</code></td><td><code>:silence on</code></td></tr>
    <tr><td><code>-display</code></td><td>Display results of directives</td><td><code>-displaydirectives</code>,<br><code>-displaydir</code></td><td><code>:silence off</code></td></tr>
    <tr><td><code>-rational</code></td><td>Do all possible calculations in fraction mode,<br>that is as a ratio of natural numbers<br>(as in <code>1/3</code> instead of <code>0.3333333333333333</code>)</td><td><code>-ration</code>, <code>-rat</code></td><td><code>:rational on</code></td></tr>
    <tr><td><code>-decimal</code></td><td>Do all calculations as decimal values <i>(default)</i></td><td><code>-dec</code></td><td><code>:rational off</code></td></tr>
    <tr><td><code>-separators</code></td><td>Display all numeric values with thousands separators</td><td><code>-separator</code>, <code>-seps</code>, <code>-sep</code>, <code>-s</code></td><td><code>:separators on</code></td></tr>
    <tr><td><code>-noseparators</code></td><td>Display all numeric values without thousands separators <i>(default)</i></td><td><code>-noseparator</code>,<br><code>-noseps</code>, <code>-nosep</code>, <code>-ns</code></td><td><code>:separators off</code></td></tr>
    <tr><td><code>-ignorecase</code></td><td>Ignore case of variable and member names</td><td><code>-caseinsensitive</code>,<br><code>-insensitive</code>, <code>-ignore</code>,<br><code>-case</code>, <code>-ign</code>, <code>-ins</code></td><td><code>:ignorecase on</code></td></tr>
    <tr><td><code>-casesense</code></td><td>Respect case of variable and member names <i>(default)</i></td><td><code>-casesensitive</code>, <code>-sensitive</code>,<br><code>-sense</code>, <code>-sens</code>, <code>-sen</code></td><td><code>:ignorecase off</code></td></tr>
    <tr><td><code>-quotestrings</code></td><td>Quote displayed strings in results (default)</td><td><code>-quotestring</code>, <code>-quotes</code>,<br><code>-quote</code>, <code>-quo</code></td><td><code>:quotestrings on</code></td></tr>
    <tr><td><code>-noquotestrings</code></td><td>Do not quote displayed strings in results</td><td><code>-noquotestring</code>, <code>-noquotes</code>,<br><code>-noquote</code>, <code>-noq</code></td><td><code>:quotestrings off</code></td></tr>
    <tr><td><code>-locale</code> <i>locale_name</i></td><td>Specify the locale to use for messages</td><td><code>-loc</code>, <code>-l</code></td><td></td></tr>
    <tr><td><code>-inputdir</code> <i>directory</i></td><td>Specify a default directory location to find files to be processed</td><td><code>-input</code>, <code>-dir</code></td><td></td></tr>
    <tr><td><code>-library</code> <i>library_name(s)</i></td><td>Specify one or more libraries to load to begin with</td><td><code>-libraries</code>, <code>-libs</code>, <code>-lib</code></td><td><code>:include</code>, <code>:load</code>, or <code>:open</code><br>(also see the <code>:save</code> directive)</td></tr>
    <tr><td><code>-ignorelibraries</code></td><td>Ignore previous libraries<br>(from <code>CALC_OPTIONS</code> for instance)</td><td><code>-nolibraries</code>, <code>-nolibrary</code>,<br><code>-nolibs</code>, <code>-nolib</code></td><td></td></tr>
    <tr><td><code>-cmdenter</code></td><td>Use <code>Ctrl+Enter</code> (or <code>&#x2318;Enter</code> on Mac)<br>to calculate in the GUI input field <i>(default)</i></td><td><code>-cmd</code></td><td></td></tr>
    <tr><td><code>-enter</code></td><td>Use just <code>Enter</code> to calculate in GUI input field</td><td><code>-e</code></td><td></td></tr>
    <tr><td><code>-utf8</code></td><td>Decode all input files using the UTF-8 charset</td><td><code>-utf</code>, <code>-u</code></td><td></td></tr>
    <tr><td><code>-win1252</code></td><td>Use Windows-1252 as the input charset</td><td><code>-win</code>, <code>-w</code></td><td></td></tr>
    <tr><td><code>-charset</code> <i>charset_name</i></td><td>Use the given charset to decode input files</td><td><code>-char</code>, <code>-cs</code></td><td></td></tr>
    <tr><td><code>-default</code></td><td>Use the platform default charset <i>(default)</i></td><td><code>-def</code></td><td></td></tr>
    <tr><td><code>-variable</code><br><i>name</i><code>=</code><i>value</i><br>or <i>name</i><code>:</code><i>value</i></td><td>Set the value of a variable</td><td><code>-define</code>, <code>-var</code></td><td><i>name</i>&nbsp;<code>=</code>&nbsp;<i>value</i></td></tr>
    <tr><td><code>--</code> <i>parameter_values</i><br>[ <code>--</code> ]</td><td>Provide values for the <code>$0</code>, <code>$1</code>, etc. parameters<br>
            (every value between the <code>--</code> markers<br>is taken as a parameter value)</td><td></td><td></td></tr>
    <tr><td><code>-help</code></td><td>Display this help page</td><td><code>-h</code>, <code>-?</code></td><td><code>:help</code> (REPL mode only)</td></tr>
    <tr><td><code>-version</code></td><td>Display the version information for the program on the console</td><td><code>-vers</code>, <code>-ver</code>, <code>-v</code></td><td><code>:version</code> (REPL mode only)</td></tr>
  </tbody>
  </table>
  </div>
<a class="top-link" href="#topofpage">Top</a>
<hr id="Notes_on_Command_Line_Options" class="sectionsep">
  <h2>Notes on Command Line Options</h2>
  <div class="cols">
  <ul>
  <li>All the options are collected to begin with before processing any input files, or the input directory and library specifications. This ensures
      that any options affecting the output format, or any processing, are fully respected in the code from the very start.
  <li>The libraries are searched for beginning in the current directory, but then searching the <code>-inputdir</code> location if not found
      (same process as for regular input files).
  <li>The list of library names can be separated by commas (<code>,</code>), semicolons (<code>;</code>), or on non-Windows platforms by colons
      (<code>:</code>).
  <li>Input files (and this applies to command line, or via directives) are decoded using the charset name specified on the command line
      (via <code>-utf8</code>, or the other options) if given, or the platform default charset if none is specified. However, if there is a decoding
      error encountered, the UTF-8 charset is tried, which presumably will work better &mldr;
  <li>If there are errors in (say) the <i>locale_name</i>, <i>input directory</i>, or <i>library names</i>, these errors will (for the most part)
      be silently ignored.
  <li>Some errors (such as syntax errors within the library code) will be output as errors prior to the REPL prompt, however.
  <li>This help page (of course) is an HTML document, and so depends on a browser being installed to display it. Note that this help is also included
     as part of the Javadoc for the <code style="font-size:100%;">info.rlwhitcomb.calc</code> package.
  </ul>
  </div>
<a class="top-link" href="#topofpage">Top</a>
<hr id="Read_Eval_Print_loop_Commands" class="sectionsep">
  <h2><span class="underline">R</span>ead, <span class="underline">E</span>val, <span class="underline">P</span>rint
      <span class="underline">L</span>oop Commands</h2>
  <div class="cols">
  <p>In REPL mode, in addition to expressions and directives (as described below), there are a few commands available to do other
     things (all of which are alternatives to command-line options). Note that these commands are only available in REPL mode, and not
     from a script or library file, nor in the GUI input window (although there are buttons in the GUI window for all but
     <code>gui</code> [obviously]).
  <p>Interestingly, although the Calculator can switch from console mode to GUI mode, the reverse is not possible. Also, the console application will
     not actually exit after switching modes until the GUI window is closed. This also applies to using the <code>-gui</code> option on the command line.
  <p>Also note that using the command line options (such as <code>c -version</code>) will do the operation and immediately exit, while using the
     equivalent REPL command will do the operation and return to the REPL prompt to accept further work.
  </div>
  <div class="center">
  <table style="margin-left:auto;margin-right:auto;">
    <caption class="tablecap">REPL Commands</caption>
    <thead>
    <tr>
      <th style="width:100">Command</th>
      <th style="width:300">Description</th>
      <th style="width:200">Aliases</th>
      <th style="width:200">Command-Line Equivalent</th>
    </tr>
    </thead>
    <tbody>
    <tr><td><code>:quit</code></td><td>Exit the program normally.</td><td><code>:exit</code>,<br><code>:q</code>, <code>:e</code>, <code>:x</code></td><td></td></tr>
    <tr><td><code>:help</code></td><td>Display the HTML help page in the browser.</td><td><code>?</code>, <code>:?</code>, <code>:h</code></td><td><code>-help</code></td></tr>
    <tr><td><code>:version</code></td><td>Display program version information.</td><td><code>:vers</code>,<br><code>:ver</code>, <code>:v</code></td><td><code>-version</code></td></tr>
    <tr><td><code>:gui</code></td><td>Switch to GUI mode</td><td><code>:g</code></td><td><code>-gui</code></td></tr>
  </tbody>
  </table>
  </div>
<a class="top-link" href="#topofpage">Top</a>
<hr id="Values_Constants_and_Variables" class="sectionsep">
  <h2>Values, Constants, and Variables</h2>
<div class="cols">
  The basic building blocks of the expressions implemented here are the basic value types: numbers (either integer or real
     numbers with a fractional part), strings, rational fractions, boolean values, and the <code>null</code> value.
     Numbers can be of arbitrary precision, up to a maximum of 2**32-1 (4,294,967,295) digits (although see the discussion under
     "Modes and Precision" below for further details). Strings can also be of any length up to the same number of characters (subject to
     system memory constraints of course).
  <p>Simple numeric constants follow the normal rules, and can be expressed as simple integers (as in <code>4129</code>),
     decimal numbers (as in <code>23.47</code>), or floating point constants in scientific notation (as in <code>1.2e-20</code>). Note that a number
     of the special Unicode number-like symbols are also interpreted as single numbers (see the "Operators, Functions, and Precedence" table below), such as:
     <code>&#x2473;</code> = <code>20</code>, <code>&#x247D;</code> = <code>10</code>, or <code>&#xFF19;</code> = <code>9</code>.
  <p>The boolean (or "logical") constants are <code>true</code> and <code>false</code>.
  <p>The special null constant, which signifies no value, or a value that hasn't been assigned or defined yet, is simply <code>null</code>.
     Any regular variables, or list or object elements that are not (yet) defined will have the <code>null</code> value. Most operations will result
     in an error if one or more of the operands are null. There is a special <code>isnull</code> function that can be used to test for this to avoid
     errors if desired, as can simply using the equality / inequality operators with the null constant. Null values inserted into interpolated strings
     (see below) will simply insert nothing.
  <p>Values can be assigned names via the <code>const</code> declaration, and then the name used to refer to the value. Such values
     are fixed to their value at the time of the <code>const</code> declaration being evaluated. The syntax is:
  <p class="indent"><code>const</code>&nbsp;<i>id</i><code> = </code><i>expr</i>
  <p>Such constants are typically (per convention) given UPPER case names, but this is not required in Calc.
  <p>Numeric values can also be specified using "kilobyte" notation in one of two forms: multipliers of 1000, or multipliers of 1024 (2**10).
     These multipliers are simply appended to the number to automatically multiply by the given amount. The allowed suffixes are:
     <code>Kb</code>, <code>Mb</code>, <code>Tb</code>, <code>Pb</code>, and <code>Eb</code> which all multiply by their respective
     powers of 1000, while <code>Kib</code>, <code>Mib</code>, etc. multiply by the successive multiples of 1024. Note that these
     multiplier suffixes are case-insensitive.
  <p>For example:  <code>2Kb = 2000</code>, or <code>4Kib = 4096</code>. Any integer results can be formatted as these type of
     values using the <code>@k</code> or <code>@K</code> formats (the latter giving all upper case results), and depending on the
     <code>:SI</code>, <code>:BINARY</code>, or <code>:MIXED</code> mode directives in effect. These modes function as illustrated here:<br>
<code><span style="color:grey;">&gt;</span> :mixed<br>
<span style="color:green;">Units in mixed form.</span><br>
<span style="color:grey;">&gt;</span> 2000@k<br>
<span style="color:blue;">2000 @k</span><span style="color:grey;"> &#x21E8; </span><span style="color:green;">1.95 Kbytes</span><br>
<span style="color:grey;">&gt;</span> :si<br>
<span style="color:green;">Units in SI (base ten) form.</span><br>
<span style="color:grey;">&gt;</span> 2000@k<br>
<span style="color:blue;">2000 @k</span><span style="color:grey;"> &#x21E8; </span><span style="color:green;">2.00 Kbytes</span><br>
<span style="color:grey;">&gt;</span> :bin<br>
<span style="color:green;">Units in binary.</span><br>
<span style="color:grey;">&gt;</span> 2000@k<br>
<span style="color:blue;">2000 @k</span><span style="color:grey;"> &#x21E8; </span><span style="color:green;">1.95 Kibytes</span>
</code>
  <p>String constants are of two types: <i>simple</i> strings, constructed using either single- or double-quotes (or "smart"
     quotes: see below), or <i>interpolated</i> strings, which allow the value of expressions (or simple variables) to be
     interpolated into the final string value. These are
     formed using the back-tick character: <code>`</code> ... <code>`</code>. Interpolation of values is done using either
     <code>$<i>variable</i></code> or <code>${<i>expression</i>}</code>. To embed a back-tick character in the string, use
     <code>\`</code>. Similarly, to embed a backslash, use <code>\\</code>. To embed a dollar sign in the string, use <code>$$</code>
     (but see the note about loop variables below).
   <p>For any kind of string, the normal C/Java escapes such as <code>\t</code> or <code>\n</code> are also available.
     To embed any Unicode codepoint, use <code>\u<i>NNNN</i></code> where <code><i>N</i></code> is a hexadecimal digit, for values up
     to 0xFFFF, or <code>\u{<i>NNNNNN</i>}</code> for codepoints beyond the Unicode BMP (Basic Multilingual Plane) (that is, above
     65536 or 0xFFFF). Arbitrary byte values can be embedded in any strings using either octal or binary escapes, such as <code>\o345</code>
     or <code>\B00110010</code>, as in:
   <p class="indent">
&gt;<code style="color:blue;">'\B01100001\B01100010\B01100011'</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"abc"</code><br>
&gt;<code style="color:blue;">'\o144\o145\o146'</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"def"</code><br>
&gt;<code style="color:blue;">'\u0048\u0065\u006C\u006C\u006F'</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"Hello"</code>
   <p>Several types of "smart" quotes can also be used to delimit strings, such as <code>&#x00AB;This is a test&#x00BB;</code>,
     <code>&ldquo;Another test&rdquo;</code>, or <code>&lsaquo;Testing&rsaquo;</code>. The ending quote can be included in the string by escaping it.
     When interpolating values into an interpolated string, the string representation of the value is used. If the value to be interpolated is
     <code>null</code>, nothing will be added to the string.
  <p>For example, given this code:
<p class="indent"> <code>name="Jack"; `Hi, $name!`</code> </p>
 the result will be:
<p class="indent"> <code>"Hi, Jack!"</code> </p>
    For this code, however, assuming that the variable <code>junk</code> has not been given a value, we have:
<p class="indent"> <code>`Calling $junk...`</code> </p>
which gives:
<p class="indent"> <code>"Calling ..."</code> </p>
     since the value of <code>junk</code> will be <code>null</code>. Values are
     interpolated with the same value as would be displayed, including any format specifiers, except that string results will
     only be included without the quotes, and without embedded quotes being escaped. Arrays and objects will be inserted
     formatted in a canonical form, again just as they would be displayed. Using an interpolated string inside an expression
     construct inside an interpolated string is not allowed, sadly.
  <p>Note that string results are always finally displayed / returned using double quotes (and double quotes internally escaped),
     regardless of the quoting used to construct them, which includes interpolated strings -- the result is always just a string
     with the values pieced into it. String values are stored in variables without any surrounding quotes, and the escaped
     characters are interpreted and stored as their actual codepoints. This means that string values inserted into interpolated
     strings will be inserted as they are stored (without quotes, etc.).
  <p>Calc reserves the names <code>pi</code>, <code>e</code>, and <code>i</code> for these three fundamental constants. All the various Unicode characters
     for <code>&#x1D6D1;</code> are supported, as well as Unicode alternatives for <code>e</code> and <code>i</code> (see the "Operators, Functions, and Precedence"
     table below).
<p class="indent"> <code>&#x1D6D1;</code> = <code>3.14159265358979323846264338327950288...</code> <br> <code>e</code> = <code>2.71828182845904523536028747135266249...</code> <br> <code>i = ( 0, 1 )</code> </p>
  <p>The Unicode fraction characters also represent their respective values, as in:
<p class="indent"> <code>&#x00BC;</code> = <code>1/4</code> or <code>0.25</code> <br> <code>&#x215A;</code> = <code>5/6</code> or <code>0.8333...</code>
  <p>A fraction (rational) value can also be constructed using the <code>f'...'</code> syntax, where the string within the quotes can be one,
    two, or three integers (optional minus signs), separated by spaces or <code>,</code> or <code>;</code> or <code>/</code>, or one of the
    Unicode fraction characters optionally preceded by an integer. Some examples:
  <p class="indent"> <code>f'2&#x00BC;'</code> = <code>2.25</code> or <code>f'1 2/3'</code> = <code>1.66666...</code>
  <p>Complex numbers are constructed as such: <code>(</code>&nbsp;<i>real</i>&nbsp;<code>,</code>&nbsp;<i>imaginary</i>&nbsp;<code>)</code>. There is also the <code>complex</code> function that accepts one or two arguments: either the two value parts or a string convertible to these two parts, or an object with <code>r</code> and <code>i</code> keys, or <code>radius</code> and <code>theta</code> keys, or an array with two values.
  <p>The string syntax for <code>complex</code> is either <code>"( <i>expr</i> )"</code>, <code>"( <i>n</i>, <i>n</i> )"</code>, or <code>"( <i>n</i> &pm; <i>n</i> i )"</code>, or <code>"{ r: <i>radius</i>, &#x03B8;: <i>theta</i> }</code>.
  <p>There is also a constant type used to express values as Roman Numerals. The syntax is <code>R'<i>xxxx</i>'</code>, where the
     digits are the typical Roman values of <code>I</code> (one), <code>V</code> (five), <code>X</code> (ten), and so on (case-insensitive), but also including the Unicode
     values in the range of <code>'\u2160'</code> (<code>&#x2160;</code> or one) to <code>'\u2182'</code> (<code>&#x2182;</code> or ten thousand).
     You can use the <code>@r</code> or <code>@R</code> formats to display positive integer values in this form as well.
     Note that the range of possible values for these formats are the integers from 1 to 39,999.
  <p>Time and duration values (to nanosecond precision) can be entered as:
<p class="indent"> <code>h'<i>hh</i>:<i>mm</i>:<i>ss</i>.<i>nnnnnnnnn</i></code>&nbsp;[<code>a</code>|<code>p</code>|<code>am</code>|<code>pm</code>]<code>'</code> ("hour" or time-of-day value)</p>
or
<p class="indent"> <code>t'<i>nn.nn</i>&nbsp;w</code>|<code>d</code>|<code>h</code>|<code>m</code>|<code>s'</code> ("amount of time" or duration value)</p>
     These values are computed and stored as decimal seconds, with midnight (<code>12:00:00.0 am</code>) as zero for time-of-day, and they can be used
     in any other kind of operation, or formatted again as an <i>hour:minute:second</i> time or a duration (in weeks, down to seconds) using the <code>@h</code> or <code>@t</code> formats. See the Formats section below for more details.
     For example:
<p class="indent"> <code><span style="color:blue;">t'27h' + t'13m' + t'27.9s' @h</span><span style="color:grey;"> &#x21E8; </span><span style="color:green;">h'27:13:27.9'</span></code> </p>
or
<p class="indent"> <code><span style="color:blue;">h'12:30 pm' - h'11:45 am' @mt</span><span style="color:grey;"> &#x21E8; </span><span style="color:green;">t'45m'</span></code> </p>
or yet
<p class="indent"> <code><span style="color:blue;">h'8:30 am' + t'1h' + t'37m' @h</span><span style="color:grey;"> &#x21E8; </span><span style="color:green;">h'10:07'</span></code> </p>
  <p>Date values can be entered as (basically the <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO-8601</a> format with more separators allowed):
<p class="indent"> <code>d'<i>yyyy</i>-<i>mm</i>-<i>dd</i>'</code>&nbsp;|&nbsp;<code>d'<i>yyyymmdd</i>'</code> </p>
or as U.S. format dates:
<p class="indent"> <code>D'<i>mm</i>/<i>dd</i>/<i>yyyy</i>'</code>&nbsp;|&nbsp;<code>D'<i>mmddyyyy</i>'</code> </p>
   Such values are computed as a positive or negative integer number of days from the "epoch" day (Jan. 1, 1970) (which is day zero, so that
   <code>D'12/31/1969'</code> is <code>-1</code> and <code>d'1970-01-02'</code> is <code>1</code>). Date arithmetic is supported, such as:
<p class="indent"> <code><span style="color:blue;">d'2001-09-11' + 1000@e</span><span style="color:grey;"> &#x21E8; </span><span style="color:green;">d'2004-06-07'</span></code> </p>
or
<p class="indent"> <code><span style="color:blue;">D'9/2/1945' - d'1941/12/7'</span><span style="color:grey;"> &#x21E8; </span><span style="color:green;">1365</span></code> </p>
  <p>Dates (either U.S. or ISO format) can be entered with two-digit years, which are interpreted as 21<sup>st</sup> century for values less than the
     current year plus 30, or 20<sup>th</sup> century otherwise. So, for instance, <code>D'9/1/50'</code> refers to Sept. 1, 2050, while <code>D'9/1/51'</code>
     is Sept. 1, 1951 (as of 2021).
  <p>Some operators and operations require integer values (such as factorial and the logical bit operations). If the value given is not integral an error will
     be displayed and the calculation aborted. Most of the basic arithmetic operators can operate on rational fractions. The trig,
     log, and power operations do not. Therefore, in rational mode, if an operation returns a decimal value, Calc will attempt
     to convert it to a rational fraction, which may look very strange. Also, in rational mode, fractions will also be maintained
     in canonical form, that is, with the least common denominator.
  <p>Calc has the capability to define and use variables, which are simply named representations of values. Variable names can be
     of any length, but must start with either an underscore (<code>"_"</code>) or a letter, and may contain any combination of
     underscores, letters, and digits. Currently, "letters" only means <code>"a"</code> to <code>"z"</code> or <code>"A"</code> to <code>"Z"</code>,
     and digits only means <code>"0"</code> to <code>"9"</code> (in other words, only US-ASCII letters or digits).
     Note that loop variables (see <code>LOOP</code> statement below) follow the same rules.
     <em>Note that the predefined constant, function, and statement
     names may NOT be used as variable names.</em> The value of a variable is the value last assigned to it by
     one of the assignment operators.  If no value has been previously assigned the value will be <code>null</code>.
  <p>Normally variable names (and object member names (see below)) are case-sensitive (that is, <code>"f" != "F"</code>), but there is a command-line option and a directive
     to change this behavior. The predefined values are all defined as lower case (with the addition of <code>PHI</code> which is the reciprocal of <code>phi</code>.
     The predefined functions generally have three different case spellings in case-sensitive mode, and, of course,
     can be cased however you like in case-insensitive mode. Variables remain defined with the
     same casing as they were found in a script, but the "ignore case" mode simply changes how they are looked up in the variable dictionary. Therefore, changing
     the mode option will not "undefine" any variables from the way they were originally declared / used.
  <p>Values can be grouped into lists of values (an <i>array</i>), or into sets of key/value pairs (an <i>object</i>). Arrays can
     be multi-dimensional. The inside dimensions do not have to be all the same length. The types of values in an array need not
     be homogeneous. And, in fact, the values in an array can be objects as well as simple values. The keys in an object must be
     either identifiers (same rules as variable names), regular strings, or interpolated strings, but the values can be anything
     (even other objects, arrays, or just simple values).
  <p>To reference values in arrays or objects the following syntax can be used:  <i>variable</i><code>[</code> <i>expr</i> <code>]</code>
     where the expression must evaluate to an integer value (for arrays) or the name of a key (for objects). Members of an object
     can also be referenced by <i>variable</i><code>.</code><i>member</i> (where <i>member</i> is the identifier or string referencing
     a key of one of the key/value pairs in the object).  All this is consistent with JavaScript, or JSON usage (with the slight
     enhancement that identifiers without quotes or interpolated strings can be used as keys here, while in pure JSON form only simple quoted
     strings are allowed as keys).
  <p>As another convenience for dynamically referencing member names, an interpolated string (in the form <code>`</code>...<code>`</code>) can be used to reference
     the member, and the current value of any expressions or variables referenced in the string will be used to construct the member name. Note that
     when regular strings are used as member names, the exact quotes will be used as part of the name (so, for instance <code>'h'</code> is a different
     member than <code>"h"</code>, or than <code>h</code>). When using interpolated strings to reference these <i>"string"</i> name members, the quotes
     must be explicit. Here is an (extreme) example: <code>a."f".'h'</code> can be referenced using <code>m1='"f"';m2="'h'";a.`$m1`.`$m2`</code>.
  <p>Array or object constants can be expressed using this JSON notation, as in:
<p class="indent"> <code style="color:green;">{ a: 1, b:2, c:'abc', d:[ 1,3,4 ] }</code> </p>
or
<p class="indent"> <code style="color:green;">[ 1, 3, 5, { a:false, b:true }, 15, 17 ]</code> </p>
or
<p class="indent"> <code style="color:green;">[ [ 1, 3, 5 ], [ 2, 4, 6 ] ]</code> </p>
or
<p class="indent"> <code style="color:green;">{ first: { "flag": true, "message": 'Testing' }, second: { "flag":true, "message": 'Working' } }</code> </p>
     Note that string object keys (as in <code>"key"</code>) do NOT reference the same element as an identifier key (as in
     <code>key</code>).  Therefore, this is legal:
<p class="indent"> <code style="color:green;">value = { "flag": true, flag: 'Red' }</code> </p>
   and the elements are accessed as <code>value."flag"</code> and <code>value.flag</code>.
</div>
<a class="top-link" href="#topofpage">Top</a>
<hr id="Modes_and_Precision" class="sectionsep">
  <h2>Modes and Precision</h2>
<div class="cols">
  Calc can do essentially arbitrary precision arithmetic. It can also do arithmetic on rational fractions (as in <code>1/4 + 1/2 = 3/4</code>).
      The default setting is to do decimal arithmetic, but this can be adjusted using either command line options (see
      <code>-rational</code> and <code>-decimal</code> above), or using directives during execution.  The default precision for
      all calculations is 128-bit arithmetic, or approximately 34 digits of decimal precision. The precision can be adjusted up to
      12,500 decimal digits (due to somewhat arbitrary restrictions on our calculation of the value of <code>&#x1D6D1;</code>) using any of
      several directives.
  <p>Unlimited (up to the plaform limit of 4 billion digit) precision is available, and many/most calculations will honor that,
      although some trig / log calculations are still (implementation-restriction) limited to "double" precision. Also, the precision of division
      operations will be automatically limited to our (arbitrary) 12,500 digits even in "unlimited" mode if the result is an infinitely repeating
      value (such as the result of <code>1/7 = 0.142857142857...</code>).
  <p>Some operators (such as factorial) do not respect the precision setting, and do their calculations to their exact value regardless of the setting
     (not sure if this is wise or not, but it seems weird to restrict the precision in such cases in a rather arbitrary and unintuitive way). Also, in
     rational mode the precision setting does not apply to the numerator or denominator values of the fractions.
  <p>As another side note, the Bernoulli numbers are best calculated in rational mode, since they are defined as the ratio of integer values.
     Of course, in decimal mode the fractions will be divided and the results returned as a decimal value up the specified precision.
  <p>Trigonometric calculations are, by default, done in radians, but this can be changed to use degrees using the <code>:degrees</code> directive,
     or back using the <code>:radians</code> directive.
  <p>Dates have a valid range of <code>d'-9999/01/01'</code> to <code>d'9999/12/31'</code>, or a total range of 7,304,484 days. Significantly, dates
     use the <a href="https://www.dictionary.com/browse/proleptic">proleptic</a> values of the Gregorian calendar extended indefinitely to the past
     and future, such that date results prior to the adoption of the Gregorian calendar (in roughly 1582 AD) <strong>will not correspond</strong>
     to the actual calendar dates at that time. Also note that none of the other calendar systems that are or were used around the world (such as
     Julian, Hebrew, Iranian Muslim, Buddhist, Japanese, Chinese, Ethiopian, etc.) are supported.
  <p>Dates and times represent date/time values (such as birthdays, anniversaries, or wall clock times), and have no reference to time zones, although
     using time arithmetic can be a convenient way to do conversion of times between time zones.
</div>
<a class="top-link" href="#topofpage">Top</a>
<hr id="Formats" class="sectionsep">
  <h2>Formats</h2>
<div class="cols">
  The results of most operations can be displayed using alternative formats for better comprehension. To specify an alternative
     format, append <code>@<i>format</i></code> to the expression. In some cases, the uppercase equivalent can be given, which will
     do the same formatting, except mapping the result to UPPER case as well. The exceptions are <code>@e</code> which formats the
     value as a date in ISO-8601 form (<code><i>yyyy</i>-<i>mm</i>-<i>dd</i></code>), while <code>@E</code> puts the value in U.S.
     format (<code><i>mm</i>/<i>dd</i>/<i>yyyy</i></code>), <code>@f</code> which formats the
     result as a fraction, while <code>@F</code> formats the result as a proper fraction (as in <code>15/8@F = 1 7/8</code>),
     <code>@O</code> or <code>@D</code> which would make no difference in the outputs, and <code>@J</code> which doesn't make sense
     given the output could have strings which shouldn't be case-shifted.
</div>
  <div class="center">
    <table style="margin-left:auto;margin-right:auto;">
      <caption class="tablecap">Formats</caption>
      <thead>
      <tr>
        <th style="width:100">Format</th>
        <th style="width:460">Description</th>
      </tr>
      </thead>
      <tbody>
      <tr><td><code>@h</code></td><td>Display as a time value (hours:minutes:seconds.nanos)<br>as in <code style="color:blue;">98007900000000 @h</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">h'27:13:27.9'</code></td></tr>
      <tr><td><code>@</code>[[<code>+</code>|<code>-</code>]<i>nn</i>][<code>w</code>|<code>d</code>|<code>h</code>|<code>m</code>|<code>s</code>]<code>t</code></td><td>Format as a time (duration), optional rounding<br>as in <code style="color:blue;">98007900000000 @2ht</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">t'27.22h'</code></td></tr>
      <tr><td><code>@l</code></td><td>Format result string in lower case<br>as in <code style="color:blue;">'Hello, World!' @l</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"hello, world!"</code></td></tr>
      <tr><td><code>@u</code></td><td>Format result string in UPPER case<br>as in <code style="color:blue;">'Hello, Everyone!' @u</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"HELLO, EVERYONE!"</code></td></tr>
      <tr><td><code>@q</code></td><td>Remove quotes from the result<br>as in <code style="color:blue;">"abc" @q</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">abc</code></td></tr>
      <tr><td><code>@Q</code></td><td>Add extra quotes around the result<br>as in <code style="color:blue;">"abc" @Q</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"\"abc\""</code></td></tr>
      <tr><td><code>@</code>[[<code>+</code>|<code>-</code>]<i>nn</i>[<code>.</code><i>mm</i>]][<code>,</code>|<code>_</code>]<code>d</code></td>
          <td>Primarily for rational mode: format the result as a decimal value,<br>with optional separators, and optionally rounding to scale of <code>+</code>|<code>-</code> <i>nn</i> digits<br>and where <i>mm</i> is 0 padding width<br><code>,</code> adds thousands separators regardless of settings<br>and <code>_</code> removes them always<br>as in <code style="color:blue;">1234.567 @2,d</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">1,234.57</code><br>and <code style="color:blue;">2.345e9 @.12_d</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">002345000000</code><br>(prints codepoint for single character<br>as in <code style="color:blue;">"&#x1D6D1;" @d</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">120529</code>)</td></tr>
      <tr><td><code>@e</code></td><td>Format an integer as a date (yyyy-mm-dd) (ISO-8601 format)<br>as in <code style="color:blue;">18908 @e</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">d'2021-10-08'</code></td></tr>
      <tr><td><code>@E</code></td><td>Format an integer as a date (mm/dd/yyyy) (U.S. format)<br> as in <code style="color:blue;">-10252 @E</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">D'12/07/1941'</code></td></tr>
      <tr><td><code>@f</code></td><td>For decimal mode, format the result as a rational fraction<br>as in <code style="color:blue;">5.125 @f</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">41/8</code></td></tr>
      <tr><td><code>@F</code></td><td>Format as a proper fraction (with possible integer portion)<br>as in <code style="color:blue;">3.75 @F</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">3 3/4</code></td></tr>
      <tr><td><code>@c</code></td><td>Format an integer (range of 0 .. 0x10FFFF) as a Unicode character<br>as in <code style="color:blue;">120529 @c</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"&#x1D6D1;"</code></td></tr>
      <tr><td><code>@i</code></td><td>Format the result as a complex number, as in<br><code style="color:blue;">(1,1)**3 @i</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">-2 + 2&#x2148;</code></td></tr>
      <tr><td><code>@p</code></td><td>Format the result as a complex number<br>in polar form, as in<br><code style="color:blue;">(3,4) @p</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">{ r: 5, &#x03B8;: 0.9272952180016122 }</code></td></tr>
      <tr><td><code>@</code>[[<code>-</code>]<i>nn</i>[<code>.</code><i>mm</i>]][<code>,</code>]<code>j</code></td><td>Format the result as a "pretty printed" JSON result<br>(multiple lines with indents) with<br><code>-</code> to remove initial newline, <i>nn</i> to set initial indent,<br><code>.</code><i>mm</i> to set indent increments, and<br>with optional separators in numeric values</td></tr>
      <tr><td><code>@r</code></td><td>Format the result as a Roman Numeral value<br>as in <code style="color:blue;">2021 @R</code><code style="color:gray;"> &#x21E8; </code><code style="color:green;">R'MMXXI'</code></td></tr>
      <tr><td><code>@x</code></td><td>For integers and strings, format in hexadecimal form<br>as in <code style="color:blue;">456 @x</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">0x1c8</code><br>or <code style="color:blue;">'abc' @x</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">'\u0061\u0062\u0063'</code></td></tr>
      <tr><td><code>@o</code></td><td>For integers and strings, format in octal form<br>as in <code style="color:blue;">345 @o</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">0531</code><br>or <code style="color:blue;">'abc' @o</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">'\o141\o142\o143'</code></td></tr>
      <tr><td><code>@b</code></td><td>For integers and strings, format in binary form<br>as in <code style="color:blue;">231 @b</code><code style="grey;"> &#x21E8; </code><code style="color:green;">0b11100111</code><br>or <code style="color:blue;">'abc' @b</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">'\B01100001\B01100010\B01100011'</code></td></tr>
      <tr><td><code>@k</code></td><td>Use kilobyte, megabyte, etc. notation for the value<br>(depending on the SI / BINARY mode)<br>as in <code style="color:blue;">2000 @k</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">1.95 Kibytes</code> (binary)<br>or <code style="color:blue;">2000 @k</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">2.00 Kbytes</code> (SI)</td></tr>
      <tr><td><code>@w</code></td><td>Convert the (integer) value to words<br>as in <code style="color:blue;">235 @w</code><code style="color:gray;"> &#x21E8; </code><code style="color:green;">two hundred thirty-five</code></td></tr>
      <tr><td><code>@</code>[[<code>+</code>|<code>-</code>]<i>nn</i>][<code>,</code>]<code>%</code></td><td>Format as a percentage, with optional separators, and<br>optionally rounding to <i>nn</i> digits<br>as in <code style="color:blue;">10.08745 @2,%</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">1,008.75%</code></td></tr>
      <tr><td><code>@</code>[[<code>+</code>|<code>-</code>]<i>nn</i>][<code>,</code>]<code>$</code></td><td>Format as a currency value with the locale-specific currency symbol,<br>optionally setting separators and number of fraction digits<br>as in <code style="color:blue;">1500 @3,$</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">$1,500.000</code></td></tr>
      <tr><td><code>@</code>[[<code>+</code>|<code>-</code>]<i>nn</i>]<code>s</code></td><td>Left/right/center justify the string value inside the <i>nn</i> width<br>as in <code style="color:blue;">'abc' @+10s</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"&nbsp;&nbsp;&nbsp;&nbsp;abc&nbsp;&nbsp;&nbsp;"</code>,<br><code style="color:blue;">'abc' @-10s</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;abc"</code>,<br><code style="color:blue;">'abc' @10s</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"abc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"</code></td></tr>
    </tbody>
    </table>
  </div>
<a class="top-link" href="#topofpage">Top</a>
<hr id="Available_Operators_and_Predefined_Functions" class="sectionsep">
  <h2>Available Operators and Predefined Functions</h2>
<div class="cols">
  <p>There are a wide variety of arithmetic and logical operators available, as well as a number of common arithmetic functions supported by Calc.
     For the most part, automatic coercions are applied to the operands of functions if necessary (and possible), and the results of operations are
     automatically widened to support the results. The only exceptions to this are some of the lesser-used trig and log functions which can only be
     done to "double" precision (currently &mdash; this may change in subsequent versions).
  <p>Names of predefined functions are available in 3 or 4 forms: all lower case, all UPPER case, and one or two MixedCase forms. For example: <code>sin</code>, <code>SIN</code>, or <code>Sin</code>, and <code>sumof</code>, <code>SUMOF</code>, <code>Sumof</code>, or <code>SumOf</code>.
</div>
  <div class="center">
  <table style="margin-left:auto;margin-right:auto;">
    <caption class="tablecap">Operators, Functions, and Precedence</caption>
    <thead>
    <tr>
      <th style="width:8%">Level</th>
      <th style="width:40%">Operator</th>
      <th style="width:40%">Description</th>
      <th style="12%">Associativity</th>
    </tr>
    </thead>
    <tbody>
    <tr><td>31</td>
      <td><code>pi</code>, <code>&#x1D6D1;</code>, <code>e</code>, <code>&#x2107;</code>, or <code>&#x2147;</code><br>
          <code>phi</code>, <code>&#x03C6;</code>, <code>&#x03D5;</code><br>
          <code>PHI</code>, <code>&#x03A6;</code><br>
	  <code>i</code>, <code>&#x0131;</code>, <code>&#x0399;</code>, <code>&#x03B9;</code>, or <code>&#x2148;</code><br>
          <code>true</code> or <code>false</code><br>
          <code>null</code> or <code>nil</code> or <code>&#x2400;</code><br>
          <code>&#x2205;</code> or <code>&#x29B0;</code><br>
          <code>&#x00BC;</code>, <code>&#x00BD;</code>, <code>&#x00BE;</code>, <code>&#x2150;</code>, <code>&#x215E;</code>, etc.<br>
          <code>&#x2460;</code> .. <code>&#x2473;</code>, <code>&#x2474;</code> .. <code>&#x2487;</code>, <code>&#xFF10;</code> .. <code>&#xFF19;</code>, etc.<br>
          <code>today</code><br>
          <code>now</code><br>
          <code>info</code><br>
          <code>settings</code><br>
          any string, binary, octal, hex, fraction, etc. constant</td>
      <td>the fundamental constants <code>&#x1D6D1;</code> and <code>e</code><br>
          the fundamental Golden Ratio constant <code>&#x03C6;</code> or <code>phi</code><br>
          <code>(1 / &#x03C6;)</code> which is also <code>(&#x03C6; - 1)</code><br>
          <code><i>i</i></code> or &#x221A;-1 (the root of the imaginary numbers)<br>
          the <code>boolean</code> values<br>
          the <code>null</code> (empty) value<br>
          the empty object / set (same as <code>{ }</code>)<br>
          any of the Unicode fraction values, where <code>&#x215E; = 7/8</code><br>
          other Unicode digit / number symbols, where <code>&#x2487; = 20</code><br>
          the current date, comparable to <code>d'2021/11/19'</code><br>
          the current time, comparable to <code>h'11:10 am'</code><br>
          current Calc information (<code>version</code>, <code>os</code>, etc.)<br>
          the current Calc settings (<code>trigMode</code>, <code>silent</code>, etc.)<br>
          that constant value, as in <code>"Hello"</code>, <code>127</code>, or <code>0xA8</code></td><td>N/A</td></tr>
    <tr><td>30</td><td><code>{</code> (&nbsp;<i>key:value pairs</i>&nbsp;) <code>}</code></td><td>define an object</td><td>left to right</td></tr>
    <tr><td>29</td><td><code>[</code> (&nbsp;<i>expr list</i>&nbsp;) <code>]</code><br><i>var</i> <code>[</code> <i>expr</i> <code>]</code> or <i>var</i>&nbsp;<code>&#x2080;</code> .. <code>&#x2089;</code></td><td>define an array,<br>or access elements of an array, string, or object</td><td>left to right</td></tr>
    <tr><td>28</td><td><code>(</code> <i>expr</i> <code>,</code> <i>expr</i> <code>)</code></td><td>define a complex number</td><td>left to right</td></tr>
    <tr><td>27</td><td><code>.</code></td><td>access an object member</td><td>left to right</td></tr>
    <tr><td>26</td><td><code>( </code><i>expr</i><code> )</code></td><td>group an expression</td><td>N/A</td></tr>
    <tr><td rowspan="72">25</td>
            <td><code>ABS</code>&nbsp;<i>expr</i></td><td>absolute value</td><td rowspan="72">left to right</td></tr>
            <tr><td><code>SIN</code>&nbsp;<i>expr</i></td><td>sine</td></tr>
            <tr><td><code>COS</code>&nbsp;<i>expr</i></td><td>cosine</td></tr>
            <tr><td><code>TAN</code>&nbsp;<i>expr</i></td><td>tangent</td></tr>
            <tr><td><code>ASIN</code>&nbsp;<i>expr</i></td><td>sine<sup>-1</sup></td></tr>
            <tr><td><code>ACOS</code>&nbsp;<i>expr</i></td><td>cosine<sup>-1</sup></td></tr>
            <tr><td><code>ATAN</code>&nbsp;<i>expr</i></td><td>tangent<sup>-1</sup></td></tr>
            <tr><td><code>ATAN2</code>&nbsp;<i>expr<sub>y</sub></i><code>,</code>&nbsp;<i>expr<sub>x</sub></i></td><td>the angle &theta; from converting<br>rectangular (x,y) to polar (r,&theta;) coordinates</td></tr>
            <tr><td><code>SINH</code>&nbsp;<i>expr</i></td><td>hyperbolic sine</td></tr>
            <tr><td><code>COSH</code>&nbsp;<i>expr</i></td><td>hyperbolic cosine</td></tr>
            <tr><td><code>TANH</code>&nbsp;<i>expr</i></td><td>hyperbolic tangent</td></tr>
            <tr><td><code>SQRT</code> or <code>&radic;</code>&nbsp;<i>expr</i></td><td>square root</td></tr>
            <tr><td><code>CBRT</code> or <code>&#x221B;</code>&nbsp;<i>expr</i></td><td>cube root</td></tr>
            <tr><td><code>FORT</code> or <code>&#x221C;</code>&nbsp;<i>expr</i></td><td>fourth root</td></tr>
            <tr><td><code>LOG</code>&nbsp;<i>expr</i></td><td>log base 10</td></tr>
            <tr><td><code>LN2</code>&nbsp;<i>expr</i></td><td>log base 2</td></tr>
            <tr><td><code>LN</code>&nbsp;<i>expr</i></td><td>natural log (base e)</td></tr>
            <tr><td><code>EPOW</code>&nbsp;<i>expr</i></td><td>anti-log (e ** <i>expr</i>)</td></tr>
            <tr><td><code>TENPOW</code>&nbsp;<i>expr</i></td><td>10 ** <i>expr</i> (anti-log base ten)</td></tr>
            <tr><td><code>RANDOM</code>&nbsp;( <i>expr</i> ) ?&nbsp;</td><td>random number with optional seed value</td></tr>
            <tr><td><code>SIGNUM</code> or <code>SGN</code>&nbsp;<i>expr</i></td><td>sign (&lt; 0 = -1, 0 = 0, &gt; 0 = +1)</td></tr>
            <tr><td><code>ISNULL</code>&nbsp;<i>expr</i></td><td>is the value null?</td></tr>
            <tr><td><code>TYPEOF</code>&nbsp;<i>expr</i></td><td>the type of the result<br>as in <code>"string"</code>, <code>"integer"</code>, <code>"boolean"</code>, etc.</td></tr>
            <tr><td><code>CAST</code>&nbsp;<i>expr</i>&nbsp;[ <code>,</code> <i>type_expr</i> ]</td><td>convert the value to the given type<br>(default type is <code>"string"</code>)</td></tr>
            <tr><td><code>LENGTH</code>&nbsp;<i>expr</i><br>or <i>expr</i> [ <code>..</code> or <code>&#x2026;</code> <i>expr</i> [ <code>,</code> <i>expr</i> ] ]</td><td>length of string, array, object, or range</td></tr>
            <tr><td><code>SCALE</code>&nbsp;<i>expr</i></td><td>scale of number, total size of object or array</td></tr>
            <tr><td><code>ROUND</code>&nbsp;<i>expr</i><code>,</code>&nbsp;<i>places_expr</i></td><td>round value to given places</td></tr>
            <tr><td><code>FLOOR</code>&nbsp;<i>expr</i></td><td>the "floor" of a numeric value</td></tr>
            <tr><td><code>CEIL</code>&nbsp;<i>expr</i></td><td>the "ceil" of a numeric value</td></tr>
            <tr><td><code>ISPRIME</code>&nbsp;<i>expr</i></td><td>is the value a prime number?</td></tr>
            <tr><td><code>GCD</code>&nbsp;<i>expr</i><code>,</code>&nbsp;<i>expr</i></td><td>greatest common divisor</td></tr>
            <tr><td><code>LCM</code>&nbsp;<i>expr</i><code>,</code>&nbsp;<i>expr</i></td><td>least common multiple</td></tr>
            <tr><td><code>MAX</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>maximum value</td></tr>
            <tr><td><code>MIN</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>minimum value</td></tr>
            <tr><td><code>SUMOF</code> or <code>&#x2211;</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *<br>or <i>expr</i> [ <code>..</code> or <code>&#x2026;</code> <i>expr</i> [ <code>,</code> <i>expr</i> ] ]</td><td>sum of all the values</td></tr>
            <tr><td><code>PRODUCTOF</code> or <code>&#x220F;</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *<br>or <i>expr</i> [ <code>..</code> or <code>&#x2026;</code> <i>expr</i> [ <code>,</code> <i>expr</i> ] ]</td><td>product of all the values</td></tr>
            <tr><td><code>JOIN</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>join strings</td></tr>
            <tr><td><code>SPLIT</code>&nbsp;<i>expr</i> <code>,</code> <i>regexpr</i> (&nbsp;<code>,</code> <i>limit_expr</i>&nbsp;)</td><td>split string into parts</td></tr>
	    <tr><td><code>REVERSE</code>&nbsp;<i>expr</i></td><td>reverse the order of an array or string</td></tr>
            <tr><td><code>INDEX</code>&nbsp;<i>expr</i> <code>,</code> <i>search_expr</i> (&nbsp;<code>,</code> <i>start_expr</i>&nbsp;)</td><td>find value within a string</td></tr>
            <tr><td><code>SUBSTR</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>start_expr</i> (&nbsp;<code>,</code> <i>end_expr</i>&nbsp;)&nbsp;)</td><td>extract a substring</td></tr>
            <tr><td><code>REPLACE</code>&nbsp;<i>expr</i> <code>,</code> <i>expr</i> <code>,</code> <i>expr</i> (&nbsp;<code>,</code> <i>mode</i>&nbsp;)</td><td>replace substrings within a string</td></tr>
            <tr><td><code>SLICE</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;)&nbsp;)</td><td>extract a slice of an array (or string)</td></tr>
            <tr><td><code>SPLICE</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>modify an array by deleting and/or adding elements</td></tr>
            <tr><td><code>SPLICE</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <code>[</code> <i>id or string list</i> <code>]</code>&nbsp;)<br>(&nbsp;<code>,</code> <code>{</code> <i>key:value pairs</i> <code>}</code>&nbsp;)</td><td>modify an object by deleting and/or adding elements</td></tr>
            <tr><td><code>FILL</code>&nbsp;<i>var</i>&nbsp;( <code>,</code> <i>expr</i>&nbsp;( <code>,</code> <i>expr</i>&nbsp;( <code>,</code><i>expr</i> ) ) )</td><td>fill an array or string</td></tr>
            <tr><td><code>FORMATSTRING</code>&nbsp;<i>format_expr</i>&nbsp;( <code>,</code> <i>expr</i> ) *</td><td>use the expressions to replace<br>the parameter args in the format string</td></tr>
            <tr><td><code>SORT</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>case_expr</i>&nbsp;)</td><td>sort the array expression, optionally ignoring case,<br>returning the array of sorted values</td></tr>
            <tr><td><code>TRIM</code> or <code>LTRIM</code> or <code>RTRIM</code> <i>expr</i></td><td>trim all, leading, or trailing whitespace</td></tr>
            <tr><td><code>PAD</code> or <code>LPAD</code> or <code>RPAD</code>&nbsp;<i>var</i>&nbsp;<code>,</code> <i>expr</i>&nbsp;( <code>,</code><i>expr</i> )</td><td>pad an array or string to the given width<br>with 0 or space (default) or the given value/character</td></tr>
            <tr><td><code>FIB</code>&nbsp;<i>expr</i></td><td>Fibonacci number</td></tr>
            <tr><td><code>Bn</code>&nbsp;<i>expr</i></td><td>Bernoulli number</td></tr>
            <tr><td><code>DEC</code>&nbsp;<i>expr</i></td><td>convert string or fraction to decimal number</td></tr>
            <tr><td><code>FRAC</code>&nbsp;<i>num</i><code>,</code>&nbsp;<i>den</i><br>or <i>int</i><code>,</code><i>num</i><code>,</code><i>den</i><br>or <i>string</i></td><td>construct a rational fraction</td></tr>
            <tr><td><code>COMPLEX</code>&nbsp;<i>r</i><code>,</code>&nbsp;<i>i</i><br>or <i>expr</i></td><td>construct a complex number</td></tr>
            <tr><td><code>ROMAN</code>&nbsp;<i>expr</i></td><td>interpret <i>expr</i> as a Roman Numeral</td></tr>
            <tr><td><code>LOWER</code>&nbsp;<i>expr</i></td><td>convert <i>expr</i> to lower case</td></tr>
            <tr><td><code>UPPER</code>&nbsp;<i>expr</i></td><td>convert <i>expr</i> to UPPER case</td></tr>
            <tr><td><code>EVAL</code>&nbsp;<i>expr</i></td><td>evaluate the string result of <i>expr</i></td></tr>
            <tr><td><code>EXEC</code>&nbsp;<i>expr</i>&nbsp;( <code>,</code>&nbsp;<i>expr</i>&nbsp;) *</td><td>execute the given O/S command<br>(with arguments)<br>and return the output as a string</td></tr>
            <tr><td><code>DECODE</code>&nbsp;<i>expr</i></td><td>decode a base64 string into the original string value</td></tr>
            <tr><td><code>ENCODE</code>&nbsp;<i>expr</i></td><td>encode a string into its base64 form</td></tr>
            <tr><td><code>READ</code>&nbsp;<i>expr</i>&nbsp;( <code>,</code>&nbsp;<i>charset_expr</i>&nbsp;)</td><td>read the file (or files) using the optional charset</td></tr>
            <tr><td><code>MATCHES</code>&nbsp;<i>expr</i>&nbsp;<code>,</code>&nbsp;<i>pattern_expr</i></td><td>match the expression string against<br>the regular expression pattern</td></tr>
            <tr><td><code>FACTORS</code>&nbsp;<i>expr</i></td><td>calculate all the factors of the number</td></tr>
            <tr><td><code>PFACTORS</code>&nbsp;<i>expr</i></td><td>calculate the prime factors of the number</td></tr>
            <tr><td><code>CHARS</code>&nbsp;<i>expr</i></td><td>convert a string into an array of its codepoint values</td></tr>
            <tr><td><code>DOW</code>&nbsp;<i>expr</i></td><td>day of the week of a date (integer)<br>(0=Sunday to 6=Saturday)</td></tr>
            <tr><td><code>DOM</code>&nbsp;<i>expr</i></td><td>day of the month of a date (integer)<br>(1 .. 31)</td></tr>
            <tr><td><code>DOY</code>&nbsp;<i>expr</i></td><td>day of the year of a date (integer)<br>(1 .. 365/366)</td></tr>
            <tr><td><code>MOY</code>&nbsp;<i>expr</i></td><td>month of the year of a date (integer)<br>(1 .. 12)</td></tr>
            <tr><td><code>YOD</code>&nbsp;<i>expr</i></td><td>year of the date (integer)</td></tr>
    <tr><td>24</td><td><i>expr</i>&nbsp;<code>++</code> or <code>&#x2795;&#x2795;</code><br><i>expr</i>&nbsp;<code>--</code> or <code>&#x2212;&#x2212;</code> or <code>&#x2796;&#x2796;</code></td><td>post increment/decrement</td><td>N/A</td></tr>
    <tr><td>23</td><td><code>++</code> or <code>&#x2795;&#x2795;</code>&nbsp;<i>expr</i><br><code>--</code> or <code>&#x2212;&#x2212;</code> or <code>&#x2796;&#x2796;</code>&nbsp;<i>expr</i></td><td>pre increment/decrement</td><td>right to left</td></tr>
    <tr><td>22</td><td><code>+</code> or <code>&#x2795;</code>&nbsp;<i>expr</i><br><code>-</code> or <code>&#x2212;</code> or <code>&#x2796;</code>&nbsp;<i>expr</i></td><td>posate/negate a value</td><td>right to left</td></tr>
    <tr><td>21</td><td><code>!</code> or <code>&#x00AC;</code>&nbsp;<i>expr</i></td><td>boolean NOT<br>(can also use <code>!!</code> to convert any value to a <i>true</i> boolean:<br><code>true</code> if set, non-empty, and non-zero,<br>or <code>false</code> if null, empty, or 0)</td><td>right to left</td></tr>
    <tr><td>20</td><td><code>~</code>&nbsp;<i>expr</i></td><td>bitwise NOT</td><td>right to left</td></tr>
    <tr><td>19</td><td><i>expr</i>&nbsp;<code>!</code></td><td>factorial</td><td>left to right</td></tr>
    <tr><td>18</td><td><i>expr<sub>1</sub></i>&nbsp;&nbsp;<code>**</code>, <code>&times;&times;</code>, <code>&#x2217;&#x2217;</code>, <code>&#x2715;&#x2715;</code>, or <code>&#x2716;&#x2716;</code>&nbsp;&nbsp;<i>expr<sub>2</sub></i><br>or&nbsp;<i>expr</i>&nbsp;&#x2070; .. &#x2079;</td><td><i>expr<sub>1</sub></i> to <i>expr<sub>2</sub></i> power<br>or <i>expr</i> to given power</td><td>right to left</td></tr>
    <tr><td>17</td><td>
        <i>expr</i>&nbsp;&nbsp;<code>*</code>, <code>&times;</code>, <code>&#x2217;</code>, <code>&#x2715;</code>, or <code>&#x2716;</code>&nbsp;&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;&nbsp;<code>/</code>, <code>&divide;</code>, <code>&#x2215;</code>, or <code>&#x2797;</code>&nbsp;&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;&nbsp;<code>\</code>&nbsp;&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> % </code>&nbsp;<i>expr</i></td>
        <td>multiply<br>divide<br>integer divide<br>remainder</td><td>left to right</td></tr>
    <tr><td>16</td><td>
        <i>expr</i>&nbsp;&nbsp;<code>+</code> or <code>&#x2795;</code>&nbsp;&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;&nbsp;<code>-</code>,  <code>&#x2212;</code>, or <code>&#x2796;</code>&nbsp;&nbsp;<i>expr</i></td>
        <td>add<br>subtract</td><td>left to right</td></tr>
    <tr><td>15</td><td>
        <i>expr</i>&nbsp;<code> &gt;&gt;&gt; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &gt;&gt; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &lt;&lt; </code>&nbsp;<i>expr</i></td>
        <td>bit shift operations</td><td>left to right</td></tr>
    <tr><td>14</td><td><i>expr</i>&nbsp;<code> &lt;=&gt; </code>&nbsp;<i>expr</i><td>returns <code>-1</code> if <i>expr</i> &lt; 0<br><code>0</code> if <i>expr</i> = 0<br><code>+1</code> if <i>expr</i> &gt; 0</td><td>left to right</td></tr>
    <tr><td>13</td><td>
        <i>expr</i>&nbsp;<code> &lt;= </code>or<code> &#x2264; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &lt; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &gt;= </code>or<code> &#x2265; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &gt; </code>&nbsp;<i>expr</i></td>
        <td>comparison</td><td>left to right</td></tr>
    <tr><td>12</td><td>
        <i>expr</i>&nbsp;<code> === </code>or<code> &#x2A76; </code>or<code> &#x2261; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> !== </code>or<code> &#x2262; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> == </code>or<code> &#x2A75; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> != </code>or<code> &#x2260; </code>&nbsp;<i>expr</i></td>
        <td>strict equality<br>strict inequality<br>equality<br>inequality</td><td>left to right</td></tr>
    <tr><td>11</td><td>
        <i>expr</i>&nbsp;<code> &amp; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> ~&amp; </code>or<code> &#x22BC; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &amp;~ </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> ^ </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> ~^ </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> | </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> ~| </code>or<code> &#x22BD; </code>&nbsp;<i>expr</i></td>
        <td>bitwise AND<br>NOT AND (or NAND)<br>AND NOT<br>exclusive OR<br>NOT exclusive OR<br>bitwise OR<br>NOT OR (or NOR)</td><td>left to right</td></tr>
    <tr><td>10</td><td>
        <i>expr</i>&nbsp;<code> &amp;&amp; </code>or<code> &#x2227; </code>&nbsp;<i>expr</i></td><td>logical AND</td><td>left to right</td></tr>
    <tr><td>9</td><td>
        <i>expr</i>&nbsp;<code> || </code>or<code> &#x2228; </code>&nbsp;<i>expr</i></td><td>logical OR</td><td>left to right</td></tr>
    <tr><td>8</td><td>
        <i>expr</i>&nbsp;<code> ^^ </code>or<code> &#x22BB; </code>&nbsp;<i>expr</i></td><td>logical exclusive OR</td><td>left to right</td></tr>
    <tr><td>7</td><td><i>expr</i>&nbsp;<code> ? </code>&nbsp;<i>expr</i>&nbsp;<code> : </code>&nbsp;<i>expr</i></td><td>select one or the other value</td><td>right to left</td></tr>
    <tr><td>6</td><td><i>var</i>&nbsp;<code> = </code>&nbsp;<i>expr</i></td><td>assign <i>expr</i> value to variable</td><td>right to left</td></tr>
    <tr><td>5</td><td><i>var</i>&nbsp;<code> **=</code>,<code> &times;&times;=</code>,<code> &#x2217;&#x2217;=</code>,<code> &#x2715;&#x2715;=</code>, or<code> &#x2716;&#x2716;= </code>&nbsp;<i>expr</i></td><td><i>var</i> to <i>expr</i> power, assign to <i>var</i></td><td>right to left</td></tr>
    <tr><td>4</td><td>
        <i>var</i>&nbsp;<code> *=</code>,<code> &times;=</code>,<code> &#x2217;=</code>,<code> &#x2715;=</code>, or<code> &#x2716;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> /=</code>,<code> &divide;=</code>,<code> &#x2215;=</code>, or<code> &#x2797;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> \= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> %= </code>&nbsp;<i>expr</i></td>
        <td>perform the operation, reassign to variable</td><td>right to left</td></tr>
    <tr><td>3</td><td>
        <i>var</i>&nbsp;<code> += </code>or<code> &#x2795;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> -= </code>,<code> &#x2212;=</code>, or<code> &#x2796;= </code>&nbsp;<i>expr</i></td>
        <td>result assigned to variable again</td><td>right to left</td></tr>
    <tr><td>2</td><td>
        <i>var</i>&nbsp;<code> &gt;&gt;&gt;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> &gt;&gt;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> &lt;&lt;= </code>&nbsp;<i>expr</i></td>
        <td>perform the shift, reassign to variable</td><td>right to left</td></tr>
    <tr><td>1</td><td>
        <i>var</i>&nbsp;<code> &amp;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> ~&amp;= </code>or<code> &#x22BC;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> &amp;~= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> ^= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> ~^= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> |= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> ~|= </code>or<code> &#x22BD;= </code>&nbsp;<i>expr</i></td>
        <td>perform the bit op, reassign to variable</td><td>right to left</td></tr>
    </tbody>
  </table>
  </div>
<a class="top-link" href="#topofpage">Top</a>
<hr id="Notes_on_Functions" class="sectionsep">
  <h2>Notes on Functions</h2>
<div class="cols">
  <p>Some of the functions might require a bit of explanation as to how they work.
  <p>The <code>length</code> function takes
     any one of a number, an array, an object, a string, or a range expression and returns the "size" of the value. For strings,
     this is the number of codepoints in the string, for arrays it is the number of items in the array (first-level size),
     for objects it is the number of elements in the object (again, not recursive for nested objects). A string embedded
     inside an array or object counts as one object, however. Also, inside arrays or objects a null entry counts as one
     object. For integer numbers the length is the number of digits in the absolute value, and for decimal numbers it is the
     "precision" or number of digits in the unscaled value. For a range expression the length is the number of elements in
     the range. So, for instance, a range of <code>49..300,21</code> gives a length of 12, corresponding to the values of
     <code>49, 70, 91, 112, ..., 280</code>. For fractions, the length is the same as the length of its decimal representation.
  <p>The <code>scale</code> function returns the total (recursive) size of arrays or objects, for strings the value is 0, for
     decimal numbers or fractions the value is the "scale" of the decimal representation of the number, which is complicated
     but basically means where the decimal point is placed relative to the raw digits: zero or positive is the number of digits
     to the right of the decimal point, negative is the number of extra zeros after the significant digits and to the left of
     the decimal point.  Some examples: <code>scale(1.2) &#x21E8; 1</code>, <code>scale 10e4 &#x21E8; -4</code>, while
     <code>scale 10000 &#x21E8; 0</code>.
  <p>The <code>random</code> function will generate a random value, of the current decimal precision, with a value between 0 and 1 (exclusive). If a seed expression is given, the bytes of that value will be used to seed the random number generator, which will produce a predictable value every time the same seed is used (useful for testing purposes), otherwise a different value will be returned every time (without the seed value).
  <p>The <i>type</i> value returned from <code>typeof</code>, which can be the optional second parameter to <code>cast</code>
     can be one of the following (string) values:
  <p class="indent"><code>"null"</code>, <code>"string</code>, <code>"integer"</code>, <code>"float"</code>,
     <code>"fraction"</code>, <code>"complex"</code>, <code>"boolean"</code>, <code>"array"</code>, <code>"object"</code>,
     <code>"function"</code>, or <code>"unknown"</code>.
  <p>The <code>round</code> function rounds to the number of places after the decimal, with a negative value rounding to the
     left of the decimal point.  For example: <code>round(1.335577,2) &#x21E8; 1.34</code>, and
     <code>round(1234567.890,-3) &#x21E8; 1235000</code>.
  <p>The <code>min</code> and <code>max</code> functions do either numeric or string comparisons, depending on the type of the
     first value in the list. While the <code>sumof</code> and <code>productof</code> functions try to convert all their
     values to numbers.
  <p>The <code>join</code> function is a little complicated, but still intuitive once you figure it out. With one simple value argument
     the result is the string representation of the value. With one array or object value, the result is the concatenation of the values
     within the object (the flat map of the values, that is). With one array/object value and one other value, the flat map of the values
     in the array or object are concatenated with the second argument as the join string. With any two other objects, the result is
     simply the concatenation of the two values. With three or more arguments, the join (or "glue") value is the last argument in the
     list, and the flat map of all the other values is joined together by that string.<br>
     Some examples:  <code>join 1 &#x21E8; "1"</code>, while <code>join 1, 2 &#x21E8; "12"</code>.
     The complicated ones look like this:  <code>join 'a','b','c','-' &#x21E8; "a-b-c"</code>.
     While <code>arr=[1,2,3];join arr,'-' &#x21E8; 1-2-3</code>.
  <p>The <code>split</code> function takes one string argument, a second regular expression string, and an optional limit
     value that determines how many splits are returned. See the documentation for the Java <code>String.split</code> method
     for further details on how this parameter works.
  <p>The arguments to <code>index</code> are the string to search, the search string, and the optional starting index. If the
     starting index is given, and is negative, the search starts from the end of the string, and the return value will be
     negative if the search string is found (an offset from the end of the string). Otherwise the search starts from the
     beginning and returns a non-negative value. If the search string is not found, the function returns <code>null</code>.
     In addition, the starting index value can also be null, which starts the search at the beginning of the string.
  <p>The arguments to <code>substr</code> are the value (converted to a string), and optional starting and ending indices
     for the extraction. If the start/end are negative, they refer to offsets from the end of the string (same as returned
     by <code>index</code>), otherwise they are zero-based indices from the beginning. If the ending value is given, this is
     the ending value exclusive, while if null or not given the end of the string is used. Calling <code>substr</code> with
     just one argument is a convenient way to convert a non-string value to a string as in: <code>substr 1 &#x21E8; "1"</code>.
  <p>The <code>replace</code> function allows replacement of substrings within a string by exact matches, or using regular expressions. This is chosen
     using the various modes. If no mode is given, or a variable is used whose value is null or an empty string, then the replacement is done
     exactly, as in <code>replace('tell', 'l', 'b') &#x21E8; 'tebb'</code>. If the option value is <code>all</code>, <code>first</code>, or
     <code>last</code>, the second string is a regular expression and either all, the first, or the last substring(s) that match the regular
     expression are replaced with the third string value. Group substitutions are allowed in the replacement string, as in
     <code>replace ('tell teal tail teel toil tool toll', 't(..)l', 't$1b', all) &#x21E8; "telb teab taib teeb toib toob tolb"</code>.
  <p>The arguments to <code>slice</code> work exactly the same was as for <code>substr</code>, except for arrays or the values of
     an object. But if a simple value is given by the first expression, the value is converted to a string and it will work exactly
     the same as <code>substr</code> on the string value.
     The original array or string is not modified by the <code>slice</code> operation; instead it
     constructs a new array as a copy of the specified portion of the original, leaving the original unmodified.
  <p>By contrast, the <code>splice</code> function DOES modify the original array or object by potentially removing elements and
     adding new ones.
     If only the array/object argument is given, the entire contents are removed and returned. This is a convenient way to
     clear out the source. For arrays, the optional arguments are the starting index (which can be negative, meaning relative to
     the end of the array, the count of elements to delete, and then a series of arguments to add into the array at the given
     start position.  For objects, the optional arguments are a list of member ids (which can be straight ids, strings, or
     interpolated strings), and an optional object with the new members (key:value pairs) to add to the original object.
     The returned value for an array source is another (possibly empty) array containing the elements removed from the source.
     For an object source, the return is a possibly empty object containing the key:value pairs removed from the original.
     Also, for an object, if the drop list is omitted, the object is cleared of all values, but specifying an empty list
     will not clear any values, so be careful. For an array, specifying a start value and a count of zero will clear nothing.
  <p>The <code>fill</code> function requires a variable as the first argument. The contents of the variable are replaced or
     set to the second argument value (or <code>null</code> or <code>'\0'</code> if missing), depending on the optional third and fourth parameters. If only the third argument is
     given this is taken as the length, and the array or string is filled to that length with the value. If both the
     3<sup>rd</sup> and 4<sup>th</sup> arguments are given, these are taken as the starting offset and a length.
     If a string is filled and the starting offset is past the end of the existing string, the intervening characters are
     set to the <code>nul</code> character. The fill value for a string can only be one character, or an integer
     (in the range of 0..65535) that is converted to a char value (NOT a codepoint value!). If the 3<sup>rd</sup> value is missing,
     the existing array or string's length is used (that is, the entire existing value is overwritten).
  <p>The <code>formatstring</code> function works exactly like <code>String.format</code> in Java, or <code>sprintf</code> in C/C++, meaning the format string
     will (optionally) have replaceable parameters, which are replaced by the values of the respective arguments in the expression list. The completed
     string with all the values replaced will be the result. For example:
  <p class="indent"><code style="color:blue;">formatstring("%1$s, %2$s!", "Hello", "World")</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">"Hello, World!"</code>
  <p>The <code>sort</code> function will do a "flat map" of the values in a list or object, sort them, and return the sorted list.
     Because of the "flat" mapping, the original values are left as-is. So in order to sort a list in place, you must reassign
     the result of the sort back to the original variable, as in <code>arr = sort arr</code>. This also allows you to create
     a sorted list from an unsorted array constant in one step, by doing <code>arr = sort [ 3,2,5,0,4 ] &#x21E8; [ 0, 2, 3, 4, 5 ]</code>.
     Note that (as of version 2.3.6 or higher) the sort is done in a "natural ordering" that sorts numeric values within strings
     as in "1", "2", "3", ... "10", "11", .... Future versions may include an option for this. The optional second argument to <code>sort</code>
     determines whether the sort is done ignoring the case of strings or not. <code>true</code> to ignore, <code>false</code> (or missing)
     to respect the case.
  <p>The <code>FRAC</code> function constructs a fraction value from a numerator and denominator, from an integer along with
     a numerator and denominator, or a single expression which is converted to a string and parsed in the same manner as
     a fractional constant, such as <code>frac('1 &#x215c;')</code>, except that any of the Unicode fraction values can
     be expressed for this function as Unicode escape sequences in the string, as in <code>frac('2 \u215c')</code>
     while for an <code>f'...'</code> constant the real fraction character(s) must be used.
  <p>The <code>FACTORS</code> and <code>PFACTORS</code> functions only accept integer values, and produce arrays of the
     desired values.<br>Examples: <code>factors(123) &#x21E8; [ 1, 3, 41, 123 ]</code>, while <code>pfactors 123 &#x21E8; [ 3, 41 ]</code>.
  <p>The <code>EXEC</code> function will execute the operating system program given by the first (string) expression, using the remaining
     expression values as parameters, and return the merged stdout and stderr streams as a string result. On Windows operating systems
     if the command to execute is a batch file (<code>.bat</code> or <code>.cmd</code> extension) then <code>cmd /c</code> is automatically
     prepended to the command. For instance, one of our standard build tests involves this expression:
     <p class="indent"><code>split(exec('wc', 'calc.txt'), '\\s+')</code></p>
     which will invoke the <code>wc</code> executable on Linux or MacOS, but will also run <code>cmd /c wc.bat</code> on Windows.
  <p>For now, the <code>encode</code> and <code>decode</code> functions only work on string objects (or other values / objects converted
     to their string representations). So, in order to reconstruct an array (for instance) from its encoded form you would need to do:
     <code>eval(decode '</code>...<code>')</code>.
     <p class="indent">
&gt;<code style="color:blue;">arr1 = [1, 2, 3] </code><code style="color:grey;">&#x21E8;</code><code style="color:green;"> [ 1, 2, 3 ]</code><br>
&gt;<code style="color:blue;">enc1 = encode arr1 </code><code style="color:grey;">&#x21E8;</code><code style="color:green;"> "WyAxLCAyLCAzIF0="</code><br>
&gt;<code style="color:blue;">arr2 = eval (decode enc1) </code><code style="color:grey;">&#x21E8;</code><code style="color:green;"> [ 1, 2, 3 ]</code><br>
&gt;<code style="color:blue;">arr1 === arr2 </code><code style="color:grey;">&#x21E8;</code><code style="color:green;"> true</code></p>
  <p>The first expression for <code>read</code> can be a single file name, or a list of files separated by comma or semi-colon. In fact, the
     rules are the same as for the input values on the command line. And if the string cannot be interpreted as file names that exist, the
     entire string is just returned as-is as the result. The second (optional) expression is the name of the charset to use (system default
     if not given, or empty/null). The entire contents of the file(s) is returned, with the end-of-line sequences changed to just newline (0x0A or "\n"), and can be assigned to a variable or used in some other way.
  <p>The pattern expression for <code>matches</code> follows Java regular expression conventions. The input expression is converted to a string and matched against the regex, returning a boolean.
  <p>The <code>info</code> object contains five read-only subobjects:  <code>version</code>, 
     <code>os</code>, <code>java</code>, <code>locale</code>, and <code>timezone</code>.
     The contents of each are similar to this:
  <p class="indent">
    <code style="color:blue;">info.version</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">{ major: 2, minor: 3, patch: 0, prerelease: "-debug", build: "+9cce83e" }</code>
  <p>and the standard <code>"library.calc"</code> contains several examples of the use of these fields.
  <p>The <code>settings</code> object contains the settable values of many of the directives, such
     as: <code>trigMode</code>, <code>separatorMode</code>, <code>precision</code>, etc. The values
     can be queried, or set, which has exactly the same effect as using the directives, as in:
  <p class="indent"><code style="color:blue;">:decimal 60</code> is the same as
    <code style="color:blue;">settings.precision = 60</code>.
  <p>See the <a href="#Directives">Directives</a> section below for the complete list of equivalents.
  <p>The values of <code>phi</code> and <code>PHI</code> (or <code>&#x03C6;</code> and <code>&#x03A6;</code>) (the <a href="https://en.wikipedia.org/wiki/Golden_ratio">&ldquo;Golden Ratio&rdquo;</a> and its inverse) are constructed (due to precision and rounding) such that <code>1 / phi == PHI</code> and also <code>1 / PHI == phi</code>.
     But even though mathematically <code>phi - 1 == PHI</code> and <code>PHI + 1 == phi</code> the values computed here will not match exactly
     ("PHI" will have one more fractional digit of precision than "phi"):
  <p class="indent">
     <code style="color:blue;">phi </code><code style="color:grey;">&#x21E8;</code><code style="color:green;"> 1.618033988749894848204586834365638</code><br>
     <code style="color:blue;">PHI </code><code style="color:grey;">&#x21E8;</code><code style="color:green;"> 0.6180339887498948482045868343656382</code><br>
  <p>This value is also available from the standard <code>library.calc</code> (as the first solution to the quadratic equation &xscr;&sup2; - &xscr; - 1 = 0) via:
  <p class="indent">
     <code style="color:blue;">quad(1, -1, -1)[0] </code><code style="color:grey;">&#x21E8;</code><code style="color:green;"> 1.618033988749894848204586834365638</code>
</div>
<a class="top-link" href="#topofpage">Top</a>
<hr id="User_Defined_Functions" class="sectionsep">
  <h2>User-Defined Functions</h2>
<div class="cols">
  In addition to the predefined functions above, Calc allows new functions to be defined that can be used repeatedly without having to
  retype the same expression.
  <p>The syntax for a function definition is:
  <p class="indent">
     <code>def</code> | <code>define</code>&nbsp;<i>name</i> <i>optional parameter list</i> <code>= {</code> <i>expressions or statements</i> <code>}</code>
  </p>
  <p>The optional parameter list looks like:
  <p class="indent">
    <code>( </code> <i>name</i> [ <code> = </code> <i>expr</i> ] [ <code>,</code> ... ] <code> )</code>
  </p>
  <p>Note that the <code>{</code> and <code>}</code> are optional if there is only one expression/statement in the definition.
  <p>The parameter values are assigned when the function is called, and there can be fewer actual values given than are declared; the remaining values
     will be assigned <code>null</code> unless there is a default expression given in the declaration, in which case that expression is evaluated.
     The parentheses are optional on the function call if there are no parameters being sent.
  <p>Similarly to the <code>$#</code> and <code>$*</code> variables maintained for the command line arguments, local variables named the
     same are maintained for each function call. Thus the number of actual parameters passed to the function is available as
     <code>_#</code> inside the function, the first parameter is available through <code>_*[0]</code> or <code>_0</code>, etc. and the whole array of
     parameters is available via <code>_*</code>.
  <p>A function can declare any number (including zero) of fixed parameters, and use <code>...</code> or <code>..</code> or <code>&#x2026;</code>
     at the end of the parameter list to signify any number of variable parameters after the fixed ones. These variable parameters can be
     accessed using the <code>_*[</code><i>nn</i><code>]</code> parameter array, or using <code>_</code><i>nn</i> where <i>nn</i> is the
     parameter index, starting from zero. For instance, <code>def g(a, ...) = { a + _1 }</code> and calling with <code>g(1, 2)</code>
     will assign <code>a = 1</code> and <code>_1 = 2</code>, and therefore  <code>a == _*[0]</code>, <code>_*[1] == _1</code>, and etc.
  <p>Any variables referenced inside the function, including the parameters, are local to the function, unless they had been defined outside the function previously.
  <p class="indent">
    <code>def win_pct(wins, losses, ties = 0) = { wins / (wins + ties + losses) @2% }</code>
  </p>
  <p>The value of a function is the value of the last expression evaluated inside it (note that the other statements have the same
     semantics). Functions are referenced by simply invoking their name.  For example: <code>def a = { 1 }</code> gives <code>a = 1</code>, and <code>def b = { a }</code> gives <code>b = 1</code>. Redefining the underlying function will also change the value of
     any functions that use it. So, without changing the definition of <code>b</code>, we can redefine <code>def a={2}</code>
     which will give <code>b = 2</code>.
     <p>A function can be used anywhere a variable can be used (which is pretty much everywhere).
     Functions can also reference loop variables, which are normally not allowed outside loops, and will work properly as long
     as they are only invoked inside a <code>LOOP</code> for which the loop variable is declared. In other words, functions are
     parsed along with all other expressions, but they are stored as parse trees, and are not evaluated until they are invoked.
  <p>One side-effect of the way functions are implemented in combination with the <code>eval</code> function is that objects can be created
     as follows:
  <p class="indent"><code>def stack={ size: 0, array:[] }</code>
  <p>and then
  <p class="indent"><code>t = eval stack</code>
  <p>gives
  <p class="indent"><code>t = { size : 0, array : [ ] }</code>
  <p>as it should. So, you can setup the data structure with <code>def</code>, and make instances of that structure with just
     <code><i>var</i> = eval <i>struct</i></code>.
</div>
<a class="top-link" href="#topofpage">Top</a>
<hr id="Statements" class="sectionsep">
  <h2>Statements</h2>
<div class="cols">
  In addition to the functions and operators listed above, Calc has six different statements which can be used to do
     iterative or repeated calculations, and to select between actions based on the value of an expression. These are the <code>LOOP</code>, <code>WHILE</code>, <code>IF</code>, <code>CASE</code>, <code>LEAVE</code>, and <code>TIMETHIS</code> statements.
     All keywords in these statements have three differently-cased forms: all lower case, all UPPER case, and MixedCase.  For example: <code>loop</code>, <code>LOOP</code>, and <code>Loop</code>.
  <p>The syntax for each is as follows:
  <p class="indent">
     <code>LOOP</code>&nbsp;[ [ <i>loopvar</i> ] ( <code>IN</code> | <code>OVER</code> | <code>&#x2208;</code> ) ] <i>expr</i> [ <code>...</code>, <code>..</code>, or <code>&#x2026;</code> <i>expr</i> ] [ <code>,</code> <i>expr</i> ] <code>{</code> <i>statements or expressions</i> <code>}</code>
  </p>
  <p class="indent">
     <code>WHILE</code>&nbsp;<i>expr</i> <code>{</code> <i>statements or expressions</i> <code>}</code>
  </p>
  <p class="indent">
     <code>IF</code>&nbsp;<i>expr</i>&nbsp;<code>{</code> <i>statements or expressions</i> <code>}</code> [ <code>ELSE {</code> <i>statements or expressions</i> <code>}</code> ]
  </p>
  <p class="indent">
     <code>CASE</code>&nbsp;<i>expr</i> (&nbsp;<code>OF</code> | <code>IN</code> | <code>&#x2208;</code>&nbsp;) <i>selector</i> <code>: {</code> <i>statements or expressions</i> <code>}</code> ( <code>,</code> ) ? ) *
  </p>
  <p>where <i>selector</i> can be any one of the following:
  <ul class="indent">
    <li><i>expr</i> ( <code>,</code> expr ) *</li>
    <li><i>expr</i> <code>...</code> or <code>..</code> or <code>&#x2026;</code> <i>expr</i> [ <code>,</code> <i>expr</i> ]</li>
    <li><code>MATCHES</code> <i>pattern</i></li>
    <li><code>&gt;</code> or <code>&lt;</code>, <code>==</code>, etc. <i>expr</i> (any of the comparison operators)</li>
    <li><code>DEFAULT</code>
  </ul>
  <p class="indent">
    <code>LEAVE</code>&nbsp;<i>expr</i> ?
  </p>
  <p class="indent">
    <code>TIMETHIS</code>&nbsp;( <i>expr</i> <code>,</code> ) ? <code>{</code> <i>statements or expressions</i> <code>}</code>
  </p>
  <p>In all these statements the <code>{</code> and <code>}</code> are not needed if there is only one statement or expression in the block.
  <p>The <code>LOOP</code> statement will repeatedly execute the block of statements based on several conditions:
     <ul><li>if only one expression is listed, the loop will be repeated that number of times, starting from one</li>
         <li>if the <i>expr</i> <code>..</code> <i>expr</i> form is used the loop will be repeated starting from the
             first value, until the second value is reached, incrementing by one each time</li>
         <li>if the <code>,</code> <i>expr</i> is given, the loop is repeated starting from either one, or the first expression value, incrementing by this <i>step</i> expression until the value reaches the maximum.
     </ul>
     In any case, the optional loop variable will be set to the value of the indexing expression for each time through the loop.
     If no loop variable is given, the default variable <code>__</code> will be used (except this is an error for nested loops without explicit variables).
     The loop variable can be referenced inside the statement block, but nowhere else.  A loop variable has the same naming
     rules as a regular variable. Note that inside an interpolated string (inside the loop
     block) the value of a loop variable can be accessed via <code>$<i>var</i></code> or alternatively (and more verbosely) as
     <code>${<i>var</i>}</code>.
     Note that the loop can go in reverse if the step value is negative, and that the start and end values can also be negative
     in this case.
  <p>The <code>WHILE</code> statement will execute the block of statements as long as the <i>expr</i> evaluates to
     <code>true</code> (or the result can be converted to a boolean <code>true</code> value).
     This means the block might not be executed at all if the expression evaluates initially to <code>false</code>.
     If the code inside the statement block requires knowledge of which iteration is currently being executed a regular variable
     should be used (that is, there is no concept of a <i>loopvar</i> as in the <code>LOOP</code> statement).
  <p>The <code>IF</code> statement evaluates the expression and executes the code block only if the expression evaluates to a
     boolean <code>true</code> value. If the optional <code>ELSE</code> block is given and the expression evaluates to
     <code>false</code> that block will be executed instead.
  <p>The <code>CASE</code> statement evaluates the expression (only once) and executes whichever code block has a matching value, or the <code>default</code> block (if given) if nothing else matches. Note: the expression match is made as if by <code>'=='</code> (that is, not a strict comparison), but the individual block values can be any kind of expression or object (including lists, objects, strings, functions, etc.). If a <code>...</code> selector is used, the set of values (with optional step value) will be tested in succession to see if any value matches the case expression. When the <code>matches</code> selector is used, the expression is a regular expression pattern (just like the <code>MATCHES</code> standalone function) against which the case expression is tested. Using a comparison operator with an expression will test the case value against that expression, according to the operator. If the comparison succeeds, the corresponding block will be executed.
  <p>The <code>LEAVE</code> statement will cause early termination of a <code>LOOP</code> or <code>WHILE</code> statement, or a function, with the final value of the statement being the (optional) expression on the <code>LEAVE</code> statement itself, or <code>null</code> if none is given. If a <code>LEAVE</code> statement is executed inside any other block (such as <code>IF</code> or <code>CASE</code>) that containing block is terminated, but the closest containing loop or function is also terminated. If the <code>LEAVE</code> is executed outside any loop or function, the entire script is exited with the optional expression as the final value (and therefore as the process exit code).
  <p>In the normal case, the value of any of these compound statements is the value of the last expression evaluated, inside whatever block is selected, and from the last iteration of that block inside a loop.  But the grammar (for now) does not allow that final value to be used except as the return value from a function.  For instance, consider the following code:
  <p class="indent">
      <code>define strings = { case upper(value) of "ONE": { 1 }, "TWO": { 2 }, "THREE" : { 3.14 }, default: { "many" } }</code><br>
      <code>value='one'; strings</code>
  </p>
    The final value of this function invocation will be the value of whichever block inside the <code>CASE</code> statement is executed, which in this example will be the value <code>1</code>.
  <p class="indent">
      <code style="color:blue;">value = 'one'</code><code style="color:gray;"> &#x21E8; </code><code style="color:green;">"one"</code><br>
      <code style="color:blue;">strings</code><code style="color:gray;"> &#x21E8; </code><code style="color:green;">1</code>
  </p>
  Also consider this code:
  <p class="indent">
      <code>define a={loop _i in 10 {_i}}</code><br>
      <code>a</code>
  </p>
  Which will evaluate as follows:
  <p class="indent">
      <code>Defining function '</code><code style="color:green;">a</code><code>' = </code><code style="color:blue;">{loop _i in 10 {_i}}</code><br>
      <code style="color:blue;">a</code><code style="color:gray;"> &#x21E8; </code><code style="color:green;">10</code>
  </p>
  <p>The <code>timethis</code> statement is a bit different than the others in that it doesn't affect the order of execution
     or change the result, but it can be used for debugging to evaluate the execution time of a piece of code. The optional first expression will be evaluated to a string and used to annotate the timing message. Note: the timing message is not
     affected by the <code>:quiet</code> or <code>:resultsonly</code> settings &mdash; it will always be displayed.
  <p class="indent">
    <code>timethis 'atan', { atan(pi/4) }</code><br>
    <code style="color:blue;">atan (pi / 4)</code><code style="color:grey;"> &#x21E8; </code><code style="color:green;">0.6657737500283538</code><br>
    <code>Elapsed time of "atan" was 0.003862 secs.</code>
  <p>There are many more code examples in the <code>test/files</code> directory of the source distribution.
</div>
<a class="top-link" href="#topofpage">Top</a>
<hr id="Directives" class="sectionsep">
  <h2>Directives</h2>
<div class="cols">
  Various directives can be given within a script or on a separate input line in REPL mode that will affect the operation of the calculator. Some of them allow you to change the options given on the command line, while others are only available from within the script. All the mode-setting directives are also available in the Settings dialog (the <span class="orangebutton">&#x2261;</span> button or <code>F2</code> key) in GUI mode.
  <p>Note that directives do not themselves have values. This means that directives can be nested around expressions in functions (for instance)
     and the function value will be the same as if the directives were not present (well, unless the directives directly affect the calculation,
     as in <code>:rational on</code>).
  <p>The directives can be spelled in several ways (same as for predefined functions): all lower case, all UPPER case, and one or two MixedCase forms. For example: <code>:resultsonly</code>, <code>:RESULTSONLY</code>, <code>:Resultsonly</code>, or <code>:ResultsOnly</code>.
</div>
  <div class="center">
  <table style="margin-left:auto;margin-right:auto;">
    <caption class="tablecap">Available Directives</caption>
    <thead>
    <tr>
      <th style="width:250">Directive</th>
      <th style="width:400">Description</th>
      <th style="width:150">Aliases</th>
    </tr>
    </thead>
    <tbody>
    <tr><td><code>:decimal</code> <i>number_option</i></td><td>Set the precision of all decimal calculations,<br>where <i>number_option</i> can be <code>(</code><i>number</i><code>)</code>, or <i>number</i>, or <i>variable</i><br>to specify the number of decimal digits of precision</td><td><code>:dec</code>, <code>:precision</code>, <code>:prec</code><br>or <code>settings.precision=</code><i>expr</i></td></tr>
    <tr><td><code>:default</code></td><td>Set the default decimal precision (~34 digits) <i>(default)</i></td><td><code>:def</code><br>or <code>settings.precision=34</code></td></tr>
    <tr><td><code>:double</code></td><td>Select the "double" decimal precision (~16 digits)</td><td><code>:dbl</code><br>or <code>settings.precision=16</code></td></tr>
    <tr><td><code>:float</code></td><td>Select "float" decimal precision (~7 digits)</td><td><code>:flt</code><br>or <code>settings.precision=7</code></td></tr>
    <tr><td><code>:unlimited</code></td><td>Set to unlimited decimal precision<br>(some calculations will still limit the precision to avoid<br>"non-terminating decimal expansion" errors)</td><td><code>:unl</code><br>or <code>settings.precision=0</code></td></tr>
    <tr><td><code>:degrees</code></td><td>Do all trigonometric calculations assuming the inputs are in degrees</td><td><code>:deg</code><br>or <code>settings.trigMode='degrees'</code></td></tr>
    <tr><td><code>:radians</code></td><td>Do all calculations assuming inputs are radians <i>(default)</i></td><td><code>:rad</code><br>or <code>settings.trigMode="RADIANS"</code></td></tr>
    <tr><td><code>:binary</code></td><td>Display units in terms of multiples of 1024</td><td><code>:bin</code><br>or <code>settings.units='binary'</code></td></tr>
    <tr><td><code>:si</code></td><td>Display units in terms of multiples of 1000</td><td><code>:ten</code><br>or <code>settings.units='DECIMAL'</code></td></tr>
    <tr><td><code>:mixed</code></td><td>Unit multiplier based on powers of 2 (same as <code>:binary</code>), but with SI suffix <i>(default)</i></td><td><code>:mix</code><br>or <code>settings.units="Mixed"</code></tr>
    <tr><td><code>:clear</code> [ <i>id</i> ( <code>,</code> <i>id</i> ) * ]</td><td>Clear all or only the specified variables (set values to <code>null</code>)</td><td><code>:clr</code></td></tr>
    <tr><td><code>:variables</code> [ <i>id</i> ( <code>,</code> <i>id</i> ) * ]</td><td>Display the values of all or only the specified variables<br>(for a function the definition will be displayed, not the current value)</td><td><code>:variable</code>, <code>:vars</code>, <code>:var</code></td></tr>
    <tr><td><code>:predefined</code> [ <i>id</i> ( <code>,</code> <i>id</i> ) * ]</td><td>Display the current values of all or some of the predefined variables</td><td><code>:predefs</code>, <code>:predef</code></td></tr>
    <tr><td><code>:echo</code> <i>expr</i></td><td>Echo the value of the expression to the output</td><td></td></tr>
    <tr><td><code>:include</code> <i>name_expr</i> ( <code>,</code> <i>charset_expr</i> )</td><td>Include the contents of the file(s) named by <i>name_expr</i>,<br>using the optional <i>charset_expr</i> as the charset</td><td><code>:inc</code>, <code>:load</code>, <code>:open</code>, <code>:lib</code>, <code>:library</code><br><code>:libs</code>, <code>:libraries</code></td></tr>
    <tr><td><code>:save</code> <i>name_expr</i> ( <code>,</code> <i>charset_expr</i> )</td><td>Save all variable values and function definitions in the file, using the optional charset</td><td>&nbsp;</td></tr>
    <tr><td><code>:rational</code> <i>mode_option</i></td><td>Set the rational calculation mode where <i>mode_option</i> is one of:<br><code>on</code>, <code>off</code>, <code>true</code>, <code>false</code>, <code>yes</code>, <code>no</code>, <code>pop</code>, <code>previous</code>, <code>prev</code>, or <i>variable</i><br><i>(default is <code>off</code>, or the value set on the command line)</i></td><td><code>:ration</code>, <code>:fraction</code>, <code>:frac</code>, <code>:fr</code><br>or <code>settings.rationalMode=</code><i>expr</i></td></tr>
    <tr><td><code>:separators</code> <i>mode_option</i></td><td>Set whether to display thousands separators always<br><i>(default is <code>off</code> or value on command line)</i></td><td><code>:separator</code>, <code>:seps</code>, <code>:sep</code><br>or <code>settings.separatorMode=</code><i>expr</i></td></tr>
    <tr><td><code>:ignorecase</code> <i>mode_option</i></td><td>Set whether to ignore case of variable and member names<br><i>(default is <code>off</code> or value on command line)</i></td><td><code>:caseinsensitive</code>, <code>:insensitive</code>,<br><code>:ignore</code>, <code>:case</code>, <code>:ign</code>, <code>:ins</code><br>or <code>settings.ignoreNameCase=</code><i>expr</i></td></tr>
    <tr><td><code>:quotestrings</code> <i>mode_option</i></td><td>Set whether to quote string results<br>(default is <code>on</code> or value on command line)</td><td><code>:quotestring</code>, <code>:quotes</code>, <code>:quote</code><br>or <code>settings.quoteStrings=</code><i>expr</i></td></tr>
    <tr><td><code>:timing</code> <i>mode_option</i></td><td>Set the timing mode (same <i>mode_option</i> choices as for <code>:rational</code>)<br><i>(default is <code>off</code> or the value set on the command line)</i></td><td><code>:time</code></td></tr>
    <tr><td><code>:debug</code> <i>mode_option</i></td><td>Set the debug mode (same <i>mode_option</i> choices as for <code>:rational</code>)<br><i>(default is <code>off</code> or the value set on the command line)</i></td><td><code>:deb</code>, <code>:dbg</code></td></tr>
    <tr><td><code>:resultsonly</code> <i>mode_option</i></td><td>Set the results-only mode<br><i>(default is <code>off</code> or value on command line)</i></td><td><code>:resultonly</code>, <code>:results</code>, <code>:result</code>, <code>:res</code></td></tr>
    <tr><td><code>:quiet</code> <i>mode_option</i></td><td>Set quiet mode<br><i>(default is <code>off</code> or the value on command line)</i></td><td><code>settings.silent=</code><i>expr</i></td></tr>
    <tr><td><code>:silence</code> <i>mode_option</i></td><td>Set "silence directives" mode<br><i>(default is <code>off</code> or the value on the command line)</i></td><td><code>:silencedirectives</code>,<br><code>:silentdirectives</code>,<br><code>:silencedir</code>, <code>:silentdir</code>,<br><code>:silent</code><br>or <code>settings.silenceDirectives=</code><i>expr</i></td></tr>
  </tbody>
  </table>
  </div>
<a class="top-link" href="#topofpage">Top</a>
<hr id="Notes_on_Directives" class="sectionsep">
  <h2>Notes on Directives</h2>
<div class="cols">
  The <i>string</i> argument for the <code>:include</code> directive can be a comma-separated list of file names, with or without
     paths. If a file cannot be read and there is a previous input directory available (set either by a previous file with a path
     given, or by the <code>-inputDir</code> command-line option), that directory is searched for the file. If not found there,
     the string is presumed not to be a file name, and the value of the string itself is processed as an expression. Note: this is
     the same process as used for strings given on the command line.
  <p>For directives which use a <i>mode_option</i>, the available values are as follows:
  <ul><li><code>on</code>, <code>true</code>, or <code>yes</code> = set the mode <code><i>on</i></code>, and save the previous value in the stack</li>
      <li><code>off</code>, <code>false</code>, or <code>no</code> = set the mode <code><i>off</i></code>, and save the previous value</li>
      <li><code>pop</code>, <code>previous</code>, or <code>prev</code> = pop the previous value off the stack and set the mode to
          that previous value</li>
  </ul>
  <p>The initial value is as specified in the table above (always <code><i>off</i></code>, actually), or the value given by
     the corresponding command-line option. If there are no more entries in the stack when the <code>pop</code> option is given
     the value will be set to <code><i>off</i></code>.
  <p>If a string constant of any kind is given as the argument to <code>:echo</code> the surrounding quotes will be removed, and any
     embedded quotes will be unescaped before the message is displayed. Obviously, the same is true for the contents of variables
     (since the values are stored this way).
  <p>The <code>id</code> values for <code>:clear</code>, <code>:variables</code>, and <code>:predefined</code> can be wild-card values, such as
     <code>t*</code> or <code>?a?</code>. Only values matching these patterns will be displayed or cleared.
  <p>The only effect of debug mode is to display the parse tree (in LISP format) before the expression(s) is/are evaluated.
  <p>Timing mode displays the total parsing and execution time (to nanosecond precision on some systems) after the results are displayed.
</div>
<a class="top-link" href="#topofpage">Top</a>
<hr id="Standard_Libraries_of_Functions" class="sectionsep">
  <h2>Standard Libraries of Functions</h2>
<div class="cols">
  <p>There is currently a "standard" library available in the <code>test/files</code> directory of the source code:  <code>"library.calc"</code>.
     Since the contents of this library changes frequently, you should open the current version in the GUI window
     or your favorite text editor to examine the contents before using any of the functions.  There is also a "help_mort" function defined
     that explains the finance-related code.
  <p>At a minimum, the "library" has code to convert to/from our date values and the standard Excel&trade; date values, and do other date-related manipulation.
     There are also some mortgage-related (or "time value of money") functions defined.
  <p>The "library.calc" file is version-stamped at the beginning, so that this library must match the current version of Calc in order to be loaded. The <code>:save</code> also places the current version stamp into the saved file. This mechanism ensures that an older version of Calc will
     not be able to load a new library (since it might depend on features not present in the older version).
  <p>Any file of compatible expressions and directives can be used as a "library". The only requirement is that the name be listed in a <code>-library</code> option on the command line, or included in any other script using <code>:include</code>.
</div>
<a class="top-link" href="#topofpage">Top</a>
<hr id="GUI_Operations" class="sectionsep">
  <h2>GUI Operations</h2>
<div class="cols">
  <p>The GUI window can be opened initially using the "<code>cg</code>" command (or on Windows only, the <code>``</code> command),
     or by entering the <code>gui</code> command in REPL mode. Note that although you can switch from REPL mode to GUI mode, the reverse is not possible. The GUI window looks like this with the focus initially in the "Expressions" field:
</div>
  <div class="center">
  <br><img src="calc_initial.png" alt="Initial GUI screen" width="50%">
  </div>
<div class="cols">
  An expression can be entered on each line, and all will be executed in order when the <span class="redbutton">!</span> button (or the <code>F9</code> key) is pressed, and the results displayed in the "Results" field. The <code>Ctrl+Enter</code> (or <code>&#x2318;Enter</code> on Mac) key will also perform the calculation(s). This behavior can be changed in the Settings dialog to just use the <code>Enter</code> key on any platform.
  <p>This help page will also be displayed by the <span class="bluebutton">?</span> button (or the <code>F1</code> key).
  <p>Note: colors are not currently implemented in the GUI "Results" area, BUT there are dark and light color schemes implemented for the
     main window, so using the command-line options <code>-darkbg</code> or <code>-lightbg</code>, or the "Colors" setting in the GUI "Window Settings" tab will switch between these color schemes.
  <p>Most of the settings available using Directives can be set in the GUI using the Settings dialog (the <span class="orangebutton">&#x2261;</span> button or <code>F2</code> key).
  <p>The calculation settings are also available (read-only) by accesssing the fields in the <code>info.settings</code> object.
</div>
  <div class="center">
  <br><img src="calc_settings.png" alt="GUI Settings screen" width="40%">
      <img src="calc_window_settings.png" alt="GUI Window Settings screen" width="40%">
  </div>
<a class="top-link" href="#topofpage">Top</a>
<hr id="TODO_Items_for_This_Document" class="sectionsep">
  <h2>TODO Items for This Document</h2>
<div class="cols">
  <ul>
    <li>Discussion on NaN, and Infinity</li>
    <li>Expand on GUI operation, including examples</li>
    <li>Document GUI Settings dialog</li>
    <li>List of example programs and the standard library, include examples in this document</li>
    <li>Interactions with Tester (use "mkcanon" and "-nocolors")</li>
    <li>Explain "silent" operation WRT "eval", "loop", interpolated strings, functions</li>
    <li>Notes on colors and the changes with dark and light backgrounds</li>
  </ul>
</div>
<a class="top-link" href="#topofpage">Top</a>
<hr class="sectionsep">

  <footer><br><div class="title-box">Copyright&nbsp;&copy;&nbsp;2020-2022 Roger L. Whitcomb.<br>Licensed under an <a href="https://github.com/rlwhitcomb/utilities/blob/master/LICENSE">MIT</a> license.<br>Last modified: ${__DATE__} at ${__TIME__}</div><br></footer>
</body>
</html>

