<!DOCTYPE html>
<html>
  <head>
    <title>Expression Calculator Help</title>
    <style>
table {
  font-family: helvetica, arial, sans-serif;
  border-collapse: collapse;
}

tr, th, td {
  border: 1px solid #dddddd;
  text-align: center;
  padding: 4px;
}

th {
  background: cornflowerblue;
}

tr:nth-child(even) {
  background-color: #f8f0f0;
}

table code {
   font-size: 130%;
   font-weight: bold;
}

code {
   font-size: 120%;
   font-weight: bold;
}

.underline {
   text-decoration: underline;
}

.redbutton {
   font-family: Verdana, Helvetica, Arial, Sans-Serif;
   font-size: 24pt;
   font-weight: bold;
   color: red;
}

.bluebutton {
   font-family: Verdana, Helvetica, Arial, Sans-Serif;
   font-size: 24pt;
   font-weight: bold;
   color: blue;
}

.innertable tr,
.innertable th,
.innertable td {
   padding: 4px;
   border: none;
}
    </style>
</head>

<body>
  <center>
    <h1>Expression Calculator Help</h1>
    <h3>Version ${Calc.version}, build ${build.number}</h3>
  </center>
  <h3>Introduction</h3>
  <p>An expression calculator that combines (nearly) unlimited precision decimal arithmetic with a rich assortment
       of operators and functions to give the ability to calculate nearly any arithmetic expression.
  <p>As input, the expression calculator can operate on an expression given entirely on the command line (may need to be
       quoted for certain operator characters); in <a href="https://en.wikipedia.org/wiki/Read-eval-print_loop">REPL</a> mode
       (<span class="underline">R</span>ead, <span class="underline">E</span>val, <span class="underline">P</span>rint
        <span class="underline">L</span>oop) where a prompt is displayed, the input lines are evaluated
       one-at-a-time, and the results displayed; from a file for predefined calculations; or inside a simple GUI frame.
  <h3>Command Line</h3>
  <p>The command is assumed to have either the name of a file to process, or an expression to evaluate. There may also be options specified (see the next section). If there is a single value given and there exists a file by that name (possibly in another directory given by the prior <code>-inputdir</code> option), then that file is read, the contents parsed, and all the expressions evaluated. Otherwise, if there are more than one argument on the command line, or the single argument does not name a file, then the command line is taken as a single string, parsed, and then evaluated.
  <h3>Command Line Options</h3>
  <p>Certain options can be given on the command line that affect the operation of the calculator. These options can also be set via the <code>CALC_OPTIONS</code> environment variable. Options specified on the command line will override the defaults set by <code>CALC_OPTIONS</code>, and options given later on the command line override ones given earlier.
  <p>Options are case-insensitive, and maybe be given with <code>-</code>, <code>--</code> or on Windows a <code>/</code>, prefix.
  <center>
  <h3>Command Line Options</h3>
  <table>
    <tr>
      <th width=100>Option</th>
      <th width=400>Description</th>
      <th width=200>Aliases</th>
    </tr>
    <tr><td><code>-nointro</code></td><td>Do not print the introductory message in REPL mode</td><td><code>-noi</code></td></tr>
    <tr><td><code>-intro</code></td><td>Print the introductory message in REPL mode <i>(default)</i></td><td><code>-int</code>, <code>-i</code></td></tr>
    <tr><td><code>-gui</code></td><td>Start immediately in GUI mode</td><td><code>-g</code></td></tr>
    <tr><td><code>-console</code></td><td>Start instead in console mode <i>(default)</i></td><td><code>-cons</code>, <code>-con</code>, <code>-c</code></td></tr>
    <tr><td><code>-debug</code></td><td>Display a debug printout of the syntax tree for every input</td><td><code>-deb</code>, <code>-d</code><br>(or use the <code>:debug on</code> directive)</td></tr>
    <tr><td><code>-nodebug</code></td><td>Don't display the syntax tree for debugging <i>(default)</i></td><td><code>-nodeb</code>, <code>-no</code><br>(or use the <code>:debug off</code> directive)</td></tr>
    <tr><td><code>-colors</code></td><td>Use coloring (on the console) for results and messages <i>(default)</i></td><td><code>-color</code>, <code>-col</code></td></tr>
    <tr><td><code>-nocolors</code></td><td>Do not use coloring in the console</td><td><code>-nocolor</code>, <code>-nocol</code>, <code>-noc</code></td></tr>
    <tr><td><code>-darkbackgrounds</code></td><td>Use colors suitable for a dark console background <i>(default for Windows)</i></td><td><code>-darkbackground</code>, <code>-darkback</code>,<br><code>-darkbg</code>, <code>-dark</code>, <code>-dk</code></td></tr>
    <tr><td><code>-lightbackgrounds</code></td><td>Use colors suitable for a light (white) console background<br><i>(default for non-Windows platforms)</i></td><td><code>-lightbackground</code>, <code>-lightback</code>,<br><code>-lightbg</code>, <code>-light</code>, <code>-lt</code></td></tr>
    <tr><td><code>-timing</code></td><td>Display timing after each input</td><td><code>-time</code>, <code>-t</code><br>(also use the <code>:timing on</code> directive)</td></tr>
    <tr><td><code>-notiming</code></td><td>Do not display timings <i>(default)</i></td><td><code>-notime</code>, <code>-not</code><br>(also use the <code>:timing off</code> directive)</td></tr>
    <tr><td><code>-resultsonly</code></td><td>Do not display the input expression on output, but only the results</td><td><code>-resultonly</code>, <code>-results</code>, <code>-result</code>,<br><code>-res</code>, <code>-r</code><br>(also use <code>:resultsonly on/off</code> directive)</td></tr>
    <tr><td><code>-quiet</code></td><td>Do not display anything (suitable for behind-the-scenes calculations)</td><td><code>-q</code><br>(also use the <code>:quiet on/off</code> directive)</td></tr>
    <tr><td><code>-rational</code></td><td>Do all possible calculations in fraction mode, that is as a ratio of natural numbers<br>(as in <code>1/3</code> instead of <code>0.3333333333333333</code>)</td><td><code>-ration</code>, <code>-rat</code><br>(also use the <code>:rational on</code> directive)</td></tr>
    <tr><td><code>-decimal</code></td><td>Do all calculations as decimal values <i>(default)</i></td><td><code>-dec</code><br>(also use the <code>:rational off</code> directive)</td></tr>
    <tr><td><code>-locale</code> <i>locale_name</i></td><td>Specify the locale to use for messages</td><td><code>-loc</code>, <code>-l</code></td></tr>
    <tr><td><code>-inputdir</code> <i>directory</i></td><td>Specify a default directory for files to be processed</td><td><code>-input</code>, <code>-dir</code></td></tr>
    <tr><td><code>-help</code></td><td>Display this help page</td><td><code>-h</code>, <code>-?</code></td></tr>
    <tr><td><code>-version</code></td><td>Display on the console the version information for the program</td><td><code>-vers</code>, <code>-ver</code>, <code>-v</code></td></tr>
  </table>
  </center>
  <h3>Read, Eval, Print Loop Commands</h3>
  <p>In REPL mode, in addition to expressions and directives (as described below), there are a few commands available to do other
     things, mostly as alternatives to command-line options.  These commands are as follows:
  <center>
  <h3>REPL Commands</h3>
  <table>
    <tr>
      <th width=100>Command</th>
      <th width=300>Description</th>
      <th width=200>Aliases</th>
      <th width=200>Command-Line Equivalent</th>
    </tr>
    <tr><td><code>quit</code></td><td>Exit the program normally.</td><td><code>exit</code>, <code>:quit</code>, <code>:exit</code>,<br><code>:q</code>, <code>:e</code>, <code>:x</code></td><td></td></tr>
    <tr><td><code>help</code></td><td>Display the HTML help page in the browser.</td><td><code>?</code>, <code>:help</code>, <code>:?</code></td><td><code>-help</code></td></tr>
    <tr><td><code>version</code></td><td>Display program version information.</td><td><code>:version</code>, <code>:vers</code>,<br><code>:ver</code>, <code>:v</code></td><td><code>-version</code></td></tr>
    <tr><td><code>gui</code></td><td>Switch to GUI mode</td><td><code>:gui</code>, <code>:g</code></td><td><code>-gui</code></td></tr>
  </table>
  </center>
  <h3>Values, Constants, and Variables</h3>
  <p>The basic building blocks of the expressions implemented here are the basic value types: numbers (either integer or real
     numbers with a fractional part), strings, rational fractions, boolean values, and the <code>null</code> value.
     Numbers can be of arbitrary precision, up to a maximum of 2**32-1 digits. Strings can also be of any length up
     to 2**32-1 characters.
  <p>Simple numeric constants follow the normal rules, and can be expressed as floating point constants (as in <code>1.2e-20</code>).
     The boolean constants are <code>true</code> and <code>false</code> (although they are case-insensitive, so could be spelled
     as <code>True</code> or <code>TRUE</code> as well). The special null constant is simply <code>null</code> (again, case-insensitive).
  <p>Numeric values can also be specified using "kilobyte" notation in one of two forms: multipliers of 1000, or multipliers of 1024 (2**10).
     These multipliers are simply appended to the number to automatically multiply by the given amount. The allowed suffixes are:
     <code>Kb</code>, <code>Mb</code>, <code>Tb</code>, <code>Pb</code>, and <code>Eb</code> which all multiply by their respective
     powers of 10, while <code>Kib</code>, <code>Mib</code>, etc. multiply by the successive multiples of 1024.
  <p>For example:  <code>2Kb = 2000</code>, or <code>4Kib = 4096</code>. Any integer results can be formatted as these type of
     values using the <code>@k</code> or <code>@K</code> formats (the latter giving all upper case results), and depending on the
     <code>:SI</code>, <code>:BINARY</code>, or <code>:MIXED</code> mode directives in effect.
  <p>String constants are of two types: <i>simple</i> strings, constructed using either single- or double-quotes (or "smart"
     quotes: see below), or <i>interpolated</i> strings, which allow the value of expressions (or simple variables) to be
     interpolated into the final string value. These are
     formed using the back-tick character (<code>` . . . `</code>). Interpolation is done using either <code>$<i>variable</i></code>
     or <code>${<i>expression</i>}</code>. To embed a back-tick character in the string, use <code>\`</code>. To embed a backslash,
     therefore, use <code>\\</code>. The normal C/Java escapes such as <code>\t</code> or <code>\n</code> are also available.
     To embed a dollar sign in the string, use <code>$$</code> (but see the note about loop variables below). To embed any Unicode
     codepoint, use <code>\u<i>NNNN</i></code> where <code><i>N</i></code> is a hexadecimal digit, for values up to 0xFFFF, or
     <code>\u{<i>NNNNNN</i>}</code> for codes beyond the Unicode BMP (Basic Multilingual Plane). "Smart" quotes can also be used
     to delimit strings (such as <code>&#x00AB;This is a test&#x00BB;</code>. The ending quote can be included by escaping it.
     When interpolating values into an interpolated string, the string representation of the value is used. If the value is
     <code>null</code> nothing will be added to the string.
  <p>For example, given this code: <code>name="Jack"; `Hi, $name!`</code> the result will be <code>"Hi, Jack!"</code>. For this
     code, however, assuming that the variable <code>junk</code> has not been given a value, we have <code>`Calling $junk...`</code>
     which gives <code>"Calling ..."</code> since the value of <code>junk</code> will be <code>null</code>. Values are
     interpolated with the same value as would be displayed, including any format specifiers, except that string results will
     only be included without the quotes, and without embedded quotes being escaped. Arrays and objects will be inserted
     formatted in a canonical form, again just as they would be displayed. Using an interpolated string inside an expression
     construct inside an interpolated string is not allowed, sadly.
  <p>Note that string results are always finally displayed / returned using double quotes (and double quotes internally escaped),
     regardless of the quoting used to construct them, which includes interpolated strings -- the result is always just a string
     with the values pieced into it. String values are stored in variables without any surrounding quotes, and the escaped
     characters are interpreted and stored as their actual codepoints. This means that string values inserted into interpolated
     strings will be inserted as they are stored (without quotes, etc.).
  <p>Calc reserves the names <code>pi</code> and <code>e</code> for these two fundamental constants. Calc also has the unique 
     ability to recognize the special Unicode fraction characters, and all the alternative characters of <code>&#x1D6D1;</code> to
     also represent their respective values (as in <code>&#x1D6D1;</code> = <code>3.14159...</code> or <code>&#x00BC;</code> = <code>1 / 4</code>).
  <p>Some operators and operations require integer values (such as factorial and the logical bit operations). If the value given is not integral an error will
     be displayed and the calculation aborted. Most of the basic arithmetic operators can operate on rational fractions. The trig,
     log, and power operations do not. Therefore, in rational mode, if an operation returns a decimal value, Calc will attempt
     to convert it to a rational fraction, which may look very strange. Also, in rational mode, fractions will also be maintained
     in canonical form, that is, with the least common denominator.
  <p>Calc has the capability to define and use variables, which are simply named representations of values. Variable names can be
     of any length, but must start with either an underscore (<code>"_"</code>) or a letter, and may contain any combination of
     underscore, letters, and digits.  Note that loop variables (see <code>LOOP</code> statement below) follow the same rules,
     except they must start with a dollar sign (<code>"$"</code>). <em>Note that the predefined constant, function, and statement
     names may NOT be used as variable names.</em> The value of a variable is the value last assigned to it by
     one of the assignment operators.  If no value has been previously assigned the value will be <code>null</code>.
  <p>Values can be grouped into lists of values (an <i>array</i>), or into sets of key/value pairs (an <i>object</i>). Arrays can
     be multi-dimensional. The inside dimensions do not have to be all the same length. The types of values in an array need not
     be homogeneous. And, in fact, the values in an array can be objects as well as simple values. The keys in an object must be
     be either identifiers (same rules as variable names), or strings, but the values can be anything (even other objects, or arrays
     or just simple values).
  <p>To reference values in arrays or objects the following syntax can be used:  <i>variable</i><code>[</code> <i>expr</i> <code>]</code>
     where the expression must evaluate to an integer value (for arrays) or the name of a key (for objects). Members of an object
     can also be referenced by <i>variable</i><code>.</code><i>member</i> (where <i>member</i> is the identifier or string referencing
     a key of one of the key/value pairs in the object).  All this is consistent with JavaScript, or JSON usage (with the slight
     variation that keys can also be identifiers here, while in pure JSON form only strings are allowed as keys).
  <p>Array or object constants can be expressed using this JSON notation, as in <code>{ a: 1, b:2, c:'abc', d:[ 1,3,4 ] }</code> or
     <code>[ 1, 3, 5, { a:false, b:true }, 15, 17 ]</code> or <code>[ [ 1, 3, 5 ], [ 2, 4, 6 ] ]</code> or
     <code>{ first: { "flag": true, "message": 'Testing' }, second: { "flag":true, "message": 'Working' } }</code>.
     Note that string object keys (as in <code>"key"</code> do NOT reference the same element as an identifier key (as in
     <code>key</code>).  Therefore, this is legal: <code>value = { "flag": true, flag: 'Red' }</code> and the elements are
     accessed as <code>value."flag"</code> and <code>value.flag</code>.
  <h3>Modes and Precision</h3>
  <p>Calc can do essentially arbitrary precision arithmetic. It can also do arithmetic on rational fractions (as in <code>1/4 + 1/2 = 3/4</code>). The default setting is to do decimal arithmetic, but this can adjust using either command line options (see
      <code>-rational</code> and <code>-decimal</code> above), or using directives during execution.  The default precision for
      all calculations 128-bit arithmetic, or approximately 34 digits of decimal precision. The precision can be adjusted up to
      12,500 (due to somewhat arbitrary restrictions on our calculation of the value of <code>&#x1D6D1;</code>) using any of
      several directives.
  <p>Trigonometric calculations are, by default, done in radians, but this can be changed to use degrees using a directive.
  <h3>Formats</h3>
  <p>The results of most operations can be displayed using alternative formats for better comprehension. To specify an alternative
     format, append <code>@<i>format</i></code> to the expression. In most cases, the uppercase equivalent can be given, which will
     do the same formatting, except mapping the result to UPPER case as well. The exceptions are <code>@f</code> which formats the
     result as a fraction, while <code>@F</code> formats the result as a proper fraction (as in <code>15/8@F = 1 7/8</code>),
     <code>@O</code> or <code>@D</code> which would make no difference in the outputs, and <code>@J</code> which doesn't make sense
     given the output could have strings which shouldn't be case-shifted.
  <p>The available formats are:
  <center>
    <h3>Formats</h3>
    <table>
      <tr>
        <th width="100">Format</th>
        <th width="200">Description</th>
      </tr>
      <tr><td><code>@h</code></td><td>Display as a time value (hours:minutes:seconds.millis)<br><em>NOT IMPLEMENTED YET</em></td></tr>
      <tr><td><code>@d</code></td><td>Primarily for rational mode -- format the result instead as a decimal value</td></tr>
      <tr><td><code>@f</code></td><td>For decimal mode, format the result as a rational fraction</td></tr>
      <tr><td><code>@F</code></td><td>Format as a proper fraction (with possible integer portion)</td></tr>
      <tr><td><code>@j</code></td><td>Format the result as a "pretty printed" JSON result<br>(multiple lines with indents)</td></tr>
      <tr><td><code>@x</code></td><td>For integers and strings, format in hexadecimal form</td></tr>
      <tr><td><code>@o</code></td><td>For integers and strings, format in octal form</td></tr>
      <tr><td><code>@b</code></td><td>For integers and strings, format in binary form</td></tr>
      <tr><td><code>@k</code></td><td>Use kilobyte, megabyte, etc. notation for the value</td></tr>
      <tr><td><code>@</code>[<i>nn</i>]<code>%</code></td><td>Format as a percentage, optionally rounding to <i>nn</i> digits</td></tr>
    </table>
  </center>
  <h3>Available Operators</h3>
  <p>There are a wide variety of arithmetic and logical operators available, as well as a number of common arithmetic functions that can be used.
  <center>
  <h3>Operators and Precedence</h3>
  <table>
    <tr>
      <th width=60>Level</th>
      <th width=220>Operator</th>
      <th width=300>Description</th>
      <th width=120>Associativity</th>
    </tr>
    <tr><td>28</td>
      <td><code>pi</code>, <code>&#x1D6D1;</code>, <code>e</code>, or <code>&#x2107;</code><br>
          <code>true</code> or <code>false</code><br>
          <code>null</code><br>
          <code>&#x00BC;</code>, <code>&#x00BD;</code>, <code>&#x00BE;</code>, <code>&#x2150;</code>, <code>&#x215E;</code>, etc.</td>
      <td>the fundamental constants <code>&#x1D6D1;</code> and <code>e</code><br>
          the <code>boolean</code> values<br>
          the <code>null</code> (empty) value<br>
          any of the Unicode fraction values</td><td>- none -</td></tr>
    <tr><td>27</td><td><code>{ }</code></td><td>define an object</td><td>left to right</td></tr>
    <tr><td>26</td><td><code>[ ]</code></td><td>define an array,<br>or access elements of<br>an array, string, or object</td><td>left to right</td></tr>
    <tr><td>25</td><td>.</td><td>access an object member</td><td>left to right</td></tr>
    <tr><td>24</td><td><code>( </code><i>expr</i><code> )</code></td><td>group an expression</td><td>- none -</td></tr>
    <tr><td>23</td><td><i>expr</i>&nbsp;<code>++</code><br><i>expr</i>&nbsp;<code>--</code></td><td>post increment/decrement</td><td>- none -</td></tr>
    <tr><td>22</td><td><code>++</code>&nbsp;<i>expr</i><br><code>--</code>&nbsp;<i>expr</i></td><td>pre increment/decrement</td><td>right to left</td></tr>
    <tr><td>21</td><td><code>+</code>&nbsp;<i>expr</i><br><code>-</code>&nbsp;<i>expr</i></td><td>posate/negate a value</td><td>right to left</td></tr>
    <tr><td>20</td><td><code>!</code> or <code>&#x00AC;</code>&nbsp;<i>expr</i></td><td>boolean NOT</td><td>right to left</td></tr>
    <tr><td>19</td><td><code>~</code>&nbsp;<i>expr</i></td><td>bitwise NOT</td><td>right to left</td></tr>
    <tr><td>18</td><td><i>expr</i>&nbsp;<code>!</code></td><td>factorial</td><td>left to right</td></tr>
    <tr><td>17</td><td><i>expr<sub>1</sub></i>&nbsp;<code> ** </code>&nbsp;<i>expr<sub>2</sub></i></td><td>expr<sub>1</sub> to expr<sub>2</sub> power</td><td>right to left</td></tr>
    <tr><td>16</td><td>
        <i>expr</i>&nbsp;<code> * </code>or<code> &times; </code>or<code> &#x2217; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> / </code>or<code> &divide; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> % </code>&nbsp;<i>expr</i></td>
        <td>multiply/divide/remainder</td><td>left to right</td></tr>
    <tr><td>15</td><td>
        <i>expr</i>&nbsp;<code> + </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> - </code>&nbsp;<i>expr</i></td>
        <td>add/subtract</td><td>left to right</td></tr>
    <tr><td>14</td><td>
        <i>expr</i>&nbsp;<code> &gt;&gt;&gt; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &gt;&gt; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &lt;&lt; </code>&nbsp;<i>expr</i></td>
        <td>bit shift operations</td><td>left to right</td></tr>
    <tr><td>13</td><td colspan="2">
        <table class="innertable">
            <tr><td width="220"><code>ABS</code>&nbsp;<i>expr</i></td><td width="300">absolute value</td></tr>
            <tr><td><code>SIN</code>&nbsp;<i>expr</i></td><td>sine</td></tr>
            <tr><td><code>COS</code>&nbsp;<i>expr</i></td><td>cosine</td></tr>
            <tr><td><code>TAN</code>&nbsp;<i>expr</i></td><td>tangent</td></tr>
            <tr><td><code>ASIN</code>&nbsp;<i>expr</i></td><td>sine<sup>-1</sup></td></tr>
            <tr><td><code>ACOS</code>&nbsp;<i>expr</i></td><td>cosine<sup>-1</sup></td></tr>
            <tr><td><code>ATAN</code>&nbsp;<i>expr</i></td><td>tangent<sup>-1</sup></td></tr>
            <tr><td><code>ATAN2</code>&nbsp;<i>e<sub>y</sub></i><code>,</code>&nbsp;<i>e<sub>x</sub></i></td><td>the angle <i>theta</i> from converting<br>rectangular (x,y) to polar (r,<i>theta</i>) coordinates</td></tr>
            <tr><td><code>SINH</code>&nbsp;<i>expr</i></td><td>hyperbolic sine</td></tr>
            <tr><td><code>COSH</code>&nbsp;<i>expr</i></td><td>hyperbolic cosine</td></tr>
            <tr><td><code>TANH</code>&nbsp;<i>expr</i></td><td>hyperbolic tangent</td></tr>
            <tr><td><code>SQRT</code> or <code>&radic;</code>&nbsp;<i>expr</i></td><td>square root</td></tr>
            <tr><td><code>CBRT</code> or <code>&#x221B;</code>&nbsp;<i>expr</i></td><td>cube root</td></tr>
            <tr><td><code>LOG</code>&nbsp;<i>expr</i></td><td>log base 10</td></tr>
            <tr><td><code>LN2</code>&nbsp;<i>expr</i></td><td>log base 2</td></tr>
            <tr><td><code>LN</code>&nbsp;<i>expr</i></td><td>natural log (base e)</td></tr>
            <tr><td><code>SIGNUM</code>&nbsp;<i>expr</i></td><td>sign (&lt; 0 = -1, 0 = 0, &gt; 0 = +1)</td></tr>
            <tr><td><code>LENGTH</code>&nbsp;<i>expr</i></td><td>length of string, array, or object</td></tr>
            <tr><td><code>SCALE</code>&nbsp;<i>expr</i></td><td>scale of number</td></tr>
            <tr><td><code>ROUND</code>&nbsp;<i>expr</i><code>,</code>&nbsp;<i>expr</i></td><td>round value to given places</td></tr>
            <tr><td><code>ISPRIME</code>&nbsp;<i>expr</i></td><td>is the value a prime number</td></tr>
            <tr><td><code>GCD</code>&nbsp;<i>expr</i><code>,</code>&nbsp;<i>expr</i></td><td>greatest common divisor</td></tr>
            <tr><td><code>LCM</code>&nbsp;<i>expr</i><code>,</code>&nbsp;<i>expr</i></td><td>least common multiple</td></tr>
            <tr><td><code>MAX</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>maximum value</td></tr>
            <tr><td><code>MIN</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>minimum value</td></tr>
            <tr><td><code>SUMOF</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>sum of all the values</td></tr>
            <tr><td><code>PRODUCTOF</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>product of all the values</td></tr>
            <tr><td><code>JOIN</code>&nbsp;<i>expr</i> (&nbsp;<code>,</code> <i>expr</i>&nbsp;) *</td><td>join strings</td></tr>
            <tr><td><code>FIB</code>&nbsp;<i>expr</i></td><td>Fibonacci number</td></tr>
            <tr><td><code>Bn</code>&nbsp;<i>expr</i></td><td>Bernoulli number</td></tr>
            <tr><td><code>FRAC</code>&nbsp;<i>num</i><code>,</code>&nbsp;<i>den</i><br>or <i>int</i><code>,</code><i>num</i><code>,</code><i>den</i><br>or <i>string</i></td><td>construct a rational fraction</td></tr>
            <tr><td><code>EVAL</code>&nbsp;<i>expr</i></td><td>evaluate the string result of <i>expr</i></td></tr>
            <tr><td><code>FACTORS</code>&nbsp;<i>expr</i></td><td>calculate all the factors of the number</td></tr>
            <tr><td><code>PFACTORS</code>&nbsp;<i>expr</i></td><td>calculate the prime factors of the number</td></tr>
        </table></td>
        <td>left to right</td></tr>
    <tr><td>12</td><td><i>expr</i>&nbsp;<code> &lt;=&gt; </code>&nbsp;<i>expr</i><td>returns <code>-1</code> if expr &lt; 0<br><code>0</code> if expr = 0<br><code>+1</code> if expr &gt; 0</td><td>left to right</td></tr>
    <tr><td>11</td><td>
        <i>expr</i>&nbsp;<code> &lt;= </code>or<code> &#x2264; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &lt; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &gt;= </code>or<code> &#x2265; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &gt; </code>&nbsp;<i>expr</i></td>
        <td>comparison</td><td>left to right</td></tr>
    <tr><td>10</td><td>
        <i>expr</i>&nbsp;<code> === </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> !== </code>or<code> &#x2262; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> == </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> != </code>or<code> &#x2260; </code>&nbsp;<i>expr</i></td>
        <td>strict equality/inequality<br>equality/inequality</td><td>left to right</td></tr>
    <tr><td>9</td><td>
        <i>expr</i>&nbsp;<code> &amp; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> ~&amp; </code>or<code> &#x22BC; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> &amp;~ </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> ^ </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> ~^ </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> | </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> ~| </code>or<code> &#x22BD; </code>&nbsp;<i>expr</i></td>
        <td>bitwise AND<br>NOT AND (or NAND)<br>AND NOT<br>exclusive OR<br>NOT exclusive OR<br>bitwise OR<br>NOT OR (or NOR)</td><td>left to right</td></tr>
    <tr><td>8</td><td>
        <i>expr</i>&nbsp;<code> &amp;&amp; </code>or<code> &#x2227; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> || </code>or<code> &#x2228; </code>&nbsp;<i>expr</i><br>
        <i>expr</i>&nbsp;<code> ^^ </code>or<code> &#x22BB; </code>&nbsp;<i>expr</i></td>
        <td>logical AND,<br>OR,<br>or exclusive OR</td><td>left to right</td></tr>
    <tr><td>7</td><td><i>expr</i>&nbsp;<code> ? </code>&nbsp;<i>expr</i>&nbsp;<code> : </code>&nbsp;<i>expr</i></td><td>select one or the other value</td><td>right to left</td></tr>
    <tr><td>6</td><td><i>var</i>&nbsp;<code> = </code>&nbsp;<i>expr</i></td><td>assign expr value to variable</td><td>right to left</td></tr>
    <tr><td>5</td><td><i>var</i>&nbsp;<code> **= </code>&nbsp;<i>expr</i></td><td>var to expr power, assign to var</td><td>right to left</td></tr>
    <tr><td>4</td><td>
        <i>var</i>&nbsp;<code> *= </code>or<code> &times;= </code>or<code> &#x2217;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> /= </code>or<code> &divide;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> %= </code>&nbsp;<i>expr</i></td>
        <td>perform the operation, reassign to variable</td><td>right to left</td></tr>
    <tr><td>3</td><td>
        <i>var</i>&nbsp;<code> += </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> -= </code>&nbsp;<i>expr</i></td>
        <td>result assigned to variable again</td><td>right to left</td></tr>
    <tr><td>2</td><td>
        <i>var</i>&nbsp;<code> &gt;&gt;&gt;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> &gt;&gt;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> &lt;&lt;= </code>&nbsp;<i>expr</i></td>
        <td>perform the shift, reassign to variable</td><td>right to left</td></tr>
    <tr><td>1</td><td>
        <i>var</i>&nbsp;<code> &amp;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> ~&amp;= </code>or<code> &#x22BC;= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> &amp;~= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> ^= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> ~^= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> |= </code>&nbsp;<i>expr</i><br>
        <i>var</i>&nbsp;<code> ~|= </code>or<code> &#x22BD;= </code>&nbsp;<i>expr</i></td>
        <td>perform the bit op, reassign to variable</td><td>right to left</td></tr>
  </table>
  </center>
  <h3>Statements</h3>
  <p>In addition to the functions and operators listed above, Calc has three different statements which can be used to do
     iterative or repeated calculations, and to select between actions based on the value of an expression. These are the <code>LOOP</code>, <code>WHILE</code> and <code>IF</code> statements.
  <p>The syntax for each is as follows:<br>
     <code>LOOP</code>&nbsp;[ <i>loopvar</i> <code>IN</code> ] <i>expr</i> [ <code>..</code> or <code>&#x2026;</code> <i>expr</i> ] [ <code>,</code> <i>expr</i> ] <code>{</code> <i>statements or expressions</i> <code>}</code><br>
     <code>WHILE</code>&nbsp;<i>expr</i> <code>{</code> <i>statements or expressions</i> <code>}</code><br>
     <code>IF</code>&nbsp;<i>expr</i>&nbsp;<code>{</code> <i>statements or expressions</i> <code>}</code> [ <code>ELSE {</code> <i>statements or expressions</i> <code>}</code> ]
  <p>The <code>LOOP</code> statement will repeatedly execute the block of statements based on several conditions:
     <ul><li>if only one expression is listed, the loop will be repeated that number of times, starting from one</li>
         <li>if the <i>expr</i> <code>..</code> <i>expr</i> form is used the loop will be repeated starting from the
             first value, until the second value is reached, incrementing by one each time</li>
         <li>if the <code>,</code> <i>expr</i> is given, the loop is repeated starting from either one, or the first expression value, incrementing by this <i>step</i> expression until the value reaches the maximum.
     </ul>
     In any case, the optional loop variable will be set to the value of the indexing expression for each time through the loop.
     The loop variable can be referenced inside the statement block, but nowhere else.  A loop variable has the same naming
     rules as a regular variable, but must start with <code>$</code>. Note that inside an interpolated string (inside the loop
     block) the value of a loop variable can be accessed via <code>$$i</code> or alternatively (and more verbosely) as
     <code>${$i}</code>.
     Note that the loop can go in reverse if the step value is negative, and that the start and end values can also be negative
     in this case.
  <p>The <code>WHILE</code> statement will execute the block of statements as long as the <i>expr</i> evaluates to
     <code>true</code> (or the result can be converted to a boolean <code>true</code> value).
     This means the block might not be executed at all if the expression evaluates initially to <code>false</code>.
     If the code inside the statement block requires knowledge of which iteration is currently being executed a regular variable
     should be used (that is, there is no concept of a <i>loopvar</i> as in the <code>LOOP</code> statement).
  <p>The <code>IF</code> statement evaluates the expression and executes the code block only if the expression evaluates to a
     boolean <code>true</code> value. If the optional <code>ELSE</code> block is given and the expression evaluates to
     <code>false</code> that block will be executed instead.
  <h3>Functions</h3>
  <p>In addition to the predefined functions above, Calc allows new functions to be defined (unfortunately they do not support
     function parameters yet) that can be used repeatedly without having to retype the same expression.
  <p>The syntax for a function definition is:<br>
     <code>def</code>&nbsp;<i>name</i> <code>= {</code> <i>expressions or statements</i> <code>}</code>
  <p>The value of a function is the value of the last expression evaluated inside it (note that the other statements have the same
     semantics). Functions are referenced by simply invoking their name.  For example: <code>def a = { 1 }</code> gives <code>a = 1</code>, and <code>def b = { a }</code> gives <code>b = 1</code>. Redefining the underlying function will also change the value of
     any functions that use it. So, without changing the definition of <code>b</code>, we can redefine <code>def a={2}</code>
     which will give <code>b = 2</code>.
     <p>A function can be used anywhere a variable can be used (which is pretty much everywhere).
     Functions can also reference loop variables, which are normally not allowed outside loops, and will work properly as long
     as they are only invoked inside a <code>LOOP</code> for which the loop variable is declared. In other words, functions are
     parsed along with all other expressions, but they are stored as parse trees, and are not evaluated until they are invoked.
  <h3>Directives</h3>
  <p>Various directives can be given within a script or on a separate input line in REPL mode that will affect the operation of the calculator. Some of them allow you to change the options given on the command line, while others are only available from within the script.
  <center>
  <h3>Available Directives</h3>
  <table>
    <tr>
      <th width=100>Directive</th>
      <th width=300>Description</th>
      <th width=100>Aliases</th>
    </tr>
    <tr><td><code>:decimal</code> <i>number_option</i></td><td>Set the precision of all decimal calculations,<br>where <i>number_option</i> can be <code>(</code><i>number</i><code>)</code>, or <i>number</i>, or <i>variable</i><br>to specify the number of decimal digits of precision</td><td><code>:dec</code>, <code>:precision</code>, <code>:prec</code></td></tr>
    <tr><td><code>:default</code></td><td>Set the default decimal precision (~34 digits) <i>(default)</i></td><td><code>:def</code></td></tr>
    <tr><td><code>:double</code></td><td>Select the "double" decimal precision (~16 digits)</td><td><code>:dbl</code></td></tr>
    <tr><td><code>:float</code></td><td>Select "float" decimal precision (~7 digits)</td><td><code>:flt</code></td></tr>
    <tr><td><code>:unlimited</code></td><td>Set to unlimited decimal precision (which for some calculations will result in errors)</td><td><code>:unl</code></td></tr>
    <tr><td><code>:degrees</code></td><td>Do all trigonometric calculations assuming the inputs are in degrees</td><td><code>:deg</code></td></tr>
    <tr><td><code>:radians</code></td><td>Do all calculations assuming inputs are radians <i>(default)</i></td><td><code>:rad</code></td></tr>
    <tr><td><code>:binary</code></td><td>Display units in terms of multiples of 1024</td><td><code>:bin</code></td></tr>
    <tr><td><code>:si</code></td><td>Display units in terms of multiples of 1000</td><td><code>:ten</code></td></tr>
    <tr><td><code>:mixed</code></td><td>Unit multiplier based on powers of 2 (same as <code>:binary</code>), but with SI suffix <i>(default)</i></td><td><code>:mix</code></tr></tr>
    <tr><td><code>:clear</code> [ <i>id</i> ( <code>,</code> <i>id</i> ) * ]</td><td>Clear all or only the specified variables (set values to <code>null</code>)</td><td><code>:clr</code></td></tr>
    <tr><td><code>:echo</code> <i>expr</i></td><td>Echo the value of the expression to the output</td><td></td></tr>
    <tr><td><code>:include</code> <i>string</i></td><td>Include the file(s) named by <i>string</i></td><td></td></tr>
    <tr><td><code>:rational</code> <i>mode_option</i></td><td>Set the rational calculation mode where <i>mode_option</i> is one of:<br><code>on</code>, <code>off</code>, <code>true</code>, <code>false</code>, <code>pop</code>, <code>previous</code>, <code>prev</code>, or <i>variable</i><br><i>(default is <code>off</code>, or the value set on the command line)</i></td><td><code>:ration</code>, <code>:fraction</code>, <code>:frac</code></td></tr>
    <tr><td><code>:timing</code> <i>mode_option</i></td><td>Set the timing mode (same <i>mode_option</i> choices as for <code>:rational</code>)<br><i>(default is <code>off</code> or the value set on the command line)</i></td><td><code>:time</code></td></tr>
    <tr><td><code>:debug</code> <i>mode_option</i></td><td>Set the debug mode (same <i>mode_option</i> choices as for <code>:rational</code>)<br><i>(default is <code>off</code> or the value set on the command line)</i></td><td><code>:deb</code></td></tr>
    <tr><td><code>:resultsonly</code> <i>mode_option</i></td><td>Set the results-only mode<br><i>(default is <code>off</code> or value on command line)</i></td><td><code>:res</code>, <code>:result</code>, <code>:results</code>, <code>:resultonly</code></td></tr>
    <tr><td><code>:quiet</code> <i>mode_option</i></td><td>Set quiet mode<br><i>(default is <code>off</code> or the value on command line)</i></td><td></td></tr>
  </table>
  </center>
  <h3>Notes on Directives</h3>
  <p>The <i>string</i> argument for the <code>:include</code> directive can be a comma-separated list of file names, with or without
     paths. If a file cannot be read and there is a previous input directory available (set either by a previous file with a path
     given, or by the <code>-inputDir</code> command-line option) then that directory is searched for the file. If not found there,
     then the string is presumed not to be a file name, and the value of the string itself is processed as an expression. Note: this is
     the same process as used for strings given on the command line.
  <p>For directives which use a <i>mode_option</i>, the available values are as follows:
  <ul><li><code>on</code> or <code>true</code> = set the mode <code><i>on</i></code>, and save the previous value in the stack</li>
      <li><code>off</code> or <code>false</code> = set the mode <code><i>off</i></code>, and save the previous value</li>
      <li><code>pop</code>, <code>previous</code>, or <code>prev</code> = pop the previous value off the stack and set the mode to
          that previous value</li>
  </ul>
  <p>The initial value is as specified in the table above (always <code><i>off</i></code>, actually), or the value given by
     the corresponding command-line option. If there are no more entries in the stack when the <code>pop</code> option is given then
     the value will be set to <code><i>off</i></code>.
  <p>If a string constant of any kind is given as the argument to <code>:echo</code> the surrounding quotes will be removed, and any
     embedded quotes will be unescaped before the message is displayed. Obviously, the same is true for the contents of variables
     (since the values are stored this way).
  <p>The only effect of debug mode is to display the parse tree (in LISP format) before the expression(s) is/are evaluated.
  <p>Timing mode displays the total parsing and execution time (to nanosecond precision on some systems) after the results are displayed.
  <h3>TODO Items for This Document</h3>
  <ul>
    <li>More examples of KB input and output, with the modes explained</li>
    <li>Exceptions to decimal precision (i.e., for trig, log), and also in doing factorial? or others that don't respect the precision, also limits on pi/e digits</li>
    <li>Discussion on NaN, and Infinity</li>
    <li>Explain "join" operation with 1, 2, 3+ values</li>
    <li>Expand on GUI operation, including examples</li>
    <li>List of example programs, include examples in this document</li>
    <li>Interactions with Tester (use "mkcanon" and "-nocolors")</li>
    <li>Explain "silent" operation WRT "eval", "loop", interpolated strings, functions</li>
    <li>Notes on colors and the changes with dark and light backgrounds</li>
  </ul>
  <h3>GUI operations</h3>
  <p>The GUI window can be opened using the "<code>cg</code>" command (or on Windows only, the <code>``</code> command), or by entering the <code>gui</code> command in REPL mode.  The following window will be presented with the focus initially in the top "Expression" field.
  <center>
  <br><img src="calc_initial.png" alt="Initial GUI screen" width="50%"/>
  </center>
  <p>An expression can be entered on each line, and all will be executed in order when the <span class="redbutton">!</span> button (or the <code>F9</code> key) is pressed, and the results displayed in the "Result" field. The Ctrl-Enter (or Cmd-Enter on Mac) key will also perform the calculation(s).
  <p>This help page will also be displayed by the <span class="bluebutton">?</span> button (or the <code>F1</code> key).

  <footer><br><br><center>&copy;&nbsp;Copyright 2021 Roger L. Whitcomb.&nbsp;&nbsp;Licensed under an <a href="https://github.com/rlwhitcomb/utilities/blob/master/LICENSE">MIT</a> license.<br>Last modified: ${__DATE__} at ${__TIME__}</center><br><br></footer>
</body>
</html>

