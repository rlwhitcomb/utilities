<?xml version="1.0" encoding="UTF-8"?>

<!-- ==========================================================================

	The MIT License (MIT)

	Copyright (c) 2020-2022 Roger L. Whitcomb.

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.

		"Ant" build file for the utility code.

	Change History:
	    18-Sep-2020 (rlwhitcomb)
		Add "History" starting from now; reformat and clean up target
		descriptions. Added "matches" directory today also.
	    22-Sep-2020 (rlwhitcomb)
		Add DumpManifest and MD5 to the .jar file for convenience.
	    02-Oct-2020 (rlwhitcomb)
		Add OS also to everywhere.
	    02-Oct-2020 (rlwhitcomb)
		Add Lists to the .jar file.
	    14-Oct-2020 (rlwhitcomb)
		Add the .../compare directory.
	    06-Nov-2020 (rlwhitcomb)
		Add the external and Ant jars to the "javadoc" classpath.
	    06-Nov-2020 (rlwhitcomb)
		Add the new tests of Options to the "test" target.
	    09-Nov-2020 (rlwhitcomb)
		New test of InitializationTask.
	    13-Nov-2020 (rlwhitcomb)
		Add DynamicArray and DynArrayTest.
	    13-Nov-2020 (rlwhitcomb)
		Make "all" do everything from "clean" to "test".
	    13-Nov-2020 (rlwhitcomb)
		Add MatchesTest to the "test" target.
	    13-Nov-2020 (rlwhitcomb)
		Add "diff_match_patch" code to the mix.
	    13-Nov-2020 (rlwhitcomb)
		Add GZip and GUnzip classes.
	    18-Nov-2020 (rlwhitcomb)
		Add FixPath.
	    24-Nov-2020 (rlwhitcomb)
		Copy java wrapper files along with .jar file.
	    03-Dec-2020 (rlwhitcomb)
		New tests of NumericUtil methods.
	    04-Dec-2020 (rlwhitcomb)
		Add "calc" directory, wrappers, and Antlr build.
	    05-Dec-2020 (rlwhitcomb)
		Copy external jars to UTILITIES_HOME.
	    07-Dec-2020 (rlwhitcomb)
		Add Javadoc window title. Only copy the antlr runtime .jar file
		into the install directory.
	    09-Dec-2020 (rlwhitcomb)
		Add message while generating grammar.
	    11-Dec-2020 (rlwhitcomb)
		Java 14 doesn't support -html4 or -frames options for Javadoc
		Don't regenerate grammar if it is up-to-date already.
	    11-Dec-2020 (rlwhitcomb)
		Add extra files for Calc GUI to the .jar file.
	    11-Dec-2020 (rlwhitcomb)
		Add "build.properties" to the .jar file.
	    16-Dec-2020 (rlwhitcomb)
		Add "Sleep".
	    19-Dec-2020 (rlwhitcomb)
		Add debug setting for javac. Add the Calc script to "test".
	    21-Dec-2020 (rlwhitcomb)
		Use "version.properties" instead of "build.properties" for
		individual title/version information.
	    21-Dec-2020 (rlwhitcomb)
		Fix Javadoc error when building on Java 14 pointing to Java 8 API.
	    21-Dec-2020 (rlwhitcomb)
		Rename the MD5 wrappers to lowercase.
	    22-Dec-2020 (rlwhitcomb)
		Set the build date and time in the "build.number" file.
		Add all the build properties files to the .jar file.
		Use the "debug.build" setting as the debug flag.
	    22-Dec-2020 (rlwhitcomb)
		Add the former "pivot" code to our .jar file.
	    23-Dec-2020 (rlwhitcomb)
		Don't need to preprocess Environment any more.
	    24-Dec-2020 (rlwhitcomb)
		Rearrange install targets for easier testing.
	    30-Dec-2020 (rlwhitcomb)
		Add "encode" and "decode" to the wrapper scripts.
	    30-Dec-2020 (rlwhitcomb)
		Separate target for grammar processing.
	    30-Dec-2020 (rlwhitcomb)
		Fix Antlr command line arguments for Windows.
	    30-Dec-2020 (rlwhitcomb)
		Fix wrapper files for Windows.
	    30-Dec-2020 (rlwhitcomb)
		More wrapper files.
	    31-Dec-2020 (rlwhitcomb)
		Use latest git commit id as the build number.
	    05-Jan-2021 (rlwhitcomb)
		Add second test of Calc.
	    05-Jan-2021 (rlwhitcomb)
		Allow manual setting of "git.commit.id" in the "build.properties" file.
	    08-Jan-2021 (rlwhitcomb)
		Fail the build on Antlr error.
	    08-Jan-2021 (rlwhitcomb)
		Add the new "e10" file to the Calc tests.
	    11-Jan-2021 (rlwhitcomb)
		Add the new "e12" file to the Calc tests.
	    12-Jan-2021 (rlwhitcomb)
		Add the new "e_trig" file to the Calc tests.
	    13-Jan-2021 (rlwhitcomb)
		Direct test output to a file; new "purge-logs" task.
	    13-Jan-2021 (rlwhitcomb)
		Add "standard" Version class.
	    13-Jan-2021 (rlwhitcomb)
		Add some missing files and directories in various places.
	    18-Jan-2021 (rlwhitcomb)
		Add mortgage payment examples for Calc.
	    18-Jan-2021 (rlwhitcomb)
		New text resources for Calc.
	    21-Jan-2021 (rlwhitcomb)
		Move the tests from "test.xml" into "test" target here.
	    21-Jan-2021 (rlwhitcomb)
		Add "tester" directory, and "tester" wrappers.
		Change most unit tests to use Tester.
		Lists has moved to the "util" package.
	    25-Jan-2021 (rlwhitcomb)
		Add "-dir" parameter to Tester command line.
	    26-Jan-2021 (rlwhitcomb)
		Add "mkcanon" script.
	    27-Jan-2021 (rlwhitcomb)
		Add HTML help for Calc.
	    27-Jan-2021 (rlwhitcomb)
		First attempt at cleaning out leftover tester files on "purge-logs".
	    01-Feb-2021 (rlwhitcomb)
		Better attempt at identifying the temp directory.
	    08-Feb-2021 (rlwhitcomb)
		Let "purge-logs" keep only the last two weeks, instead of a month.
	    10-Feb-2021 (rlwhitcomb)
		Add "touch" target, invoked during "update" so that any files that should
		be preprocessed anew will get a new timestamp.
	    11-Feb-2021 (rlwhitcomb)
		Figure out if "anttasks.jar" needs to be updated on every startup.
	    16-Feb-2021 (rlwhitcomb)
		Add "utilities*.log" to the list of stuff deleted by "purge-logs".
	    23-Feb-2021 (rlwhitcomb)
		Add "Gmt" and related wrappers.
	    23-Feb-2021 (rlwhitcomb)
		Add "Head" and related wrappers.
	    24-Feb-2021 (rlwhitcomb)
		Do a compare after the "preproc" step to test that the preprocessor still works.
	    24-Feb-2021 (rlwhitcomb)
		Link our Javadoc to the online Pivot and Antlr docs as well as the JDK docs.
	    25-Feb-2021 (rlwhitcomb)
		Add "environ" wrapper.
	    25-Feb-2021 (rlwhitcomb)
		Need to do the preproc file compare ignoring line-ending differences.
	    03-Mar-2021 (rlwhitcomb)
		Run the "check_sorted" script on non-Windows platforms as part of "test".
	    08-Mar-2021 (rlwhitcomb)
		Add a "success" message to the test log file if preprocessing matched.
	    09-Mar-2021 (rlwhitcomb)
		Add the LICENSE file to the built .jar file.
	    09-Mar-2021 (rlwhitcomb)
		New hash algorithm wrappers.
	    09-Mar-2021 (rlwhitcomb)
		Add "verify_calc" to the "test" target (non-Windows only).
	    10-Mar-2021 (rlwhitcomb)
		Add the NOTICE file to the built .jar file also.
		Enforce min Ant and Java versions.
	    26-Mar-2021 (rlwhitcomb)
		Update description of "install".
	    29-Mar-2021 (rlwhitcomb)
		Move all main programs to their own "tools" package.
	    29-Mar-2021 (rlwhitcomb)
		Move all the main program wrappers to the "scripts" directory.
	    29-Mar-2021 (rlwhitcomb)
		Move all the test programs to their own package.
	    29-Mar-2021 (rlwhitcomb)
		Move the GUI default theme file.
	    29-Mar-2021 (rlwhitcomb)
		Rename "purge-logs" to "purge" and update some target descriptions.
	    29-Mar-2021 (rlwhitcomb)
		Add WordCount program and wrappers.
	    29-Mar-2021 (rlwhitcomb)
		Add wrappers for WordFind GUI.
	    30-Mar-2021 (rlwhitcomb)
		Rename "install" to "all-install" so it is more obvious what it does.
	    09-Apr-2021 (rlwhitcomb)
		Add "copy-pivot" target.
	    12-Apr-2021 (rlwhitcomb)
		New version of "verify_calc" for Windows.
	    15-Apr-2021 (rlwhitcomb)
		Add Calc JSON resources to the .jar file.
	    15-Apr-2021 (rlwhitcomb)
		Oops! Need to add all the classes from "info/rlwhitcomb" to the .jar file.
	    21-Apr-2021 (rlwhitcomb)
		Rename "dest.jar" property to "result.jar".
	    27-Apr-2021 (rlwhitcomb)
		Exclude unused word file (reduces .jar file size).
	    04-Jun-2021 (rlwhitcomb)
		Don't try to generate HTML4 output anymore. Add Calc help page to the doc.
	    10-Jun-2021 (rlwhitcomb)
		Really use "-html5" for Javadoc, copy Calc help image files.
	    09-Jul-2021 (rlwhitcomb)
		Switch to using "release.build" in the properties file instead of "debug.build".
	    26-Jul-2021 (rlwhitcomb)
		Add a new package for SemanticVersion class. Add manifest to .jar file.
	    26-Jul-2021 (rlwhitcomb)
		Sometimes the Calc help page in the doc was empty - fix race condition.
	    03-Aug-2021 (rlwhitcomb)
		Add "check_sorted" to Windows build.
	    08-Aug-2021 (rlwhitcomb)
		Also check the super verbose output from JavaPreProc.
	    09-Aug-2021 (rlwhitcomb)
		Alternate test canon for Windows vs. other platforms.
	    17-Aug-2021 (rlwhitcomb)
		Copy our "library" files to the installation directory for external use.
	    18-Aug-2021 (rlwhitcomb)
		Do some things differently for the CI builds.
		Like putting the test log in the "dist" location.
	    18-Aug-2021 (rlwhitcomb)
		Add "d" wrapper scripts, add the "directory" files as needed.
	    23-Aug-2021 (rlwhitcomb)
		Rename "external-jars" to "external-files".
	    23-Aug-2021 (rlwhitcomb)
		Add a nice open-source font for Calc (and others?) to use in the GUI.
	    23-Aug-2021 (rlwhitcomb)
		Actually ... we don't really need this nice font.
	    25-Aug-2021 (rlwhitcomb)
		Report the Java version in the info printout.
	    25-Aug-2021 (rlwhitcomb)
		"dist" is actually "../dist" in here.
		Add another progress message for the "verify_calc" step.
		Get the values for "verify_calc" from the build.properties file.
	    26-Aug-2021 (rlwhitcomb)
		Text resources for WordFind.
	    29-Aug-2021 (rlwhitcomb)
		Add "ppj" wrapper scripts.
	    30-Aug-2021 (rlwhitcomb)
		Add "timethis" wrapper scripts.
	    01-Sep-2021 (rlwhitcomb)
		Change the order of targets for "all-install" so that the install part
		happens before test, because testing should use the newly built code.
	    02-Sep-2021 (rlwhitcomb)
		Turn off "doclint" for Java less than 14 because of all the
		"invalid entity" errors.
	    06-Sep-2021 (rlwhitcomb)
		Add a target to check copyrights.
	    05-Oct-2021 (rlwhitcomb)
		Clean out the "savetest" created during the Calc unit tests in "purge".
	    07-Oct-2021 (rlwhitcomb)
		Move clean of "savetest" to the end of the testing section instead.
	    11-Oct-2021 (rlwhitcomb)
		Add "fixup" task so that setting up manual "git.commit.id" is more automatic.
	    12-Oct-2021 (rlwhitcomb)
		Needs help when "git" is not installed (Windows).
	    13-Oct-2021 (rlwhitcomb)
		Echo the test log file to console for CI builds.
	    09-Nov-2021 (rlwhitcomb)
		Add "uuid" wrappers.
	    18-Nov-2021 (rlwhitcomb)
		Put Antlr version into build.properties
	    20-Nov-2021 (rlwhitcomb)
		#90: Add "hsh" wrapper scripts (MD5 renamed to Hash).
	    15-Dec-2021 (rlwhitcomb)
		#149: Add "csv" wrappers for CSVTest.
	    16-Dec-2021 (rlwhitcomb)
		Take out "-html5" flag for Javadoc on JDK 8 builds.
	    27-Dec-2021 (rlwhitcomb)
		Add "isdir" wrapper scripts.
	    05-Jan-2022 (rlwhitcomb)
		#196: Add "json" directory and JSON grammar.
		Additional targets there for "clean".
	    18-Jan-2022 (rlwhitcomb)
		#130: Add essentially a debug printout of the extant locales during "test"
		so we can figure out how to fix the "e_lorem" test on the Linux CI machines.

     ========================================================================== -->

<project name="java-utilities" default="all" basedir="."
    xmlns:if="ant:if"
    xmlns:unless="ant:unless"
>
	<property environment="env"/>
	<property file="build.properties"/>

	<!-- Fail on minimum Ant version and min Java version -->
	<fail>
		<condition><not><antversion atleast="${min.ant.version}"/></not></condition>
		<![CDATA[
		Error:

		Building the ${product.name} requires Apache Ant ${min.ant.version} or greater.
		]]>
	</fail>
	<fail>
		<condition><not><javaversion atleast="${compiler.target}"/></not></condition>
		<![CDATA[
		Error:

		Building the ${product.name} requires Java version ${compiler.target} or later.
		]]>
	</fail>

	<condition property="commit.id" value="${git.commit.id}">
		<isset property="git.commit.id"/>
	</condition>
	<condition property="commit.id" value="${commit}">
		<isset property="commit"/>
	</condition>

	<exec executable="git" dir="." outputproperty="commit.id" unless:set="commit.id">
		<arg line="rev-parse --short HEAD"/>
	</exec>
	<loadproperties>
		<propertyresource name="commit.id"/>
		<filterchain>
			<prefixlines prefix="build.lastrev="/>
		</filterchain>
	</loadproperties>

	<tstamp>
		<format property="build.date" pattern="yyyy-MM-dd"/>
		<format property="build.time" pattern="HH:mm:ss.SSS z"/>
		<format property="test.log.file.name" pattern="'test'.yyyy-MM-dd_HH-mm.'log'" locale="en,US"/>
	</tstamp>

	<propertyfile file="build.number" comment="Utilities Build Values">
		<entry key="build.number" value="${build.lastrev}"/>
		<entry key="build.date"   value="${build.date}"/>
		<entry key="build.time"   value="${build.time}"/>
	</propertyfile>

	<condition property="ci.build" value="true" else="false">
		<isset property="CI_BUILD"/>
	</condition>

	<echo message="======================================================================"/>
	<echo message=""/>
	<echo message="                    U T I L I T I E S   B U I L D"/>
	<echo message=""/>
	<echo message="       Build number = ${build.lastrev}"/>
	<echo message="    Build date/time = ${build.date} ${build.time}"/>
	<echo message="        Is CI build ? ${ci.build}"/>
	<echo message="       Java version : ${java.vm.name} ${java.vm.version}"/>
	<echo message=""/>
	<echo message="======================================================================"/>

	<condition property="new.java.version" value="true" else="false" >
		<javaversion atleast="9"/>
	</condition>
	<condition property="html4.output" value="true" else="false">
		<and>
			<javaversion atleast="9"/>
			<not><javaversion atleast="14"/></not>
		</and>
	</condition>
	<condition property="doclint.off" value="true" else="false">
		<not>
			<javaversion atleast="14"/>
		</not>
	</condition>
	<condition property="on.windows" value="true" else="false">
		<os family="windows"/>
	</condition>
	<condition property="windows.temp.exists" value="true" else="false">
		<and><istrue value="${on.windows}"/><resourceexists><file file="${env.TEMP}" directory="true"/></resourceexists></and>
	</condition>
	<condition property="other.temp.exists" value="true" else="false">
		<and><isfalse value="${on.windows}"/><resourceexists><file file="${env.TMPDIR}" directory="true"/></resourceexists></and>
	</condition>
	<condition property="utilities.available" value="true" else="false">
		<isset property="env.UTILITIES_HOME"/>
	</condition>
	<condition property="pivot.available" value="true" else="false">
		<isset property="env.PIVOT_HOME"/>
	</condition>
	<condition property="debug.build" value="false" else="true">
		<istrue value="${release.build}"/>
	</condition>
	<condition property="test.log.canon" value="TestPP.log.windows.canon" else="TestPP.log.other.canon">
		<os family="windows"/>
	</condition>
	<condition property="test.log.path" value="../dist/${test.log.file.name}" else="${test.log.file.name}">
		<istrue value="${ci.build}"/>
	</condition>

	<patternset id="wrapper-files">
		<include name="_find_and_run_class"     unless:true="${on.windows}"/>
		<include name="_find_and_run_class.bat"     if:true="${on.windows}"/>
		<include name="`"                       unless:true="${on.windows}"/>
		<include name="`.bat"                       if:true="${on.windows}"/>
		<include name="``"                      unless:true="${on.windows}"/>
		<include name="``.bat"                      if:true="${on.windows}"/>
		<include name="c"                       unless:true="${on.windows}"/>
		<include name="c.bat"                       if:true="${on.windows}"/>
		<include name="calc"                    unless:true="${on.windows}"/>
		<include name="calc.bat"                    if:true="${on.windows}"/>
		<include name="cat"                     unless:true="${on.windows}"/>
		<include name="cat.bat"                     if:true="${on.windows}"/>
		<include name="cg"                      unless:true="${on.windows}"/>
		<include name="cg.bat"                      if:true="${on.windows}"/>
		<include name="cmp"                     unless:true="${on.windows}"/>
		<include name="cmp.bat"                     if:true="${on.windows}"/>
		<include name="crl"                     unless:true="${on.windows}"/>
		<include name="crl.bat"                     if:true="${on.windows}"/>
		<include name="csv"                     unless:true="${on.windows}"/>
		<include name="csv.bat"                     if:true="${on.windows}"/>
		<include name="d"                       unless:true="${on.windows}"/>
		<include name="d.bat"                       if:true="${on.windows}"/>
		<include name="decode"                  unless:true="${on.windows}"/>
		<include name="decode.bat"                  if:true="${on.windows}"/>
		<include name="encode"                  unless:true="${on.windows}"/>
		<include name="encode.bat"                  if:true="${on.windows}"/>
		<include name="environ"                 unless:true="${on.windows}"/>
		<include name="environ.bat"                 if:true="${on.windows}"/>
		<include name="fixpath"                 unless:true="${on.windows}"/>
		<include name="fixpath.bat"                 if:true="${on.windows}"/>
		<include name="gmt"                     unless:true="${on.windows}"/>
		<include name="gmt.bat"                     if:true="${on.windows}"/>
		<include name="gunz"                    unless:true="${on.windows}"/>
		<include name="gunz.bat"                    if:true="${on.windows}"/>
		<include name="gz"                      unless:true="${on.windows}"/>
		<include name="gz.bat"                      if:true="${on.windows}"/>
		<include name="hsh"                     unless:true="${on.windows}"/>
		<include name="hsh.bat"                     if:true="${on.windows}"/>
		<include name="hd"                      unless:true="${on.windows}"/>
		<include name="hd.bat"                      if:true="${on.windows}"/>
		<include name="isdir"                   unless:true="${on.windows}"/>
		<include name="isdir.bat"                   if:true="${on.windows}"/>
		<include name="lists"                   unless:true="${on.windows}"/>
		<include name="lists.bat"                   if:true="${on.windows}"/>
		<include name="manifest"                unless:true="${on.windows}"/>
		<include name="manifest.bat"                if:true="${on.windows}"/>
		<include name="matches"                 unless:true="${on.windows}"/>
		<include name="matches.bat"                 if:true="${on.windows}"/>
		<include name="md5"                     unless:true="${on.windows}"/>
		<include name="md5.bat"                     if:true="${on.windows}"/>
		<include name="mkcanon"                 unless:true="${on.windows}"/>
		<include name="mkcanon.bat"                 if:true="${on.windows}"/>
		<include name="os"                      unless:true="${on.windows}"/>
		<include name="os.bat"                      if:true="${on.windows}"/>
		<include name="ppj"                     unless:true="${on.windows}"/>
		<include name="ppj.bat"                     if:true="${on.windows}"/>
		<include name="sha256"                  unless:true="${on.windows}"/>
		<include name="sha256.bat"                  if:true="${on.windows}"/>
		<include name="sha512"                  unless:true="${on.windows}"/>
		<include name="sha512.bat"                  if:true="${on.windows}"/>
		<include name="sleep"                   unless:true="${on.windows}"/>
		<include name="sleep.bat"                   if:true="${on.windows}"/>
		<include name="tester"                  unless:true="${on.windows}"/>
		<include name="tester.bat"                  if:true="${on.windows}"/>
		<include name="timethis"                unless:true="${on.windows}"/>
		<include name="timethis.bat"                if:true="${on.windows}"/>
		<include name="tre"                     unless:true="${on.windows}"/>
		<include name="tre.bat"                     if:true="${on.windows}"/>
		<include name="uuid"                    unless:true="${on.windows}"/>
		<include name="uuid.bat"                    if:true="${on.windows}"/>
		<include name="version"                 unless:true="${on.windows}"/>
		<include name="version.bat"                 if:true="${on.windows}"/>
		<include name="wc"                      unless:true="${on.windows}"/>
		<include name="wc.bat"                      if:true="${on.windows}"/>
		<include name="wf"                      unless:true="${on.windows}"/>
		<include name="wf.bat"                      if:true="${on.windows}"/>
		<include name="wfg"                     unless:true="${on.windows}"/>
		<include name="wfg.bat"                     if:true="${on.windows}"/>
		<include name="which"                   unless:true="${on.windows}"/>
		<include name="which.bat"                   if:true="${on.windows}"/>
	</patternset>

	<property name="tester.class" value="info.rlwhitcomb.tester.Tester"/>

	<echo message="Build the custom Ant tasks if necessary..."/>
	<ant antfile="build-ant-tasks.xml" target="install"/>
	<echo message="Beginning build..."/>

	<taskdef name="preproc" classname="info.rlwhitcomb.preproc.JavaPreProc" classpath="${ant.tasks.jar}"/>

	<macrodef name="generate-text-resources">
		<attribute name="dir"/>

		<sequential>
			<apply executable="native2ascii" dir="@{dir}" dest="@{dir}"
				failonerror="true" unless:true="${new.java.version}">
				<arg value="-encoding" />
				<arg value="utf8" />
				<srcfile/>
				<targetfile/>
				<fileset dir="@{dir}" includes="resources*.utf8"/>
				<globmapper from="*.utf8" to="*.properties"/>
			</apply>
			<copy todir="@{dir}" if:true="${new.java.version}">
				<fileset dir="@{dir}" includes="resources*.utf8"/>
				<globmapper from="*.utf8" to="*.properties"/>
			</copy>
		</sequential>
	</macrodef>

	<target name="preproc" description="Preprocesses necessary files.">
		<parallel>
			<generate-text-resources dir="info/rlwhitcomb/calc" />
			<generate-text-resources dir="info/rlwhitcomb/cat" />
			<generate-text-resources dir="info/rlwhitcomb/compare" />
			<generate-text-resources dir="info/rlwhitcomb/csv" />
			<generate-text-resources dir="info/rlwhitcomb/matches" />
			<generate-text-resources dir="info/rlwhitcomb/tester" />
			<generate-text-resources dir="info/rlwhitcomb/tree" />
			<generate-text-resources dir="info/rlwhitcomb/util" />
			<generate-text-resources dir="info/rlwhitcomb/wordfind" />
			<sequential>
				<preproc dir="info/rlwhitcomb/calc" inputExt=".htmlpp"
					processAsDirectory="true" recurseDirectories="false"
					nologo="true" verbose="plus" format="UTF8"/>
				<mkdir dir="doc-files"/>
				<copy todir="doc-files">
					<fileset dir="info/rlwhitcomb/calc" includes="calc_help.html"/>
					<fileset dir="info/rlwhitcomb/calc" includes="*.png"/>
				</copy>
			</sequential>
		</parallel>
	</target>

	<target name="check-grammars-uptodate">
		<condition property="calc.grammar.uptodate" value="true" else="false">
			<uptodate srcfile="info/rlwhitcomb/calc/Calc.g4" targetfile="info/rlwhitcomb/calc/CalcParser.java"/>
		</condition>
		<condition property="json.grammar.uptodate" value="true" else="false">
			<uptodate srcfile="info/rlwhitcomb/json/JSON.g4" targetfile="info/rlwhitcomb/json/JSONParser.java"/>
		</condition>
	</target>

	<target name="process-grammars" depends="check-grammars-uptodate" description="Process the Antlr grammars to generate parsers.">
		<echo message="Generating Calc parser" unless:true="${calc.grammar.uptodate}"/>
		<java jar="external-files/antlr-${antlr.version}-complete.jar" fork="true" unless:true="${calc.grammar.uptodate}" failonerror="true">
			<arg file="info/rlwhitcomb/calc/Calc.g4"/>
			<arg value="-visitor"/>
			<arg value="-no-listener"/>
			<arg line="-package info.rlwhitcomb.calc"/>
		</java>
		<echo message="Generating JSON parser" unless:true="${json.grammar.uptodate}"/>
		<java jar="external-files/antlr-${antlr.version}-complete.jar" fork="true" unless:true="${json.grammar.uptodate}" failonerror="true">
			<arg file="info/rlwhitcomb/json/JSON.g4"/>
			<arg value="-visitor"/>
			<arg value="-no-listener"/>
			<arg line="-package info.rlwhitcomb.json"/>
		</java>
	</target>

	<target name="touch" description="Touch files that should be preprocessed anew during 'update'.">
		<touch file="info/rlwhitcomb/calc/calc_help.htmlpp"/>
	</target>

	<target name="compile" depends="preproc,process-grammars" description="Compiles the java source.">
		<javac
		    includeAntRuntime="false"
		    createMissingPackageInfoClass="false"
		    encoding="${compiler.encoding}"
		    source="${compiler.source}"
		    target="${compiler.target}"
		    debug="${debug.build}">
			<compilerarg line="${compiler.args}"/>
			<src path="."/>
			<src path="de/onyxbits"/>
			<src path="name/fraser/neil/plaintext"/>
			<src path="net/iharder/b64"/>
			<src path="info/rlwhitcomb"/>
			<src path="info/rlwhitcomb/annotations"/>
			<src path="info/rlwhitcomb/calc"/>
			<src path="info/rlwhitcomb/cat"/>
			<src path="info/rlwhitcomb/compare"/>
			<src path="info/rlwhitcomb/csv"/>
			<src path="info/rlwhitcomb/curl"/>
			<src path="info/rlwhitcomb/directory"/>
			<src path="info/rlwhitcomb/heart"/>
			<src path="info/rlwhitcomb/jarfile"/>
			<src path="info/rlwhitcomb/json"/>
			<src path="info/rlwhitcomb/matches"/>
			<src path="info/rlwhitcomb/test"/>
			<src path="info/rlwhitcomb/tester"/>
			<src path="info/rlwhitcomb/tools"/>
			<src path="info/rlwhitcomb/tree"/>
			<src path="info/rlwhitcomb/util"/>
			<src path="info/rlwhitcomb/wordfind"/>
			<exclude name="**/package-info.java"/>
			<exclude name="**/preproc/*"/>
			<exclude name="**/ant/*"/>
			<classpath>
				<pathelement path="."/>
				<fileset dir="external-files" includes="*.jar"/>
			</classpath>
		</javac>
	</target>

	<target name="jar" depends="compile" description="Jar up the compiled class files (into ${result.jar}).">
		<delete file="MANIFEST.MF"/>
		<manifest file="MANIFEST.MF">
			<attribute name="Built-By" value="${user.name}"/>
			<attribute name="Implementation-Title" value="${product.name}"/>
			<attribute name="Implementation-Version" value="${build.version}+${build.lastrev}"/>
		</manifest>
		<jar basedir="." destfile="${result.jar}" manifest="MANIFEST.MF">
			<metainf dir="..">
				<include name="LICENSE"/>
				<include name="NOTICE"/>
			</metainf>
			<include name="build.properties"/>
			<include name="build.number"/>
			<include name="version.properties"/>
			<include name="images/*.*"/>
			<include name="info/rlwhitcomb/*.json"/>
			<include name="info/rlwhitcomb/*.class"/>
			<include name="info/rlwhitcomb/annotations/*.class"/>
			<include name="info/rlwhitcomb/calc/*.class"/>
			<include name="info/rlwhitcomb/calc/*.bxml"/>
			<include name="info/rlwhitcomb/calc/*.html"/>
			<include name="info/rlwhitcomb/calc/*.json"/>
			<include name="info/rlwhitcomb/calc/*.png"/>
			<include name="info/rlwhitcomb/cat/*.class"/>
			<include name="info/rlwhitcomb/compare/*.class"/>
			<include name="info/rlwhitcomb/csv/*.class"/>
			<include name="info/rlwhitcomb/curl/*.class"/>
			<include name="info/rlwhitcomb/curl/*.bxml"/>
			<include name="info/rlwhitcomb/directory/*.class"/>
			<include name="info/rlwhitcomb/heart/*.class"/>
			<include name="info/rlwhitcomb/jarfile/*.class"/>
			<include name="info/rlwhitcomb/json/*.class"/>
			<include name="info/rlwhitcomb/matches/*.class"/>
			<include name="info/rlwhitcomb/tester/*.class"/>
			<include name="info/rlwhitcomb/tools/*.class"/>
			<include name="info/rlwhitcomb/tree/*.class"/>
			<include name="info/rlwhitcomb/util/*.class"/>
			<include name="info/rlwhitcomb/wordfind/*.class"/>
			<include name="info/rlwhitcomb/wordfind/*.bxml"/>
			<include name="info/rlwhitcomb/wordfind/*.json"/>
			<include name="info/rlwhitcomb/wordfind/*.txt"/>
			<exclude name="info/rlwhitcomb/wordfind/enable1.txt"/>
			<include name="info/rlwhitcomb/**/logging*.properties"/>
			<include name="info/rlwhitcomb/**/resources*.properties"/>
			<include name="de/onyxbits/*.class"/>
			<include name="name/fraser/neil/plaintext/*.class"/>
			<include name="net/iharder/b64/*.class"/>
		</jar>
	</target>

	<target name="doc" depends="compile" description="Builds the Javadoc for the entire project.">
		<javadoc destdir="doc" access="private" encoding="utf-8" windowtitle="Utilities">
			<arg value="-html5" if:true="{new.java.version}"/>
			<arg value="--frames" if:true="${html4.output}"/>
			<arg line="--release 8" if:true="${new.java.version}"/>
			<arg line="-Xdoclint:none" if:true="${doclint.off}"/>
			<link href="https://docs.oracle.com/javase/8/docs/api/"/>
			<link href="https://pivot.apache.org/2.0.5/docs/api/"/>
			<link href="https://www.antlr.org/api/Java/"/>
			<packageset dir=".">
				<include name="de/onyxbits"/>
				<include name="net/iharder/b64"/>
				<include name="name/fraser/neil/plaintext"/>
				<include name="info/rlwhitcomb/**"/>
			</packageset>
			<fileset dir=".">
				<include name="*.java" />
			</fileset>
			<classpath>
				<pathelement path="."/>
				<fileset dir="external-files" includes="*.jar"/>
				<fileset dir="${ant.library.dir}" includes="*.jar"/>
			</classpath>
		</javadoc>
	</target>

	<target name="test" depends="compile" description="Run extant unit tests.">
		<echo>Running unit tests. Output going to "${test.log.path}" file.</echo>
		<echo>Test JavaPreProc...</echo>
		<delete>
			<fileset dir="test/data" includes="TestPP.java,TestPP.log"/>
		</delete>
		<preproc dir="test/data" processAsDirectory="true" recurseDirectories="true" nologo="true" verbose="plus"
								      log="test/data/TestPP.log" overwrite="true"/>
		<fail message="Preprocessing results don't match!">
			<condition>
				<not><filesmatch file1="test/data/TestPP.java" file2="test/canons/TestPP.canon" textfile="true"/></not>
			</condition>
		</fail>
		<fail message="Preprocessing log doesn't match!">
			<condition>
				<not><filesmatch file1="test/data/TestPP.log" file2="test/canons/${test.log.canon}" textfile="true"/></not>
			</condition>
		</fail>
		<echo file="${test.log.path}" append="true">JavaPreProc: Preprocessing results and log match.
</echo>
		<echo>Debug printout of available locales and their information...</echo>
		<java classname="info.rlwhitcomb.tools.OS">
			<arg value="locales"/>
			<arg value="-verbose"/>
		</java>
		<echo>Test of InitializationTask...</echo>
		<java classname="info.rlwhitcomb.test.InitTaskTest"   output="${test.log.path}" append="true" failonerror="true"/>
		<echo>Running various tests through the Tester...</echo>
		<java classname="${tester.class}"                     output="${test.log.path}" append="true" failonerror="true">
			<arg value="-timing"/>
			<arg value="-dir:test/files"/>
			<arg value="mastertest"/>
		</java>
		<echo>Verifying the M${mersenne.number} prime (${mersenne.digits} digits)...</echo>
		<echo>GIMPS Milestones: October 6, 2021: All tests below M(57 885 161) verified, confirming its place as the 48th Mersenne prime.</echo>
		<exec executable="./verify_calc"  dir="."             output="${test.log.path}" append="true" unless:true="${on.windows}" failonerror="true">
			<arg value="${mersenne.number}"/>
			<arg value="${mersenne.digits}"/>
		</exec>
		<exec executable="cmd"            dir="."             output="${test.log.path}" append="true" if:true="${on.windows}" failonerror="true">
			<arg value="/c"/>
			<arg value="verify_calc.bat"/>
			<arg value="${mersenne.number}"/>
			<arg value="${mersenne.digits}"/>
		</exec>
		<exec executable="./check_sorted" dir="."             output="${test.log.path}" append="true" unless:true="${on.windows}" failonerror="true"/>
		<exec executable="cmd"            dir="."             output="${test.log.path}" append="true" if:true="${on.windows}" failonerror="true">
			<arg value="/c"/>
			<arg value="check_sorted.bat"/>
		</exec>
		<delete>
			<fileset dir="." includes="savetest"/>
		</delete>
		<echo unless:true="${ci.build}">Done with unit tests. Successful. Results in "${test.log.path}" file.</echo>
		<echo if:true="${ci.build}">Done with unit tests. Successful.</echo>
		<concat if:true="${ci.build}">
			<fileset dir="../dist" includes="${test.log.file.name}"/>
		</concat>
	</target>

	<target name="clean" depends="purge" description="Cleans all generated files, old temp files, and old log files.">
		<delete>
			<fileset dir="." includes="${result.jar}"/>
			<fileset dir="." includes="*.class"/>
			<fileset dir="test/data" includes="*.class"/>
			<fileset dir="de/onyxbits" includes="*.class"/>
			<fileset dir="name/fraser/neil/plaintext" includes="*.class"/>
			<fileset dir="net/iharder/b64" includes="*.class"/>
			<fileset dir="info/rlwhitcomb" includes="*.class"/>
			<fileset dir="info/rlwhitcomb/annotations" includes="*.class"/>
			<fileset dir="info/rlwhitcomb/calc" includes="*.class,*.interp,*.tokens,CalcParser.java,CalcVisitor.java,CalcLexer.java,CalcBaseVisitor.java"/>
			<fileset dir="info/rlwhitcomb/cat" includes="*.class"/>
			<fileset dir="info/rlwhitcomb/compare" includes="*.class"/>
			<fileset dir="info/rlwhitcomb/csv" includes="*.class"/>
			<fileset dir="info/rlwhitcomb/curl" includes="*.class"/>
			<fileset dir="info/rlwhitcomb/directory" includes="*.class"/>
			<fileset dir="info/rlwhitcomb/heart" includes="*.class"/>
			<fileset dir="info/rlwhitcomb/jarfile" includes="*.class"/>
			<fileset dir="info/rlwhitcomb/json" includes="*.class"/>
			<fileset dir="info/rlwhitcomb/json" includes="*.class,*.interp,*.tokens,JSONParser.java,JSONVisitor.java,JSONLexer.java,JSONBaseVisitor.java"/>
			<fileset dir="info/rlwhitcomb/matches" includes="*.class"/>
			<fileset dir="info/rlwhitcomb/test" includes="*.class"/>
			<fileset dir="info/rlwhitcomb/tester" includes="*.class"/>
			<fileset dir="info/rlwhitcomb/tools" includes="*.class"/>
			<fileset dir="info/rlwhitcomb/tree" includes="*.class"/>
			<fileset dir="info/rlwhitcomb/util" includes="*.class"/>
			<fileset dir="info/rlwhitcomb/wordfind" includes="*.class"/>
			<!-- Clean out the preprocessed files -->
			<fileset dir="." includes="**/*">
				<present targetdir=".">
					<mapper type="glob" from="*.java" to="*.javapp"/>
				</present>
			</fileset>
			<fileset dir="." includes="**/*">
				<present targetdir=".">
					<mapper type="glob" from="*.html" to="*.htmlpp"/>
				</present>
			</fileset>
			<fileset dir="." includes="**/*">
				<present targetdir=".">
					<mapper type="glob" from="*.properties" to="*.utf8"/>
				</present>
			</fileset>
		</delete>
		<delete dir="doc"/>
	</target>

	<target name="all" depends="clean,compile,jar,doc,test" description="Does clean, compile, jar, doc, and test."/>

	<target name="copy-to-install-directory" description="Copy the requisite files to the local utilities directory.">
		<copy file="${result.jar}" todir="${env.UTILITIES_HOME}" if:true="${utilities.available}"/>
		<copy todir="${env.UTILITIES_HOME}" if:true="${utilities.available}">
			<fileset dir="./scripts">
				<patternset refid="wrapper-files"/>
			</fileset>
			<fileset dir="./external-files">
				<include name="*.jar"/>
				<exclude name="antlr-*-complete.jar"/>
			</fileset>
			<fileset dir="./test/files">
				<include name="lib*"/>
			</fileset>
		</copy>
		<chmod dir="${env.UTILITIES_HOME}" perm="+x" if:true="${utilities.available}">
			<patternset refid="wrapper-files"/>
		</chmod>
		<fixcrlf srcdir="${env.UTILITIES_HOME}" if:true="${utilities.available}">
			<patternset refid="wrapper-files"/>
		</fixcrlf>
		<echo message="Variable UTILITIES_HOME is not set in the environment!" unless:true="${utilities.available}"/>
	</target>

	<target name="all-install" depends="clean,compile,jar,doc,copy-to-install-directory,test" description="Does 'all' + 'copy-to-install-directory'; this is the highest level target."/>

	<target name="update" depends="touch,compile,jar,copy-to-install-directory" description="Simple incremental build and update the installed .jar file."/>

	<target name="purge" description="Purge temp and log files older than two weeks ago.">
		<tstamp>
			<format property="last.two.weeks" pattern="MM/dd/yyyy hh:mm aa" locale="en,US" offset="-2" unit="week"/>
		</tstamp>
		<echo message="Purging log and temporary files from before ${last.two.weeks}..."/>
		<delete>
			<fileset dir="." includes="test*.log,utilities*.log">
				<date datetime="${last.two.weeks}" when="before"/>
			</fileset>
			<fileset dir="${env.TMPDIR}" includes="canonerror*.tmp,canoninput*.tmp,canonoutput*.tmp,testerror*.tmp,testinput*.tmp,testoutput*.tmp,utilities*.log" if:true="${other.temp.exists}">
				<date datetime="${last.two.weeks}" when="before"/>
			</fileset>
			<fileset dir="${env.TEMP}" includes="canonerror*.tmp,canoninput*.tmp,canonoutput*.tmp,testerror*.tmp,testinput*.tmp,testoutput*.tmp,utilities*.log" if:true="${windows.temp.exists}">
				<date datetime="${last.two.weeks}" when="before"/>
			</fileset>
		</delete>
	</target>

	<target name="copy-pivot" description="Copies new 'pivot*.jar' files from the source location.">
		<copy todir="./external-files" if:true="${pivot.available}">
			<fileset dir="${env.PIVOT_HOME}/lib">
				<include name="pivot-core*.jar"/>
				<include name="pivot-wtk*.jar"/>
			</fileset>
		</copy>
	</target>

	<target name="check-copyrights" depends="compile" description="Check copyright years and proper LICENSE text.">
		<java classname="CheckCopyrights"/>
	</target>

	<target name="fixup" description="Manually update 'git.commit.id' for an offline build.">
		<fail>
			<condition><not><isset property="commit"/></not></condition>
			<![CDATA[
	Error:

	Define the desired git commit id with -Dcommit=xxxxxxx on the command line.
			]]>
		</fail>
		<echo message="Updating 'build.properties' with git.commit.id = ${commit} and release.build = true"/>
		<replace file="build.properties" token="release.build = false" value="release.build = true"/>
		<replace file="build.properties" token="#git.commit.id = 00cc121" value="git.commit.id = ${commit}"/>
	</target>
</project>


