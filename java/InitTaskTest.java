/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2020-2021 Roger L. Whitcomb.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *	Tests of the InitializationTask class.
 *
 * History:
 *	09-Nov-2020 (rlwhitcomb)
 *	    Initial coding finished.
 *	02-Dec-2020 (rlwhitcomb)
 *	    Move "piDigits" to NumericUtil.
 *	17-Feb-2021 (rlwhitcomb)
 *	    After experiencing one failure during testing, fix it (?)
 *	    by calling "super()" in the constructor. Reduce loop count.
 *	    Fail with non-zero exit code.
 */
import info.rlwhitcomb.util.Environment;
import info.rlwhitcomb.util.InitializationTask;
import info.rlwhitcomb.util.NumericUtil;

/**
 * Do some tests of the InitializationTask class to make sure it functions the way we
 * think it should (that is, basically that the "waitUntilFinished" method actually
 * does that, and that the final results of the task are correct).
 * <p> For now, the "long-running" initialization task is to calculate a bunch of digits
 * of PI a bunch of times (currently this takes ~ 6-7 seconds).
 */
public class InitTaskTest
{
	/**
	 * 3141 * 3 digits of PI 
	 *
	 * Sourced from <a href="https://www.piday.org/million/">https://www.piday.org/million/</a>
	 */
	private final static String PI_DIGITS =
	    "3141592653589793238462643383279502884197169399375105820974944592307816406286" +
	    "2089986280348253421170679821480865132823066470938446095505822317253594081284" +
	    "8111745028410270193852110555964462294895493038196442881097566593344612847564" +
	    "8233786783165271201909145648566923460348610454326648213393607260249141273724" +
	    "5870066063155881748815209209628292540917153643678925903600113305305488204665" +
	    "2138414695194151160943305727036575959195309218611738193261179310511854807446" +
	    "2379962749567351885752724891227938183011949129833673362440656643086021394946" +
	    "3952247371907021798609437027705392171762931767523846748184676694051320005681" +
	    "2714526356082778577134275778960917363717872146844090122495343014654958537105" +
	    "0792279689258923542019956112129021960864034418159813629774771309960518707211" +
	    "3499999983729780499510597317328160963185950244594553469083026425223082533446" +
	    "8503526193118817101000313783875288658753320838142061717766914730359825349042" +
	    "8755468731159562863882353787593751957781857780532171226806613001927876611195" +
	    "9092164201989380952572010654858632788659361533818279682303019520353018529689" +
	    "9577362259941389124972177528347913151557485724245415069595082953311686172785" +
	    "5889075098381754637464939319255060400927701671139009848824012858361603563707" +
	    "6601047101819429555961989467678374494482553797747268471040475346462080466842" +
	    "5906949129331367702898915210475216205696602405803815019351125338243003558764" +
	    "0247496473263914199272604269922796782354781636009341721641219924586315030286" +
	    "1829745557067498385054945885869269956909272107975093029553211653449872027559" +
	    "6023648066549911988183479775356636980742654252786255181841757467289097777279" +
	    "3800081647060016145249192173217214772350141441973568548161361157352552133475" +
	    "7418494684385233239073941433345477624168625189835694855620992192221842725502" +
	    "5425688767179049460165346680498862723279178608578438382796797668145410095388" +
	    "3786360950680064225125205117392984896084128488626945604241965285022210661186" +
	    "3067442786220391949450471237137869609563643719172874677646575739624138908658" +
	    "3264599581339047802759009946576407895126946839835259570982582262052248940772" +
	    "6719478268482601476990902640136394437455305068203496252451749399651431429809" +
	    "1906592509372216964615157098583874105978859597729754989301617539284681382686" +
	    "8386894277415599185592524595395943104997252468084598727364469584865383673622" +
	    "2626099124608051243884390451244136549762780797715691435997700129616089441694" +
	    "8685558484063534220722258284886481584560285060168427394522674676788952521385" +
	    "2254995466672782398645659611635488623057745649803559363456817432411251507606" +
	    "9479451096596094025228879710893145669136867228748940560101503308617928680920" +
	    "8747609178249385890097149096759852613655497818931297848216829989487226588048" +
	    "5756401427047755513237964145152374623436454285844479526586782105114135473573" +
	    "9523113427166102135969536231442952484937187110145765403590279934403742007310" +
	    "5785390621983874478084784896833214457138687519435064302184531910484810053706" +
	    "1468067491927819119793995206141966342875444064374512371819217999839101591956" +
	    "1814675142691239748940907186494231961567945208095146550225231603881930142093" +
	    "7621378559566389377870830390697920773467221825625996615014215030680384477345" +
	    "4920260541466592520149744285073251866600213243408819071048633173464965145390" +
	    "5796268561005508106658796998163574736384052571459102897064140110971206280439" +
	    "0397595156771577004203378699360072305587631763594218731251471205329281918261" +
	    "8612586732157919841484882916447060957527069572209175671167229109816909152801" +
	    "7350671274858322287183520935396572512108357915136988209144421006751033467110" +
	    "3141267111369908658516398315019701651511685171437657618351556508849099898599" +
	    "8238734552833163550764791853589322618548963213293308985706420467525907091548" +
	    "1416549859461637180270981994309924488957571282890592323326097299712084433573" +
	    "2654893823911932597463667305836041428138830320382490375898524374417029132765" +
	    "6180937734440307074692112019130203303801976211011004492932151608424448596376" +
	    "6983895228684783123552658213144957685726243344189303968642624341077322697802" +
	    "8073189154411010446823252716201052652272111660396665573092547110557853763466" +
	    "8206531098965269186205647693125705863566201855810072936065987648611791045334" +
	    "8850346113657686753249441668039626579787718556084552965412665408530614344431" +
	    "8586769751456614068007002378776591344017127494704205622305389945613140711270" +
	    "0040785473326993908145466464588079727082668306343285878569830523580893306575" +
	    "7406795457163775254202114955761581400250126228594130216471550979259230990796" +
	    "5473761255176567513575178296664547791745011299614890304639947132962107340437" +
	    "5189573596145890193897131117904297828564750320319869151402870808599048010941" +
	    "2147221317947647772622414254854540332157185306142288137585043063321751829798" +
	    "6622371721591607716692547487389866549494501146540628433663937900397692656721" +
	    "4638530673609657120918076383271664162748888007869256029022847210403172118608" +
	    "2041900042296617119637792133757511495950156604963186294726547364252308177036" +
	    "7515906735023507283540567040386743513622224771589150495309844489333096340878" +
	    "0769325993978054193414473774418426312986080998886874132604721569516239658645" +
	    "7302163159819319516735381297416772947867242292465436680098067692823828068996" +
	    "4004824354037014163149658979409243237896907069779422362508221688957383798623" +
	    "0015937764716512289357860158816175578297352334460428151262720373431465319777" +
	    "7416031990665541876397929334419521541341899485444734567383162499341913181480" +
	    "9277771038638773431772075456545322077709212019051660962804909263601975988281" +
	    "6133231666365286193266863360627356763035447762803504507772355471058595487027" +
	    "9081435624014517180624643626794561275318134078330336254232783944975382437205" +
	    "8353114771199260638133467768796959703098339130771098704085913374641442822772" +
	    "6346594704745878477872019277152807317679077071572134447306057007334924369311" +
	    "3835049316312840425121925651798069411352801314701304781643788518529092854520" +
	    "1165839341965621349143415956258658655705526904965209858033850722426482939728" +
	    "5847831630577775606888764462482468579260395352773480304802900587607582510474" +
	    "7091643961362676044925627420420832085661190625454337213153595845068772460290" +
	    "1618766795240616342522577195429162991930645537799140373404328752628889639958" +
	    "7947572917464263574552540790914513571113694109119393251910760208252026187985" +
	    "3188770584297259167781314969900901921169717372784768472686084900337702424291" +
	    "6513005005168323364350389517029893922334517220138128069650117844087451960121" +
	    "2285993716231301711444846409038906449544400619869075485160263275052983491874" +
	    "0786680881833851022833450850486082503930213321971551843063545500766828294930" +
	    "4137765527939751754613953984683393638304746119966538581538420568533862186725" +
	    "2334028308711232827892125077126294632295639898989358211674562701021835646220" +
	    "1349671518819097303811980049734072396103685406643193950979019069963955245300" +
	    "5450580685501956730229219139339185680344903982059551002263535361920419947455" +
	    "3859381023439554495977837790237421617271117236434354394782218185286240851400" +
	    "6660443325888569867054315470696574745855033232334210730154594051655379068662" +
	    "7333799585115625784322988273723198987571415957811196358330059408730681216028" +
	    "7649628674460477464915995054973742562690104903778198683593814657412680492564" +
	    "8798556145372347867330390468838343634655379498641927056387293174872332083760" +
	    "1123029911367938627089438799362016295154133714248928307220126901475466847653" +
	    "5761647737946752004907571555278196536213239264061601363581559074220202031872" +
	    "7760527721900556148425551879253034351398442532234157623361064250639049750086" +
	    "5627109535919465897514131034822769306247435363256916078154781811528436679570" +
	    "6110861533150445212747392454494542368288606134084148637767009612071512491404" +
	    "3027253860764823634143346235189757664521641376796903149501910857598442391986" +
	    "2916421939949072362346468441173940326591840443780513338945257423995082965912" +
	    "2850855582157250310712570126683024029295252201187267675622041542051618416348" +
	    "4756516999811614101002996078386909291603028840026910414079288621507842451670" +
	    "9087000699282120660418371806535567252532567532861291042487761825829765157959" +
	    "8470356222629348600341587229805349896502262917487882027342092222453398562647" +
	    "6691490556284250391275771028402799806636582548892648802545661017296702664076" +
	    "5590429099456815065265305371829412703369313785178609040708667114965583434347" +
	    "6933857817113864558736781230145876871266034891390956200993936103102916161528" +
	    "8138437909904231747336394804575931493140529763475748119356709110137751721008" +
	    "0315590248530906692037671922033229094334676851422144773793937517034436619910" +
	    "4033751117354719185504644902636551281622882446257591633303910722538374218214" +
	    "0883508657391771509682887478265699599574490661758344137522397096834080053559" +
	    "8491754173818839994469748676265516582765848358845314277568790029095170283529" +
	    "7163445621296404352311760066510124120065975585127617858382920419748442360800" +
	    "7193045761893234922927965019875187212726750798125547095890455635792122103334" +
	    "6697499235630254947802490114195212382815309114079073860251522742995818072471" +
	    "6259166854513331239480494707911915326734302824418604142636395480004480026704" +
	    "9624820179289647669758318327131425170296923488962766844032326092752496035799" +
	    "6469256504936818360900323809293459588970695365349406034021665443755890045632" +
	    "8822505452556405644824651518754711962184439658253375438856909411303150952617" +
	    "9378002974120766514793942590298969594699556576121865619673378623625612521632" +
	    "0862869222103274889218654364802296780705765615144632046927906821207388377814" +
	    "2335628236089632080682224680122482611771858963814091839036736722208883215137" +
	    "556003727983940041529700287830766709444745601345564172543709069793961225714";


	/**
	 * This is the "long-running" task that starts right away at startup of the program,
	 * takes some time to run to completion, at which time we can access the results
	 * safely and correctly.
	 */
	private static class InitTask extends InitializationTask
	{
		private int digits;
		private int iters;
		private String digitString = "";
		private int times;

		public InitTask(final int digitLength, final int iterations) {
		    super();

		    this.digits = digitLength;
		    this.iters  = iterations;
		    this.times  = 0;
		}

		@Override
		public void task() {
		    for (int i = 0; i < iters; i++) {
			digitString = NumericUtil.piDigits(digits);
		    }
		}

		/**
		 * @return The finished calculation (string of digits of PI), but
		 * wait until the calculation has definitely finished until
		 * returning the results.
		 */
		public String getPiDigits() {
		    // We're going to time this so we can see that the first time
		    // we wait until the task is complete (some seconds), while
		    // subsequent accesses complete right away.
		    long startTime = Environment.highResTimer();
		    waitUntilFinished();
		    long endTime = Environment.highResTimer();

		    String timesMessage = ++times == 1 ? "first time" : "after first time";
		    System.out.println(String.format("InitTask: waited %1$8.6f secs for the answer, %2$s.",
			Environment.timerValueToSeconds(endTime - startTime),
			timesMessage));

		    return digitString;
		}
	}

	private static int findFirstMismatch(final String s1, final String s2) {
	    int len = Math.min(s1.length(), s2.length());
	    for (int i = 0; i < len; i++) {
		if (s1.charAt(i) != s2.charAt(i)) {
		    return i;
		}
	    }
	    return -1;
	}

	public static void main(String[] args) {
	    int piLength = PI_DIGITS.length();

	    // Start the long-running task going: ~ 6-7 secs
	    System.out.println("InitTaskTest: starting long-running PI digit calculation...");
	    InitTask task = new InitTask(piLength, 10);

	    boolean success = true;

	    // Check the last calculated result against our known-good value.
	    String firstPiDigits = task.getPiDigits();
	    if (!PI_DIGITS.equals(firstPiDigits)) {
		System.out.println("Comparison failed! length of calculated value = " + firstPiDigits.length());
		success = false;
	    }
	    if (!PI_DIGITS.startsWith(firstPiDigits)) {
	    	System.out.println("The calculated digits aren't even the starting part of the real value!");
	    	int index = findFirstMismatch(PI_DIGITS, firstPiDigits);
	    	if (index >= 0)
	    	    System.out.println("Mismatch at index " + index);
		success = false;
	    }

	    // This second access should return the same value as before, and the logging
	    // should show we aren't waiting a bit to get the results now.
	    String secondPiDigits = task.getPiDigits();

	    if (!secondPiDigits.equals(firstPiDigits)) {
		System.out.println("Got different results the second time!");
		success = false;
	    }

	    System.out.format("InitTaskTest: %1$s%n", success ? "Success" : "Failed");

	    System.exit(success ? 0 : 1);
	}
}

